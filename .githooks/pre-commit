#!/bin/bash
# Pre-commit hook: Triangle Intelligence Enterprise Protection
# Prevents hardcoding AND CSS violations that degrade project value
# Integrates with iterative agentic loop system

echo "üõ°Ô∏è  Triangle Intelligence - Enterprise Protection Check"
echo "======================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Flags to track violations
HARDCODING_FOUND=0
CSS_VIOLATIONS=0
CRITICAL_ERRORS=0

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No staged files found${NC}"
    exit 0
fi

echo "üìÅ Staged files:"
echo "$STAGED_FILES" | sed 's/^/  - /'
echo ""

# PHASE 1: CSS Protection Check (CRITICAL)
echo -e "${YELLOW}üõ°Ô∏è  PHASE 1: CSS Protection Check${NC}"

# Check for protected CSS file modifications
PROTECTED_CSS=$(echo "$STAGED_FILES" | grep -E '\.(css|scss|sass)$' || true)
if [ ! -z "$PROTECTED_CSS" ]; then
    if echo "$PROTECTED_CSS" | grep -q "styles/globals.css"; then
        echo -e "${RED}‚ùå CRITICAL: styles/globals.css modification blocked${NC}"
        echo -e "${RED}   This file is protected by CSS architecture rules${NC}"
        CSS_VIOLATIONS=1
        CRITICAL_ERRORS=1
    fi
fi

# Check for inline styles in JS files
JS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx)$' || true)
if [ ! -z "$JS_FILES" ]; then
    INLINE_STYLES=$(git diff --cached --name-only | xargs grep -l 'style\s*=' -- 2>/dev/null | head -3 || true)
    if [ ! -z "$INLINE_STYLES" ]; then
        echo -e "${RED}‚ùå CRITICAL: Inline styles detected${NC}"
        echo "$INLINE_STYLES" | sed 's/^/    /'
        CSS_VIOLATIONS=1
        CRITICAL_ERRORS=1
    fi
    
    # Check for Tailwind classes
    TAILWIND=$(git diff --cached --name-only | xargs grep -l 'className=".*\(bg-\|text-\|p-\|m-\)' -- 2>/dev/null | head -3 || true)
    if [ ! -z "$TAILWIND" ]; then
        echo -e "${RED}‚ùå CRITICAL: Tailwind CSS detected${NC}"
        echo "$TAILWIND" | sed 's/^/    /'
        CSS_VIOLATIONS=1
        CRITICAL_ERRORS=1
    fi
fi

if [ $CSS_VIOLATIONS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ CSS Protection: No violations${NC}"
fi
echo ""

# PHASE 2: Hardcoding Protection Check
echo -e "${YELLOW}üîí PHASE 2: Hardcoding Protection Check${NC}"

echo "Checking for hardcoded HS codes..."
HS_MATCHES=$(grep -r "420221\|420212\|851712\|620520" . \
    --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" \
    --exclude-dir=node_modules --exclude-dir=.next --exclude-dir=.git \
    --exclude-dir=archive-for-deletion --exclude-dir=data \
    --exclude="*.env*" --exclude="*config*.js" 2>/dev/null || true)

if [ -n "$HS_MATCHES" ]; then
    echo -e "${RED}‚ùå HARDCODING DETECTED - Hardcoded HS codes${NC}"
    echo "$HS_MATCHES"
    echo ""
    HARDCODING_FOUND=1
fi

echo "Checking for hardcoded countries..."
COUNTRY_MATCHES=$(grep -r "'US'\|'CA'\|'MX'\|'CN'\|\"US\"\|\"CA\"\|\"MX\"\|\"CN\"" . \
    --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" \
    --exclude-dir=node_modules --exclude-dir=.next --exclude-dir=.git \
    --exclude-dir=archive-for-deletion --exclude-dir=data \
    --exclude="*.env*" --exclude="*config*.js" 2>/dev/null || true)

if [ -n "$COUNTRY_MATCHES" ]; then
    echo -e "${RED}‚ùå HARDCODING DETECTED - Hardcoded country codes${NC}"
    echo "$COUNTRY_MATCHES"
    echo ""
    HARDCODING_FOUND=1
fi

echo "Checking for hardcoded tariff rates..."
TARIFF_MATCHES=$(grep -r "12\.5\|17\.6\|6\.8\|0\.125\|0\.176" . \
    --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" \
    --exclude-dir=node_modules --exclude-dir=.next --exclude-dir=.git \
    --exclude-dir=archive-for-deletion --exclude-dir=data \
    --exclude="*.env*" --exclude="*config*.js" 2>/dev/null || true)

if [ -n "$TARIFF_MATCHES" ]; then
    echo -e "${RED}‚ùå HARDCODING DETECTED - Hardcoded tariff rates${NC}"
    echo "$TARIFF_MATCHES"
    echo ""
    HARDCODING_FOUND=1
fi

echo ""

if [ $HARDCODING_FOUND -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Hardcoding Protection: No violations${NC}"
fi
echo ""

# FINAL DECISION
echo "======================================================="
echo -e "${YELLOW}üìä PRE-COMMIT SUMMARY${NC}"

TOTAL_VIOLATIONS=$(($CRITICAL_ERRORS + $HARDCODING_FOUND))

if [ $TOTAL_VIOLATIONS -gt 0 ]; then
    echo -e "${RED}‚ùå COMMIT BLOCKED - Enterprise protection violations found${NC}"
    echo ""
    echo -e "${RED}üö® CRITICAL ISSUES TO FIX:${NC}"
    
    if [ $CSS_VIOLATIONS -eq 1 ]; then
        echo -e "${RED}  ‚Ä¢ CSS Architecture Violations${NC}"
        echo -e "${YELLOW}    ‚Üí Use existing classes from styles/globals.css${NC}"
        echo -e "${YELLOW}    ‚Üí Remove inline styles and Tailwind classes${NC}"
        echo -e "${YELLOW}    ‚Üí Check .claude/context/style-guide.md for help${NC}"
    fi
    
    if [ $HARDCODING_FOUND -eq 1 ]; then
        echo -e "${RED}  ‚Ä¢ Business Logic Hardcoding Violations${NC}"
        echo -e "${YELLOW}    ‚Üí Move hardcoded values to database or config${NC}"
        echo -e "${YELLOW}    ‚Üí Use environment variables for countries/rates${NC}"
        echo -e "${YELLOW}    ‚Üí Replace static HS codes with database queries${NC}"
    fi
    
    echo ""
    echo -e "${YELLOW}üí° Why This Matters:${NC}"
    echo "‚Ä¢ CSS violations break the professional design system"
    echo "‚Ä¢ Hardcoded values make the project unusable for enterprise clients"
    echo "‚Ä¢ Both issues prevent successful deployment and scaling"
    echo ""
    echo -e "${RED}‚õî Fix all violations above, then commit again${NC}"
    echo ""
    echo -e "${YELLOW}üîÑ After fixes, consider running full validation:${NC}"
    echo -e "${YELLOW}   ‚Ä¢ /design-review  (comprehensive design validation)${NC}"
    echo -e "${YELLOW}   ‚Ä¢ /validate       (complete quality check)${NC}"
    echo -e "${YELLOW}   ‚Ä¢ node .claude/config/acceptance-criteria-loops.js${NC}"
    
    exit 1
else
    echo -e "${GREEN}‚úÖ All Enterprise Protection Checks Passed${NC}"
    echo -e "${GREEN}üõ°Ô∏è  CSS Architecture: Protected${NC}"
    echo -e "${GREEN}üîí Business Logic: No hardcoding${NC}"
    echo -e "${GREEN}üè¢ Enterprise Ready: Validated${NC}"
    
    # Suggest running design validation for UI changes
    UI_CHANGES=$(echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx)$' | grep -E '(components|pages)' || true)
    if [ ! -z "$UI_CHANGES" ]; then
        echo ""
        echo -e "${YELLOW}üé® UI changes detected - consider full validation:${NC}"
        echo -e "${YELLOW}   /design-review (for comprehensive analysis)${NC}"
        echo -e "${YELLOW}   /mobile-test (for iPhone 15 testing)${NC}"
    fi
    
    echo ""
    echo -e "${GREEN}üöÄ Proceeding with commit...${NC}"
    exit 0
fi