"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/status";
exports.ids = ["pages/api/status"];
exports.modules = {

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "ioredis":
/*!**************************!*\
  !*** external "ioredis" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("ioredis");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

module.exports = require("react");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fstatus&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cstatus.js&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fstatus&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cstatus.js&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_status_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\status.js */ \"(api)/./pages/api/status.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_status_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_status_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/status\",\n        pathname: \"/api/status\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_status_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnN0YXR1cyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDc3RhdHVzLmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ29EO0FBQ3BEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxpREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsaURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHJpYW5nbGUtaW50ZWxsaWdlbmNlLXBsYXRmb3JtLz83YjMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcc3RhdHVzLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvc3RhdHVzXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvc3RhdHVzXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fstatus&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cstatus.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/environment-validation.js":
/*!***************************************!*\
  !*** ./lib/environment-validation.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnvVar: () => (/* binding */ getEnvVar),\n/* harmony export */   getSecurityStatus: () => (/* binding */ getSecurityStatus),\n/* harmony export */   getSupabaseConfig: () => (/* binding */ getSupabaseConfig),\n/* harmony export */   isDevelopment: () => (/* binding */ isDevelopment),\n/* harmony export */   isProduction: () => (/* binding */ isProduction),\n/* harmony export */   safeLog: () => (/* binding */ safeLog),\n/* harmony export */   validateAPIKeysSecurity: () => (/* binding */ validateAPIKeysSecurity),\n/* harmony export */   validateEnvironment: () => (/* binding */ validateEnvironment),\n/* harmony export */   validateSecretSecurity: () => (/* binding */ validateSecretSecurity)\n/* harmony export */ });\n/**\n * Environment Variable Validation and Configuration\n * Centralized validation for production readiness\n */ // Required environment variables for production\n// Split by client/server because client can't see server-only vars\nconst CLIENT_REQUIRED_ENV_VARS = [\n    \"NEXT_PUBLIC_SUPABASE_URL\",\n    \"NEXT_PUBLIC_SUPABASE_ANON_KEY\"\n];\nconst SERVER_REQUIRED_ENV_VARS = [\n    \"NEXT_PUBLIC_SUPABASE_URL\",\n    \"NEXT_PUBLIC_SUPABASE_ANON_KEY\",\n    \"SUPABASE_SERVICE_ROLE_KEY\",\n    \"JWT_SECRET\",\n    \"NEXTAUTH_SECRET\"\n];\nconst SERVER_RECOMMENDED_ENV_VARS = [\n    \"ANTHROPIC_API_KEY\",\n    \"COMTRADE_API_KEY\",\n    \"SHIPPO_API_KEY\",\n    \"STRIPE_SECRET_KEY\"\n];\n// Optional environment variables with defaults\nconst OPTIONAL_ENV_VARS = {\n    NODE_ENV: \"development\",\n    NEXT_PUBLIC_APP_URL: \"http://localhost:3000\"\n};\n/**\n * Validate all required environment variables are present\n * @throws {Error} If any required variable is missing\n */ function validateEnvironment() {\n    // Skip validation entirely on client-side to avoid errors\n    if (false) {}\n    // Server-side validation\n    const missing = SERVER_REQUIRED_ENV_VARS.filter((key)=>!process.env[key]);\n    if (missing.length > 0) {\n        throw new Error(`Missing required server-side environment variables: ${missing.join(\", \")}`);\n    }\n    // Note: Using console.log here as this runs before logger is initialized\n    console.log(\"✅ All required environment variables are present\");\n}\n/**\n * Get environment variable with validation\n * @param {string} key - Environment variable key\n * @param {boolean} required - Whether the variable is required\n * @returns {string} Environment variable value\n */ function getEnvVar(key, required = true) {\n    const value = process.env[key];\n    if (required && !value) {\n        throw new Error(`Missing required environment variable: ${key}`);\n    }\n    return value || OPTIONAL_ENV_VARS[key];\n}\n/**\n * Check if running in production\n */ function isProduction() {\n    return \"development\" === \"production\";\n}\n/**\n * Check if running in development\n */ function isDevelopment() {\n    return \"development\" === \"development\";\n}\n/**\n * Safe logging that respects environment\n * Only logs in development unless force is true\n */ function safeLog(message, data = null, force = false) {\n    if (isDevelopment() || force) {\n        if (data) {\n            // Note: Using console.log here as this is used for bootstrap logging\n            console.log(message, data);\n        } else {\n            console.log(message);\n        }\n    }\n}\n/**\n * Get Supabase configuration based on environment\n */ function getSupabaseConfig() {\n    const url = getEnvVar(\"NEXT_PUBLIC_SUPABASE_URL\");\n    // Use service role key on server, anon key on client\n    const key =  false ? 0 : getEnvVar(\"SUPABASE_SERVICE_ROLE_KEY\", false) || getEnvVar(\"NEXT_PUBLIC_SUPABASE_ANON_KEY\");\n    return {\n        url,\n        key\n    };\n}\n/**\n * Validate API keys are not exposed and check for security issues\n */ function validateAPIKeysSecurity() {\n    const sensitiveKeys = [\n        \"SUPABASE_SERVICE_ROLE_KEY\",\n        \"ANTHROPIC_API_KEY\",\n        \"STRIPE_SECRET_KEY\",\n        \"COMTRADE_API_KEY\",\n        \"SHIPPO_API_KEY\",\n        \"JWT_SECRET\",\n        \"NEXTAUTH_SECRET\",\n        \"ENTERPRISE_MASTER_KEY\"\n    ];\n    if (false) {}\n}\n/**\n * Check for dangerous default/template values\n */ function validateSecretSecurity() {\n    const dangerousPatterns = [\n        {\n            key: \"JWT_SECRET\",\n            patterns: [\n                \"your-super-secure\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"NEXTAUTH_SECRET\",\n            patterns: [\n                \"your-nextauth-secret\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"ENTERPRISE_MASTER_KEY\",\n            patterns: [\n                \"triangle-intelligence-enterprise\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"ANTHROPIC_API_KEY\",\n            patterns: [\n                \"your-key-here\",\n                \"REPLACE_WITH\"\n            ]\n        }\n    ];\n    const warnings = [];\n    dangerousPatterns.forEach(({ key, patterns })=>{\n        if (process.env[key]) {\n            patterns.forEach((pattern)=>{\n                if (process.env[key].includes(pattern)) {\n                    warnings.push(`${key} appears to use default/template value`);\n                }\n            });\n        }\n    });\n    // Check secret strength\n    if (process.env.JWT_SECRET && process.env.JWT_SECRET.length < 32) {\n        warnings.push(\"JWT_SECRET is too short (minimum 32 characters)\");\n    }\n    return warnings;\n}\n/**\n * Get comprehensive security status\n */ function getSecurityStatus() {\n    const warnings = validateSecretSecurity();\n    const requiredMissing = SERVER_REQUIRED_ENV_VARS.filter((key)=>!process.env[key]);\n    const recommendedMissing = SERVER_RECOMMENDED_ENV_VARS.filter((key)=>!process.env[key]);\n    return {\n        status: requiredMissing.length === 0 && warnings.length === 0 ? \"secure\" : \"needs_attention\",\n        requiredMissing,\n        recommendedMissing,\n        securityWarnings: warnings,\n        lastChecked: new Date().toISOString()\n    };\n}\n// Auto-validate on import in development (SERVER-SIDE ONLY)\nif (isDevelopment() && \"undefined\" === \"undefined\") {\n    try {\n        validateEnvironment();\n        validateAPIKeysSecurity();\n    } catch (error) {\n        // Note: Using console.error here as this is critical bootstrap error\n        console.error(\"❌ Environment validation failed:\", error.message);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/environment-validation.js\n");

/***/ }),

/***/ "(api)/./lib/memory-optimizer.js":
/*!*********************************!*\
  !*** ./lib/memory-optimizer.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getMemoryOptimizer: () => (/* binding */ getMemoryOptimizer),\n/* harmony export */   memoryOptimizedAPICall: () => (/* binding */ memoryOptimizedAPICall),\n/* harmony export */   useMemoryOptimizedEffect: () => (/* binding */ useMemoryOptimizedEffect)\n/* harmony export */ });\n/* harmony import */ var _production_logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./production-logger.js */ \"(api)/./lib/production-logger.js\");\n/**\n * 🧠 MEMORY OPTIMIZER - PRODUCTION MEMORY MANAGEMENT\n * \n * Comprehensive memory management system for Triangle Intelligence Platform\n * Eliminates memory leaks while maintaining 30-second real-time updates\n * \n * KEY FEATURES:\n * ✅ Process event listener cleanup\n * ✅ React component unmount handlers  \n * ✅ API call cancellation with AbortController\n * ✅ RSS monitoring cleanup\n * ✅ Beast Master resource management\n * ✅ Database connection pooling optimization\n * ✅ Automatic memory pressure detection\n */ \nclass MemoryOptimizer {\n    constructor(){\n        this.lastLogTime = 0;\n        this.cleanupHandlers = new Map();\n        this.intervalCleanup = new Map();\n        this.timeoutCleanup = new Map();\n        this.eventListeners = new Map();\n        this.abortControllers = new Set();\n        // Environment-based configuration (CRITICAL FIX)\n        this.memoryPressureThreshold = (parseInt(process.env.MEMORY_PRESSURE_THRESHOLD_MB) || 512) * 1024 * 1024;\n        this.gcThreshold = (parseInt(process.env.MEMORY_GC_THRESHOLD_MB) || 768) * 1024 * 1024;\n        this.monitorInterval = parseInt(process.env.MEMORY_MONITOR_INTERVAL_MS) || 60000;\n        this.isInitialized = false;\n        this.lastCleanupTime = 0;\n        this.initializeMemoryMonitoring();\n    }\n    /**\n   * Initialize memory monitoring and cleanup systems\n   */ initializeMemoryMonitoring() {\n        if (this.isInitialized) return;\n        // Only run in server environment\n        if (typeof process === \"undefined\" || \"undefined\" !== \"undefined\") {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory Optimizer: Browser environment detected, limited functionality enabled\");\n            this.isInitialized = true;\n            return;\n        }\n        // Monitor memory usage based on environment configuration\n        const memoryMonitor = setInterval(()=>{\n            this.checkMemoryPressure();\n        }, this.monitorInterval);\n        this.registerCleanup(\"memoryMonitor\", ()=>clearInterval(memoryMonitor));\n        // Process cleanup handlers\n        const processCleanup = ()=>{\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory Optimizer: Initiating graceful shutdown\");\n            this.performGlobalCleanup();\n            process.exit(0);\n        };\n        // Register process event listeners with proper cleanup\n        process.removeAllListeners(\"SIGTERM\");\n        process.removeAllListeners(\"SIGINT\");\n        process.removeAllListeners(\"uncaughtException\");\n        process.removeAllListeners(\"unhandledRejection\");\n        process.once(\"SIGTERM\", processCleanup);\n        process.once(\"SIGINT\", processCleanup);\n        process.on(\"uncaughtException\", (error)=>{\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logError)(\"Uncaught Exception - initiating cleanup\", {\n                error: error.message\n            });\n            this.performGlobalCleanup();\n            process.exit(1);\n        });\n        process.on(\"unhandledRejection\", (reason, promise)=>{\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logError)(\"Unhandled Promise Rejection - cleaning up\", {\n                reason: reason?.message || reason,\n                stack: reason?.stack\n            });\n        });\n        this.isInitialized = true;\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory Optimizer initialized successfully\");\n    }\n    /**\n   * Register cleanup handler for a specific resource\n   */ registerCleanup(id, cleanupFunction) {\n        if (this.cleanupHandlers.has(id)) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(`Cleanup handler already registered for: ${id}`);\n            this.cleanupHandlers.get(id)(); // Clean up old one first\n        }\n        this.cleanupHandlers.set(id, cleanupFunction);\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(`Registered cleanup handler: ${id}`);\n    }\n    /**\n   * Register interval with automatic cleanup\n   */ registerInterval(id, intervalId) {\n        if (this.intervalCleanup.has(id)) {\n            clearInterval(this.intervalCleanup.get(id));\n        }\n        this.intervalCleanup.set(id, intervalId);\n        // Auto-cleanup after 10 minutes to prevent accumulation\n        setTimeout(()=>{\n            if (this.intervalCleanup.has(id)) {\n                clearInterval(this.intervalCleanup.get(id));\n                this.intervalCleanup.delete(id);\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(`Auto-cleaned interval: ${id}`);\n            }\n        }, 600000); // 10 minutes\n    }\n    /**\n   * Register timeout with automatic cleanup\n   */ registerTimeout(id, timeoutId) {\n        if (this.timeoutCleanup.has(id)) {\n            clearTimeout(this.timeoutCleanup.get(id));\n        }\n        this.timeoutCleanup.set(id, timeoutId);\n    }\n    /**\n   * Create and register AbortController for API calls\n   */ createAbortController(timeoutMs = 30000) {\n        const controller = new AbortController();\n        this.abortControllers.add(controller);\n        // Auto-abort after timeout to prevent hanging requests\n        const timeoutId = setTimeout(()=>{\n            if (!controller.signal.aborted) {\n                controller.abort();\n                this.abortControllers.delete(controller);\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Auto-aborted API request due to timeout\");\n            }\n        }, timeoutMs);\n        // Clean up timeout when controller is aborted\n        controller.signal.addEventListener(\"abort\", ()=>{\n            clearTimeout(timeoutId);\n            this.abortControllers.delete(controller);\n        });\n        return controller;\n    }\n    /**\n   * React useEffect cleanup helper\n   */ createReactCleanup() {\n        const cleanupFunctions = [];\n        return {\n            register: (cleanupFn)=>{\n                cleanupFunctions.push(cleanupFn);\n            },\n            cleanup: ()=>{\n                cleanupFunctions.forEach((fn, index)=>{\n                    try {\n                        fn();\n                    } catch (error) {\n                        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logError)(`React cleanup function ${index} failed`, {\n                            error: error.message\n                        });\n                    }\n                });\n                cleanupFunctions.length = 0;\n            }\n        };\n    }\n    /**\n   * Check memory pressure and trigger cleanup if needed - OPTIMIZED\n   */ checkMemoryPressure() {\n        // Only run memory checks in server environment\n        if (typeof process === \"undefined\" || \"undefined\" !== \"undefined\") {\n            return;\n        }\n        const memUsage = process.memoryUsage();\n        const heapUsed = memUsage.heapUsed;\n        const external = memUsage.external;\n        const totalMemory = heapUsed + external;\n        const totalMemoryMB = Math.round(totalMemory / 1024 / 1024);\n        const thresholdMB = Math.round(this.memoryPressureThreshold / 1024 / 1024);\n        const gcThresholdMB = Math.round(this.gcThreshold / 1024 / 1024);\n        // CRITICAL FIX: Only log when threshold exceeded or every 5 minutes\n        const now = Date.now();\n        const shouldLog = totalMemory > this.memoryPressureThreshold || now - this.lastLogTime > 300000;\n        if (shouldLog) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory usage check\", {\n                heapUsed: Math.round(heapUsed / 1024 / 1024) + \"MB\",\n                external: Math.round(external / 1024 / 1024) + \"MB\",\n                total: totalMemoryMB + \"MB\",\n                threshold: thresholdMB + \"MB\",\n                gcThreshold: gcThresholdMB + \"MB\"\n            });\n            this.lastLogTime = now;\n        }\n        // Trigger cleanup if memory usage is high AND enough time has passed\n        if (totalMemory > this.memoryPressureThreshold && now - this.lastCleanupTime > 60000) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(\"Memory pressure detected, triggering cleanup\", {\n                memoryMB: totalMemoryMB,\n                thresholdMB: thresholdMB\n            });\n            this.performMemoryCleanup();\n            this.lastCleanupTime = now;\n        }\n        // Force garbage collection if memory is very high\n        if (totalMemory > this.gcThreshold && global.gc) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(\"High memory usage, forcing garbage collection\", {\n                memoryMB: totalMemoryMB,\n                gcThresholdMB: gcThresholdMB\n            });\n            global.gc();\n        }\n    }\n    /**\n   * Perform memory cleanup operations\n   */ performMemoryCleanup() {\n        let cleaned = 0;\n        // Clean up old intervals (older than 5 minutes)\n        const now = Date.now();\n        for (const [id, data] of this.intervalCleanup.entries()){\n            if (typeof data === \"object\" && data.timestamp && now - data.timestamp > 300000) {\n                clearInterval(data.intervalId);\n                this.intervalCleanup.delete(id);\n                cleaned++;\n            }\n        }\n        // Clean up old timeouts\n        for (const [id, timeoutId] of this.timeoutCleanup.entries()){\n            clearTimeout(timeoutId);\n            this.timeoutCleanup.delete(id);\n            cleaned++;\n        }\n        // Abort old API requests\n        for (const controller of this.abortControllers){\n            if (!controller.signal.aborted) {\n                controller.abort();\n                cleaned++;\n            }\n        }\n        this.abortControllers.clear();\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(`Memory cleanup completed, cleaned ${cleaned} resources`);\n    }\n    /**\n   * Perform global cleanup on shutdown\n   */ performGlobalCleanup() {\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Performing global cleanup\");\n        // Run all registered cleanup handlers\n        for (const [id, cleanupFn] of this.cleanupHandlers.entries()){\n            try {\n                cleanupFn();\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(`Cleaned up: ${id}`);\n            } catch (error) {\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logError)(`Cleanup failed for: ${id}`, {\n                    error: error.message\n                });\n            }\n        }\n        // Clear all intervals and timeouts\n        for (const intervalId of this.intervalCleanup.values()){\n            clearInterval(typeof intervalId === \"object\" ? intervalId.intervalId : intervalId);\n        }\n        for (const timeoutId of this.timeoutCleanup.values()){\n            clearTimeout(timeoutId);\n        }\n        // Abort all pending requests\n        for (const controller of this.abortControllers){\n            controller.abort();\n        }\n        // Clear maps\n        this.cleanupHandlers.clear();\n        this.intervalCleanup.clear();\n        this.timeoutCleanup.clear();\n        this.abortControllers.clear();\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Global cleanup completed\");\n    }\n    /**\n   * Get memory statistics\n   */ getMemoryStats() {\n        if (typeof process === \"undefined\" || \"undefined\" !== \"undefined\") {\n            return {\n                available: false,\n                environment: \"browser\",\n                cleanupHandlers: this.cleanupHandlers.size,\n                activeIntervals: this.intervalCleanup.size,\n                activeTimeouts: this.timeoutCleanup.size,\n                activeRequests: this.abortControllers.size\n            };\n        }\n        const memUsage = process.memoryUsage();\n        return {\n            available: true,\n            environment: \"server\",\n            heap: {\n                used: Math.round(memUsage.heapUsed / 1024 / 1024),\n                total: Math.round(memUsage.heapTotal / 1024 / 1024)\n            },\n            external: Math.round(memUsage.external / 1024 / 1024),\n            cleanupHandlers: this.cleanupHandlers.size,\n            activeIntervals: this.intervalCleanup.size,\n            activeTimeouts: this.timeoutCleanup.size,\n            activeRequests: this.abortControllers.size\n        };\n    }\n}\n// Global singleton instance\nlet memoryOptimizer = null;\nfunction getMemoryOptimizer() {\n    if (!memoryOptimizer) {\n        memoryOptimizer = new MemoryOptimizer();\n    }\n    return memoryOptimizer;\n}\n// React hook for memory-optimized effects\nfunction useMemoryOptimizedEffect(effect, deps) {\n    const React = __webpack_require__(/*! react */ \"react\");\n    React.useEffect(()=>{\n        const optimizer = getMemoryOptimizer();\n        const reactCleanup = optimizer.createReactCleanup();\n        const cleanup = effect(reactCleanup.register);\n        return ()=>{\n            reactCleanup.cleanup();\n            if (cleanup) cleanup();\n        };\n    }, deps);\n}\n// API call helper with automatic cleanup\nasync function memoryOptimizedAPICall(url, options = {}, timeoutMs = 30000) {\n    const optimizer = getMemoryOptimizer();\n    const controller = optimizer.createAbortController(timeoutMs);\n    try {\n        const response = await fetch(url, {\n            ...options,\n            signal: controller.signal\n        });\n        return response;\n    } catch (error) {\n        if (error.name === \"AbortError\") {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(\"API call was aborted\", {\n                url\n            });\n            throw new Error(\"Request timeout\");\n        }\n        throw error;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getMemoryOptimizer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/memory-optimizer.js\n");

/***/ }),

/***/ "(api)/./lib/middleware/redis-rate-limiter.js":
/*!**********************************************!*\
  !*** ./lib/middleware/redis-rate-limiter.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createRateLimiter: () => (/* binding */ createRateLimiter),\n/* harmony export */   getRateLimitStatus: () => (/* binding */ getRateLimitStatus),\n/* harmony export */   rateLimitMiddleware: () => (/* binding */ rateLimitMiddleware)\n/* harmony export */ });\n/* harmony import */ var _redis_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../redis-client.js */ \"(api)/./lib/redis-client.js\");\n/* harmony import */ var _utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/production-logger.js */ \"(api)/./lib/utils/production-logger.js\");\n/* harmony import */ var _security_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../security.js */ \"(api)/./lib/security.js\");\n/**\n * Redis-Based Rate Limiter Middleware\n * Scalable, distributed rate limiting with intelligent fallback\n */ \n\n\n/**\n * Rate limiting configurations for different endpoint types\n */ const RATE_LIMIT_CONFIGS = {\n    // API endpoints by category\n    \"api_general\": {\n        windowMs: 900000,\n        maxRequests: 100,\n        skipSuccessfulRequests: false,\n        skipFailedRequests: false,\n        description: \"General API endpoints\"\n    },\n    \"api_intelligence\": {\n        windowMs: 900000,\n        maxRequests: 50,\n        skipSuccessfulRequests: false,\n        skipFailedRequests: true,\n        description: \"Intelligence APIs (more expensive)\"\n    },\n    \"api_volatile\": {\n        windowMs: 3600000,\n        maxRequests: 25,\n        skipSuccessfulRequests: false,\n        skipFailedRequests: true,\n        description: \"Volatile data APIs (external API calls)\"\n    },\n    \"api_auth\": {\n        windowMs: 900000,\n        maxRequests: 20,\n        skipSuccessfulRequests: true,\n        skipFailedRequests: false,\n        description: \"Authentication endpoints\"\n    },\n    // Page requests\n    \"page_requests\": {\n        windowMs: 300000,\n        maxRequests: 200,\n        skipSuccessfulRequests: true,\n        skipFailedRequests: true,\n        description: \"Page requests\"\n    },\n    // Default fallback\n    \"default\": {\n        windowMs: 900000,\n        maxRequests: 75,\n        skipSuccessfulRequests: false,\n        skipFailedRequests: false,\n        description: \"Default rate limiting\"\n    }\n};\n/**\n * Memory-based fallback for when Redis is unavailable\n */ class MemoryFallbackLimiter {\n    constructor(){\n        this.store = new Map();\n        this.cleanupInterval = setInterval(()=>this.cleanup(), 300000) // 5 minutes\n        ;\n    }\n    async checkRateLimit(identifier, config) {\n        const now = Date.now();\n        const windowStart = now - config.windowMs;\n        if (!this.store.has(identifier)) {\n            this.store.set(identifier, []);\n        }\n        const requests = this.store.get(identifier);\n        // Remove expired requests\n        const validRequests = requests.filter((timestamp)=>timestamp > windowStart);\n        if (validRequests.length >= config.maxRequests) {\n            return {\n                allowed: false,\n                totalHits: validRequests.length,\n                remainingPoints: 0,\n                msBeforeNext: config.windowMs - (now - Math.min(...validRequests)),\n                fallbackMode: true\n            };\n        }\n        // Add current request\n        validRequests.push(now);\n        this.store.set(identifier, validRequests);\n        return {\n            allowed: true,\n            totalHits: validRequests.length,\n            remainingPoints: config.maxRequests - validRequests.length,\n            msBeforeNext: config.windowMs,\n            fallbackMode: true\n        };\n    }\n    cleanup() {\n        const now = Date.now();\n        for (const [identifier, requests] of this.store.entries()){\n            const validRequests = requests.filter((timestamp)=>timestamp > now - 3600000) // Keep 1 hour\n            ;\n            if (validRequests.length === 0) {\n                this.store.delete(identifier);\n            } else {\n                this.store.set(identifier, validRequests);\n            }\n        }\n        (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logDebug)(\"Memory fallback rate limiter cleanup completed\", {\n            identifiers: this.store.size\n        });\n    }\n    destroy() {\n        clearInterval(this.cleanupInterval);\n        this.store.clear();\n    }\n}\nconst memoryFallback = new MemoryFallbackLimiter();\n/**\n * Redis-based rate limiter implementation\n */ class RedisRateLimiter {\n    /**\n   * Check rate limit using Redis with sliding window algorithm\n   */ static async checkRateLimit(identifier, config) {\n        try {\n            const redis = await (0,_redis_client_js__WEBPACK_IMPORTED_MODULE_0__.getRedisClient)();\n            const key = `rate_limit:${identifier}`;\n            const now = Date.now();\n            const windowStart = now - config.windowMs;\n            // Use Redis pipeline for atomic operations\n            const pipeline = redis.pipeline();\n            // Remove expired entries\n            pipeline.zremrangebyscore(key, 0, windowStart);\n            // Count current entries\n            pipeline.zcard(key);\n            // Add current request\n            pipeline.zadd(key, now, `${now}-${Math.random()}`);\n            // Set expiration\n            pipeline.expire(key, Math.ceil(config.windowMs / 1000));\n            const results = await pipeline.exec();\n            if (!results || results.some(([err])=>err)) {\n                throw new Error(\"Redis pipeline execution failed\");\n            }\n            const currentCount = results[1][1] // Count after removal, before adding new\n            ;\n            const allowed = currentCount < config.maxRequests;\n            if (!allowed) {\n                // Remove the request we just added since it's not allowed\n                await redis.zrem(key, `${now}-${Math.random()}`);\n            }\n            return {\n                allowed,\n                totalHits: allowed ? currentCount + 1 : currentCount,\n                remainingPoints: Math.max(0, config.maxRequests - (allowed ? currentCount + 1 : currentCount)),\n                msBeforeNext: allowed ? config.windowMs : await this.getTimeUntilNextAllowed(redis, key, config.windowMs),\n                fallbackMode: false\n            };\n        } catch (error) {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)(\"Redis rate limiter failed, using memory fallback\", {\n                error: error.message,\n                identifier: identifier.substring(0, 20) + \"...\"\n            });\n            // Fallback to memory-based rate limiting\n            return await memoryFallback.checkRateLimit(identifier, config);\n        }\n    }\n    /**\n   * Calculate time until next request is allowed\n   */ static async getTimeUntilNextAllowed(redis, key, windowMs) {\n        try {\n            const oldestEntry = await redis.zrange(key, 0, 0, \"WITHSCORES\");\n            if (oldestEntry.length === 0) return 0;\n            const oldestTimestamp = parseInt(oldestEntry[1]);\n            const timeUntilExpiry = windowMs - (Date.now() - oldestTimestamp);\n            return Math.max(0, timeUntilExpiry);\n        } catch (error) {\n            return windowMs // Conservative estimate\n            ;\n        }\n    }\n}\n/**\n * Get rate limit configuration based on request path\n */ function getRateLimitConfig(req) {\n    const path = req.url || req.nextUrl?.pathname || \"\";\n    // API endpoints\n    if (path.startsWith(\"/api/\")) {\n        if (path.includes(\"/intelligence/\") || path.includes(\"/ai/\")) {\n            return RATE_LIMIT_CONFIGS.api_intelligence;\n        }\n        if (path.includes(\"/volatile-data/\") || path.includes(\"/external/\")) {\n            return RATE_LIMIT_CONFIGS.api_volatile;\n        }\n        if (path.includes(\"/auth/\") || path.includes(\"/login\") || path.includes(\"/register\")) {\n            return RATE_LIMIT_CONFIGS.api_auth;\n        }\n        return RATE_LIMIT_CONFIGS.api_general;\n    }\n    // Page requests\n    if (path.startsWith(\"/\") && !path.startsWith(\"/api/\")) {\n        return RATE_LIMIT_CONFIGS.page_requests;\n    }\n    return RATE_LIMIT_CONFIGS.default;\n}\n/**\n * Generate rate limit identifier from request\n */ function getRateLimitIdentifier(req) {\n    // Try multiple sources for client identification\n    const clientIP = req.headers[\"x-forwarded-for\"]?.split(\",\")[0]?.trim() || req.headers[\"x-real-ip\"] || req.connection?.remoteAddress || req.socket?.remoteAddress || \"unknown-client\";\n    const userAgent = req.headers[\"user-agent\"] || \"unknown-agent\";\n    const path = req.url || req.nextUrl?.pathname || \"unknown-path\";\n    // Create composite identifier for better accuracy\n    const sanitizedIP = _security_js__WEBPACK_IMPORTED_MODULE_2__.SecurityValidator.sanitizeString(clientIP, 50);\n    const sanitizedUA = _security_js__WEBPACK_IMPORTED_MODULE_2__.SecurityValidator.sanitizeString(userAgent.substring(0, 50), 50);\n    const sanitizedPath = _security_js__WEBPACK_IMPORTED_MODULE_2__.SecurityValidator.sanitizeString(path.split(\"?\")[0], 100) // Remove query params\n    ;\n    return `${sanitizedIP}:${sanitizedPath}:${Buffer.from(sanitizedUA).toString(\"base64\").substring(0, 20)}`;\n}\n/**\n * Main rate limiting middleware\n */ async function rateLimitMiddleware(req, res, next) {\n    const startTime = Date.now();\n    try {\n        // Skip rate limiting in development if desired\n        if ( true && process.env.SKIP_RATE_LIMIT === \"true\") {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logDebug)(\"Rate limiting skipped for development\");\n            return next();\n        }\n        const config = getRateLimitConfig(req);\n        const identifier = getRateLimitIdentifier(req);\n        (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logDebug)(\"Rate limiting check\", {\n            path: req.url,\n            identifier: identifier.substring(0, 30) + \"...\",\n            config: config.description,\n            fallbackMode: (0,_redis_client_js__WEBPACK_IMPORTED_MODULE_0__.shouldUseFallbackMode)()\n        });\n        const result = (0,_redis_client_js__WEBPACK_IMPORTED_MODULE_0__.shouldUseFallbackMode)() ? await memoryFallback.checkRateLimit(identifier, config) : await RedisRateLimiter.checkRateLimit(identifier, config);\n        // Add rate limit headers\n        res.setHeader(\"X-RateLimit-Limit\", config.maxRequests);\n        res.setHeader(\"X-RateLimit-Remaining\", result.remainingPoints);\n        res.setHeader(\"X-RateLimit-Reset\", new Date(Date.now() + result.msBeforeNext).toISOString());\n        res.setHeader(\"X-RateLimit-RetryAfter\", Math.ceil(result.msBeforeNext / 1000));\n        res.setHeader(\"X-RateLimit-Policy\", config.description);\n        res.setHeader(\"X-RateLimit-Mode\", result.fallbackMode ? \"memory\" : \"redis\");\n        if (!result.allowed) {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)(\"Rate limit exceeded\", {\n                identifier: identifier.substring(0, 20) + \"...\",\n                path: req.url,\n                totalHits: result.totalHits,\n                limit: config.maxRequests,\n                retryAfter: Math.ceil(result.msBeforeNext / 1000),\n                fallbackMode: result.fallbackMode\n            });\n            return res.status(429).json({\n                error: \"Rate limit exceeded\",\n                message: `Too many requests. Limit: ${config.maxRequests} per ${Math.round(config.windowMs / 60000)} minutes`,\n                retryAfter: Math.ceil(result.msBeforeNext / 1000),\n                limit: config.maxRequests,\n                remaining: result.remainingPoints,\n                resetTime: new Date(Date.now() + result.msBeforeNext).toISOString(),\n                policy: config.description\n            });\n        }\n        const duration = Date.now() - startTime;\n        (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logDebug)(\"Rate limit check passed\", {\n            duration,\n            remaining: result.remainingPoints,\n            totalHits: result.totalHits,\n            fallbackMode: result.fallbackMode\n        });\n        next();\n    } catch (error) {\n        const duration = Date.now() - startTime;\n        (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"Rate limiting middleware error\", {\n            error: error.message,\n            duration,\n            fallback: \"allowing request\"\n        });\n        // On error, allow the request but log the issue\n        next();\n    }\n}\n/**\n * Rate limiting middleware factory for custom configurations\n */ function createRateLimiter(customConfig) {\n    return async (req, res, next)=>{\n        const config = {\n            ...RATE_LIMIT_CONFIGS.default,\n            ...customConfig\n        };\n        const identifier = getRateLimitIdentifier(req);\n        try {\n            const result = (0,_redis_client_js__WEBPACK_IMPORTED_MODULE_0__.shouldUseFallbackMode)() ? await memoryFallback.checkRateLimit(identifier, config) : await RedisRateLimiter.checkRateLimit(identifier, config);\n            res.setHeader(\"X-RateLimit-Limit\", config.maxRequests);\n            res.setHeader(\"X-RateLimit-Remaining\", result.remainingPoints);\n            res.setHeader(\"X-RateLimit-Reset\", new Date(Date.now() + result.msBeforeNext).toISOString());\n            if (!result.allowed) {\n                return res.status(429).json({\n                    error: \"Rate limit exceeded\",\n                    retryAfter: Math.ceil(result.msBeforeNext / 1000)\n                });\n            }\n            next();\n        } catch (error) {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"Custom rate limiter error\", {\n                error: error.message\n            });\n            next() // Allow request on error\n            ;\n        }\n    };\n}\n/**\n * Get rate limit status for monitoring\n */ async function getRateLimitStatus(identifier, config = RATE_LIMIT_CONFIGS.default) {\n    try {\n        if ((0,_redis_client_js__WEBPACK_IMPORTED_MODULE_0__.shouldUseFallbackMode)()) {\n            return {\n                mode: \"memory\",\n                status: \"operational\",\n                note: \"Using memory fallback\"\n            };\n        }\n        const redis = await (0,_redis_client_js__WEBPACK_IMPORTED_MODULE_0__.getRedisClient)();\n        const key = `rate_limit:${identifier}`;\n        const count = await redis.zcard(key);\n        return {\n            mode: \"redis\",\n            status: \"operational\",\n            currentCount: count,\n            limit: config.maxRequests,\n            remaining: Math.max(0, config.maxRequests - count)\n        };\n    } catch (error) {\n        return {\n            mode: \"error\",\n            status: \"degraded\",\n            error: error.message\n        };\n    }\n}\n// Cleanup on shutdown\nprocess.on(\"SIGTERM\", ()=>memoryFallback.destroy());\nprocess.on(\"SIGINT\", ()=>memoryFallback.destroy());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/middleware/redis-rate-limiter.js\n");

/***/ }),

/***/ "(api)/./lib/monitoring.js":
/*!***************************!*\
  !*** ./lib/monitoring.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAlert: () => (/* binding */ createAlert),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getHealthMetrics: () => (/* binding */ getHealthMetrics),\n/* harmony export */   monitoring: () => (/* binding */ monitoring),\n/* harmony export */   trackAPICall: () => (/* binding */ trackAPICall),\n/* harmony export */   trackBusinessEvent: () => (/* binding */ trackBusinessEvent),\n/* harmony export */   trackDatabaseOperation: () => (/* binding */ trackDatabaseOperation),\n/* harmony export */   trackError: () => (/* binding */ trackError),\n/* harmony export */   trackMetric: () => (/* binding */ trackMetric)\n/* harmony export */ });\n/* harmony import */ var _production_logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./production-logger.js */ \"(api)/./lib/production-logger.js\");\n/* harmony import */ var _environment_validation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment-validation.js */ \"(api)/./lib/environment-validation.js\");\n/**\n * Monitoring and Error Tracking System\n * Production-ready monitoring infrastructure\n */ \n\nclass MonitoringSystem {\n    constructor(){\n        this.metrics = new Map();\n        this.alerts = new Map();\n        this.startTime = Date.now();\n        this.errorCount = 0;\n        this.requestCount = 0;\n        // Initialize performance tracking\n        this.initializePerformanceTracking();\n    }\n    /**\n   * Initialize performance monitoring\n   */ initializePerformanceTracking() {\n        if (false) {}\n        // Server-side process monitoring\n        process.on(\"uncaughtException\", (error)=>{\n            this.trackError(\"uncaught_exception\", error);\n            process.exit(1);\n        });\n        process.on(\"unhandledRejection\", (reason, promise)=>{\n            this.trackError(\"unhandled_rejection\", reason);\n        });\n    }\n    /**\n   * Track Web Vitals for client performance\n   */ trackWebVitals() {\n        if (true) return;\n        // Largest Contentful Paint (LCP)\n        this.observePerformance(\"largest-contentful-paint\", (entry)=>{\n            this.trackMetric(\"web_vitals.lcp\", entry.value, {\n                url: window.location.pathname,\n                timestamp: Date.now()\n            });\n        });\n        // First Input Delay (FID)\n        this.observePerformance(\"first-input\", (entry)=>{\n            this.trackMetric(\"web_vitals.fid\", entry.processingStart - entry.startTime, {\n                url: window.location.pathname,\n                timestamp: Date.now()\n            });\n        });\n        // Cumulative Layout Shift (CLS)\n        this.observePerformance(\"layout-shift\", (entry)=>{\n            if (!entry.hadRecentInput) {\n                this.trackMetric(\"web_vitals.cls\", entry.value, {\n                    url: window.location.pathname,\n                    timestamp: Date.now()\n                });\n            }\n        });\n    }\n    /**\n   * Observe performance entries\n   */ observePerformance(entryType, callback) {\n        if (\"PerformanceObserver\" in window) {\n            const observer = new PerformanceObserver((list)=>{\n                list.getEntries().forEach(callback);\n            });\n            observer.observe({\n                entryTypes: [\n                    entryType\n                ]\n            });\n        }\n    }\n    /**\n   * Track custom metrics\n   */ trackMetric(name, value, metadata = {}) {\n        const metric = {\n            name,\n            value,\n            timestamp: Date.now(),\n            metadata\n        };\n        this.metrics.set(`${name}_${Date.now()}`, metric);\n        _production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.info(`Metric: ${name}`, {\n            value,\n            metadata\n        });\n        // Send to external monitoring service in production\n        if ((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_1__.isProduction)()) {\n            this.sendToMonitoringService(\"metric\", metric);\n        }\n    }\n    /**\n   * Track errors with context\n   */ trackError(type, error, context = {}) {\n        this.errorCount++;\n        const errorData = {\n            type,\n            message: error.message || error,\n            stack: error.stack,\n            timestamp: Date.now(),\n            context,\n            userAgent: typeof navigator !== \"undefined\" ? navigator.userAgent : \"Server\",\n            url:  false ? 0 : context.url || \"Unknown\"\n        };\n        _production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Error tracked: ${type}`, errorData);\n        // Send to error tracking service\n        if ((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_1__.isProduction)()) {\n            this.sendToErrorTracking(errorData);\n        }\n        // Create alert for critical errors\n        if (this.isCriticalError(error)) {\n            this.createAlert(\"critical_error\", `Critical error: ${error.message}`, errorData);\n        }\n    }\n    /**\n   * Track API performance\n   */ trackAPICall(method, endpoint, duration, statusCode, error = null) {\n        this.requestCount++;\n        const apiMetric = {\n            method,\n            endpoint,\n            duration,\n            statusCode,\n            timestamp: Date.now(),\n            success: !error && statusCode < 400,\n            error: error ? error.message : null\n        };\n        this.trackMetric(\"api.request\", duration, apiMetric);\n        if (error) {\n            this.trackError(\"api_error\", error, apiMetric);\n        }\n        // Alert on high latency\n        if (duration > 5000) {\n            this.createAlert(\"high_latency\", `Slow API call: ${method} ${endpoint}`, apiMetric);\n        }\n        // Alert on high error rate\n        this.checkErrorRate();\n    }\n    /**\n   * Track database operations\n   */ trackDatabaseOperation(table, operation, duration, recordCount = null, error = null) {\n        const dbMetric = {\n            table,\n            operation,\n            duration,\n            recordCount,\n            timestamp: Date.now(),\n            success: !error\n        };\n        this.trackMetric(\"db.query\", duration, dbMetric);\n        if (error) {\n            this.trackError(\"database_error\", error, dbMetric);\n        }\n        // Alert on slow queries\n        if (duration > 1000) {\n            this.createAlert(\"slow_query\", `Slow database query: ${operation} on ${table}`, dbMetric);\n        }\n    }\n    /**\n   * Track business events\n   */ trackBusinessEvent(event, data = {}) {\n        const businessEvent = {\n            event,\n            data,\n            timestamp: Date.now(),\n            session: this.getSessionId()\n        };\n        _production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.business(event, businessEvent);\n        if ((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_1__.isProduction)()) {\n            this.sendToAnalytics(businessEvent);\n        }\n    }\n    /**\n   * Create monitoring alerts\n   */ createAlert(type, message, data = {}) {\n        const alert = {\n            type,\n            message,\n            data,\n            timestamp: Date.now(),\n            severity: this.getAlertSeverity(type),\n            acknowledged: false\n        };\n        this.alerts.set(`${type}_${Date.now()}`, alert);\n        _production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.warn(`Alert created: ${type}`, alert);\n        // Send to alerting system\n        if ((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_1__.isProduction)()) {\n            this.sendAlert(alert);\n        }\n    }\n    /**\n   * Get system health metrics\n   */ getHealthMetrics() {\n        const uptime = Date.now() - this.startTime;\n        const memoryUsage = process.memoryUsage();\n        return {\n            uptime: Math.floor(uptime / 1000),\n            requests: {\n                total: this.requestCount,\n                errors: this.errorCount,\n                errorRate: this.requestCount > 0 ? this.errorCount / this.requestCount * 100 : 0\n            },\n            memory: {\n                heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024),\n                heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024),\n                external: Math.round(memoryUsage.external / 1024 / 1024) // MB\n            },\n            activeAlerts: Array.from(this.alerts.values()).filter((alert)=>!alert.acknowledged).length,\n            metricsCollected: this.metrics.size\n        };\n    }\n    /**\n   * Check error rate and create alerts\n   */ checkErrorRate() {\n        if (this.requestCount > 100) {\n            const errorRate = this.errorCount / this.requestCount * 100;\n            if (errorRate > 5) {\n                this.createAlert(\"high_error_rate\", `Error rate is ${errorRate.toFixed(2)}%`, {\n                    errorRate,\n                    totalRequests: this.requestCount,\n                    totalErrors: this.errorCount\n                });\n            }\n        }\n    }\n    /**\n   * Determine if error is critical\n   */ isCriticalError(error) {\n        const criticalPatterns = [\n            /database.*connection/i,\n            /payment.*failed/i,\n            /authentication.*failed/i,\n            /security.*violation/i,\n            /server.*error/i\n        ];\n        const errorMessage = error.message || error.toString();\n        return criticalPatterns.some((pattern)=>pattern.test(errorMessage));\n    }\n    /**\n   * Get alert severity level\n   */ getAlertSeverity(type) {\n        const severityMap = {\n            critical_error: \"critical\",\n            high_error_rate: \"high\",\n            high_latency: \"medium\",\n            slow_query: \"medium\",\n            security_violation: \"critical\",\n            payment_failure: \"critical\"\n        };\n        return severityMap[type] || \"low\";\n    }\n    /**\n   * Get session identifier\n   */ getSessionId() {\n        if (false) {}\n        return `server_${Date.now()}`;\n    }\n    /**\n   * Send data to external monitoring service\n   */ async sendToMonitoringService(type, data) {\n        try {\n            // Example integration with monitoring service\n            if (process.env.MONITORING_ENDPOINT) {\n                await fetch(process.env.MONITORING_ENDPOINT, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${process.env.MONITORING_API_KEY}`\n                    },\n                    body: JSON.stringify({\n                        type,\n                        data,\n                        source: \"triangle-intelligence\"\n                    })\n                });\n            }\n        } catch (error) {\n            _production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to send monitoring data\", {\n                error: error.message,\n                type,\n                data\n            });\n        }\n    }\n    /**\n   * Send error to tracking service\n   */ async sendToErrorTracking(errorData) {\n        try {\n            // Example Sentry integration\n            if (process.env.SENTRY_DSN) {\n                // Sentry.captureException would go here\n                _production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.debug(\"Would send to Sentry\", {\n                    error: errorData\n                });\n            }\n        } catch (error) {\n            _production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to send error tracking data\", {\n                error: error.message,\n                errorData\n            });\n        }\n    }\n    /**\n   * Send business event to analytics\n   */ async sendToAnalytics(event) {\n        try {\n            // Example analytics integration\n            if (process.env.ANALYTICS_ENDPOINT) {\n                await fetch(process.env.ANALYTICS_ENDPOINT, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${process.env.ANALYTICS_API_KEY}`\n                    },\n                    body: JSON.stringify(event)\n                });\n            }\n        } catch (error) {\n            _production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to send analytics data\", {\n                error: error.message,\n                event\n            });\n        }\n    }\n    /**\n   * Send alert notification\n   */ async sendAlert(alert) {\n        try {\n            // Example alert notification (Slack, PagerDuty, etc.)\n            if (process.env.ALERT_WEBHOOK_URL) {\n                await fetch(process.env.ALERT_WEBHOOK_URL, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        text: `🚨 Triangle Intelligence Alert: ${alert.message}`,\n                        severity: alert.severity,\n                        timestamp: new Date(alert.timestamp).toISOString(),\n                        data: alert.data\n                    })\n                });\n            }\n        } catch (error) {\n            _production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to send alert\", {\n                error: error.message,\n                alert\n            });\n        }\n    }\n}\n// Create singleton monitoring instance\nconst monitoring = new MonitoringSystem();\n// Convenience functions\nconst trackMetric = (name, value, metadata)=>monitoring.trackMetric(name, value, metadata);\nconst trackError = (type, error, context)=>monitoring.trackError(type, error, context);\nconst trackAPICall = (method, endpoint, duration, statusCode, error)=>monitoring.trackAPICall(method, endpoint, duration, statusCode, error);\nconst trackDatabaseOperation = (table, operation, duration, recordCount, error)=>monitoring.trackDatabaseOperation(table, operation, duration, recordCount, error);\nconst trackBusinessEvent = (event, data)=>monitoring.trackBusinessEvent(event, data);\nconst createAlert = (type, message, data)=>monitoring.createAlert(type, message, data);\nconst getHealthMetrics = ()=>monitoring.getHealthMetrics();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (monitoring);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/monitoring.js\n");

/***/ }),

/***/ "(api)/./lib/production-logger.js":
/*!**********************************!*\
  !*** ./lib/production-logger.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   logAPICall: () => (/* binding */ logAPICall),\n/* harmony export */   logBusiness: () => (/* binding */ logBusiness),\n/* harmony export */   logDBQuery: () => (/* binding */ logDBQuery),\n/* harmony export */   logDebug: () => (/* binding */ logDebug),\n/* harmony export */   logError: () => (/* binding */ logError),\n/* harmony export */   logInfo: () => (/* binding */ logInfo),\n/* harmony export */   logPerformance: () => (/* binding */ logPerformance),\n/* harmony export */   logSecurity: () => (/* binding */ logSecurity),\n/* harmony export */   logWarn: () => (/* binding */ logWarn),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _environment_validation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment-validation.js */ \"(api)/./lib/environment-validation.js\");\n/**\n * Production-Safe Logging System\n * Handles logging with environment awareness and security\n */ \n// Log levels\nconst LOG_LEVELS = {\n    ERROR: 0,\n    WARN: 1,\n    INFO: 2,\n    DEBUG: 3,\n    TRACE: 4\n};\nclass ProductionLogger {\n    constructor(){\n        this.level = (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? LOG_LEVELS.WARN : LOG_LEVELS.DEBUG;\n        this.sensitivePatterns = [\n            /sk-[a-zA-Z0-9_-]+/,\n            /pk_[a-zA-Z0-9_-]+/,\n            /eyJ[a-zA-Z0-9_-]+/,\n            /password/i,\n            /secret/i,\n            /token/i,\n            /key.*=.*[a-zA-Z0-9_-]{20,}/ // Key-value pairs with long values\n        ];\n        // Asynchronous logging queue for performance\n        this.logQueue = [];\n        this.maxQueueSize = 1000;\n        this.flushInterval = 5000 // 5 seconds\n        ;\n        this.isFlushingLogs = false;\n        // Start periodic log flushing in production\n        if ((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)()) {\n            setInterval(()=>{\n                this.flushLogsAsync();\n            }, this.flushInterval);\n        }\n    }\n    /**\n   * Sanitize sensitive data from logs\n   */ sanitize(data) {\n        if (typeof data === \"string\") {\n            let sanitized = data;\n            this.sensitivePatterns.forEach((pattern)=>{\n                sanitized = sanitized.replace(pattern, \"[REDACTED]\");\n            });\n            return sanitized;\n        }\n        if (typeof data === \"object\" && data !== null) {\n            const sanitized = Array.isArray(data) ? [] : {};\n            for (const [key, value] of Object.entries(data)){\n                const keyLower = key.toLowerCase();\n                if (keyLower.includes(\"password\") || keyLower.includes(\"secret\") || keyLower.includes(\"token\") || keyLower.includes(\"key\")) {\n                    sanitized[key] = \"[REDACTED]\";\n                } else {\n                    sanitized[key] = this.sanitize(value);\n                }\n            }\n            return sanitized;\n        }\n        return data;\n    }\n    /**\n   * Format log message\n   */ formatMessage(level, message, data, metadata) {\n        const timestamp = new Date().toISOString();\n        const sanitizedData = data ? this.sanitize(data) : null;\n        const logEntry = {\n            timestamp,\n            level,\n            message,\n            ...sanitizedData && {\n                data: sanitizedData\n            },\n            ...metadata && {\n                metadata\n            }\n        };\n        return (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? JSON.stringify(logEntry) : logEntry;\n    }\n    /**\n   * Log error messages (always synchronous for errors)\n   */ error(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.ERROR) {\n            const formatted = this.formatMessage(\"ERROR\", message, data, metadata);\n            console.error((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"❌\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log warning messages (asynchronous in production)\n   */ warn(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.WARN) {\n            const logEntry = {\n                level: \"WARN\",\n                message,\n                data: this.sanitize(data),\n                metadata,\n                timestamp: new Date().toISOString()\n            };\n            if ((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)()) {\n                this.queueLog(logEntry);\n            } else {\n                console.warn(\"⚠️\", message, this.sanitize(data));\n            }\n        }\n    }\n    /**\n   * Log info messages (asynchronous in production)\n   */ info(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.INFO) {\n            const logEntry = {\n                level: \"INFO\",\n                message,\n                data: this.sanitize(data),\n                metadata,\n                timestamp: new Date().toISOString()\n            };\n            if ((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)()) {\n                this.queueLog(logEntry);\n            } else {\n                console.log(\"ℹ️\", message, this.sanitize(data));\n            }\n        }\n    }\n    /**\n   * Log debug messages (only in development, always synchronous)\n   */ debug(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.DEBUG && (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isDevelopment)()) {\n            console.log(\"\\uD83D\\uDC1B\", message, this.sanitize(data));\n        }\n    }\n    /**\n   * Log trace messages (only in development)\n   */ trace(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.TRACE && (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isDevelopment)()) {\n            const formatted = this.formatMessage(\"TRACE\", message, data, metadata);\n            console.log((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"\\uD83D\\uDD0D\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log performance metrics\n   */ performance(operation, duration, metadata = null) {\n        this.info(`Performance: ${operation}`, {\n            duration: `${duration}ms`\n        }, metadata);\n    }\n    /**\n   * Log API calls\n   */ apiCall(method, endpoint, duration, status) {\n        this.info(`API: ${method} ${endpoint}`, {\n            duration: `${duration}ms`,\n            status,\n            type: \"api_call\"\n        });\n    }\n    /**\n   * Log database queries\n   */ dbQuery(table, operation, duration, recordCount = null) {\n        this.debug(`DB: ${operation} on ${table}`, {\n            duration: `${duration}ms`,\n            recordCount,\n            type: \"db_query\"\n        });\n    }\n    /**\n   * Log security events\n   */ security(event, details = null) {\n        this.warn(`Security: ${event}`, details, {\n            type: \"security_event\"\n        });\n    }\n    /**\n   * Log business events\n   */ business(event, details = null) {\n        this.info(`Business: ${event}`, details, {\n            type: \"business_event\"\n        });\n    }\n}\n// Create singleton instance\nconst logger = new ProductionLogger();\n// Convenience functions for common use cases\nconst logError = (message, data, metadata)=>logger.error(message, data, metadata);\nconst logWarn = (message, data, metadata)=>logger.warn(message, data, metadata);\nconst logInfo = (message, data, metadata)=>logger.info(message, data, metadata);\nconst logDebug = (message, data, metadata)=>logger.debug(message, data, metadata);\nconst logPerformance = (operation, duration, metadata)=>logger.performance(operation, duration, metadata);\nconst logAPICall = (method, endpoint, duration, status)=>logger.apiCall(method, endpoint, duration, status);\nconst logDBQuery = (table, operation, duration, recordCount)=>logger.dbQuery(table, operation, duration, recordCount);\nconst logSecurity = (event, details)=>logger.security(event, details);\nconst logBusiness = (event, details)=>logger.business(event, details);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logger);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/production-logger.js\n");

/***/ }),

/***/ "(api)/./lib/redis-client.js":
/*!*****************************!*\
  !*** ./lib/redis-client.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedisClient: () => (/* binding */ RedisClient),\n/* harmony export */   checkRedisHealth: () => (/* binding */ checkRedisHealth),\n/* harmony export */   getRedisClient: () => (/* binding */ getRedisClient),\n/* harmony export */   shouldUseFallbackMode: () => (/* binding */ shouldUseFallbackMode),\n/* harmony export */   shutdownRedis: () => (/* binding */ shutdownRedis)\n/* harmony export */ });\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ioredis */ \"ioredis\");\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ioredis__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/production-logger.js */ \"(api)/./lib/utils/production-logger.js\");\n/**\n * Redis Client for Triangle Intelligence Platform\n * Handles caching, rate limiting, and session management\n */ \n\nclass RedisClient {\n    constructor(){\n        this.redis = null;\n        this.isConnected = false;\n        this.connectionAttempts = 0;\n        this.maxRetries = 5;\n        this.retryDelayMs = 2000;\n    }\n    /**\n   * Initialize Redis connection with retry logic\n   */ async connect() {\n        if (this.isConnected && this.redis) {\n            return this.redis;\n        }\n        // Check if Redis should be enabled (can be disabled in development)\n        if (process.env.ENABLE_REDIS_RATE_LIMITING === \"false\") {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Redis rate limiting disabled via environment variable\");\n            throw new Error(\"Redis disabled - using memory fallback\");\n        }\n        let redisConfig;\n        // Use Redis URL if provided (for managed services like Upstash, ElastiCache)\n        if (process.env.REDIS_URL) {\n            redisConfig = {\n                connectionName: \"triangle-intelligence\",\n                retryDelayOnFailover: 100,\n                enableReadyCheck: true,\n                maxRetriesPerRequest: 3,\n                lazyConnect: true,\n                keepAlive: 30000,\n                connectTimeout: 10000,\n                commandTimeout: 5000\n            };\n            this.redis = new (ioredis__WEBPACK_IMPORTED_MODULE_0___default())(process.env.REDIS_URL, redisConfig);\n        } else {\n            // Standard host/port configuration\n            redisConfig = {\n                host: process.env.REDIS_HOST || \"localhost\",\n                port: parseInt(process.env.REDIS_PORT || \"6379\"),\n                password: process.env.REDIS_PASSWORD,\n                db: parseInt(process.env.REDIS_DB || \"0\"),\n                connectionName: \"triangle-intelligence\",\n                retryDelayOnFailover: 100,\n                enableReadyCheck: true,\n                maxRetriesPerRequest: 3,\n                lazyConnect: true,\n                keepAlive: 30000,\n                connectTimeout: 10000,\n                commandTimeout: 5000\n            };\n            this.redis = new (ioredis__WEBPACK_IMPORTED_MODULE_0___default())(redisConfig);\n        }\n        try {\n            // Event handlers\n            this.redis.on(\"connect\", ()=>{\n                (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Redis client connected successfully\", {\n                    host: redisConfig.host,\n                    port: redisConfig.port\n                });\n                this.isConnected = true;\n                this.connectionAttempts = 0;\n            });\n            this.redis.on(\"ready\", ()=>{\n                (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Redis client ready for operations\");\n            });\n            this.redis.on(\"error\", (error)=>{\n                (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"Redis connection error\", {\n                    error: error.message,\n                    connectionAttempts: this.connectionAttempts\n                });\n                this.isConnected = false;\n            });\n            this.redis.on(\"close\", ()=>{\n                (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Redis connection closed\");\n                this.isConnected = false;\n            });\n            this.redis.on(\"reconnecting\", (ms)=>{\n                (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Redis reconnecting\", {\n                    retryIn: ms\n                });\n            });\n            // Test connection\n            await this.redis.connect();\n            await this.redis.ping();\n            return this.redis;\n        } catch (error) {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"Failed to initialize Redis client\", {\n                error: error.message\n            });\n            this.connectionAttempts++;\n            if (this.connectionAttempts < this.maxRetries) {\n                (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(`Retrying Redis connection in ${this.retryDelayMs}ms`, {\n                    attempt: this.connectionAttempts,\n                    maxRetries: this.maxRetries\n                });\n                await new Promise((resolve)=>setTimeout(resolve, this.retryDelayMs));\n                return this.connect();\n            } else {\n                throw new Error(`Failed to connect to Redis after ${this.maxRetries} attempts: ${error.message}`);\n            }\n        }\n    }\n    /**\n   * Get Redis client (with automatic connection)\n   */ async getClient() {\n        if (!this.isConnected || !this.redis) {\n            await this.connect();\n        }\n        return this.redis;\n    }\n    /**\n   * Graceful shutdown\n   */ async disconnect() {\n        if (this.redis) {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Disconnecting Redis client\");\n            await this.redis.quit();\n            this.redis = null;\n            this.isConnected = false;\n        }\n    }\n    /**\n   * Health check\n   */ async healthCheck() {\n        try {\n            const client = await this.getClient();\n            const pong = await client.ping();\n            return {\n                status: \"healthy\",\n                response: pong,\n                connected: this.isConnected\n            };\n        } catch (error) {\n            return {\n                status: \"unhealthy\",\n                error: error.message,\n                connected: false\n            };\n        }\n    }\n    /**\n   * Check if fallback mode should be used\n   */ shouldUseFallback() {\n        // Use fallback if Redis is not available or connection failed too many times\n        return !this.isConnected || this.connectionAttempts >= this.maxRetries;\n    }\n}\n// Singleton instance\nconst redisClient = new RedisClient();\n/**\n * Get Redis client instance (singleton)\n */ async function getRedisClient() {\n    try {\n        return await redisClient.getClient();\n    } catch (error) {\n        (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"Failed to get Redis client\", {\n            error: error.message\n        });\n        throw error;\n    }\n}\n/**\n * Check Redis health\n */ async function checkRedisHealth() {\n    return await redisClient.healthCheck();\n}\n/**\n * Check if should use memory fallback\n */ function shouldUseFallbackMode() {\n    return redisClient.shouldUseFallback();\n}\n/**\n * Graceful shutdown helper\n */ async function shutdownRedis() {\n    await redisClient.disconnect();\n}\n// Export the class for testing\n\n// Handle process shutdown\nprocess.on(\"SIGTERM\", shutdownRedis);\nprocess.on(\"SIGINT\", shutdownRedis);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvcmVkaXMtY2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBRTBCO0FBQytDO0FBRTFFLE1BQU1JO0lBQ0pDLGFBQWM7UUFDWixJQUFJLENBQUNDLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBQ25CLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUc7UUFDMUIsSUFBSSxDQUFDQyxVQUFVLEdBQUc7UUFDbEIsSUFBSSxDQUFDQyxZQUFZLEdBQUc7SUFDdEI7SUFFQTs7R0FFQyxHQUNELE1BQU1DLFVBQVU7UUFDZCxJQUFJLElBQUksQ0FBQ0osV0FBVyxJQUFJLElBQUksQ0FBQ0QsS0FBSyxFQUFFO1lBQ2xDLE9BQU8sSUFBSSxDQUFDQSxLQUFLO1FBQ25CO1FBRUEsb0VBQW9FO1FBQ3BFLElBQUlNLFFBQVFDLEdBQUcsQ0FBQ0MsMEJBQTBCLEtBQUssU0FBUztZQUN0RGIsb0VBQU9BLENBQUM7WUFDUixNQUFNLElBQUljLE1BQU07UUFDbEI7UUFFQSxJQUFJQztRQUVKLDZFQUE2RTtRQUM3RSxJQUFJSixRQUFRQyxHQUFHLENBQUNJLFNBQVMsRUFBRTtZQUN6QkQsY0FBYztnQkFDWkUsZ0JBQWdCO2dCQUNoQkMsc0JBQXNCO2dCQUN0QkMsa0JBQWtCO2dCQUNsQkMsc0JBQXNCO2dCQUN0QkMsYUFBYTtnQkFDYkMsV0FBVztnQkFDWEMsZ0JBQWdCO2dCQUNoQkMsZ0JBQWdCO1lBQ2xCO1lBQ0EsSUFBSSxDQUFDbkIsS0FBSyxHQUFHLElBQUlOLGdEQUFLQSxDQUFDWSxRQUFRQyxHQUFHLENBQUNJLFNBQVMsRUFBRUQ7UUFDaEQsT0FBTztZQUNMLG1DQUFtQztZQUNuQ0EsY0FBYztnQkFDWlUsTUFBTWQsUUFBUUMsR0FBRyxDQUFDYyxVQUFVLElBQUk7Z0JBQ2hDQyxNQUFNQyxTQUFTakIsUUFBUUMsR0FBRyxDQUFDaUIsVUFBVSxJQUFJO2dCQUN6Q0MsVUFBVW5CLFFBQVFDLEdBQUcsQ0FBQ21CLGNBQWM7Z0JBQ3BDQyxJQUFJSixTQUFTakIsUUFBUUMsR0FBRyxDQUFDcUIsUUFBUSxJQUFJO2dCQUNyQ2hCLGdCQUFnQjtnQkFDaEJDLHNCQUFzQjtnQkFDdEJDLGtCQUFrQjtnQkFDbEJDLHNCQUFzQjtnQkFDdEJDLGFBQWE7Z0JBQ2JDLFdBQVc7Z0JBQ1hDLGdCQUFnQjtnQkFDaEJDLGdCQUFnQjtZQUNsQjtZQUNBLElBQUksQ0FBQ25CLEtBQUssR0FBRyxJQUFJTixnREFBS0EsQ0FBQ2dCO1FBQ3pCO1FBRUEsSUFBSTtZQUNGLGlCQUFpQjtZQUNqQixJQUFJLENBQUNWLEtBQUssQ0FBQzZCLEVBQUUsQ0FBQyxXQUFXO2dCQUN2QmxDLG9FQUFPQSxDQUFDLHVDQUF1QztvQkFDN0N5QixNQUFNVixZQUFZVSxJQUFJO29CQUN0QkUsTUFBTVosWUFBWVksSUFBSTtnQkFDeEI7Z0JBQ0EsSUFBSSxDQUFDckIsV0FBVyxHQUFHO2dCQUNuQixJQUFJLENBQUNDLGtCQUFrQixHQUFHO1lBQzVCO1lBRUEsSUFBSSxDQUFDRixLQUFLLENBQUM2QixFQUFFLENBQUMsU0FBUztnQkFDckJsQyxvRUFBT0EsQ0FBQztZQUNWO1lBRUEsSUFBSSxDQUFDSyxLQUFLLENBQUM2QixFQUFFLENBQUMsU0FBUyxDQUFDQztnQkFDdEJsQyxxRUFBUUEsQ0FBQywwQkFBMEI7b0JBQ2pDa0MsT0FBT0EsTUFBTUMsT0FBTztvQkFDcEI3QixvQkFBb0IsSUFBSSxDQUFDQSxrQkFBa0I7Z0JBQzdDO2dCQUNBLElBQUksQ0FBQ0QsV0FBVyxHQUFHO1lBQ3JCO1lBRUEsSUFBSSxDQUFDRCxLQUFLLENBQUM2QixFQUFFLENBQUMsU0FBUztnQkFDckJsQyxvRUFBT0EsQ0FBQztnQkFDUixJQUFJLENBQUNNLFdBQVcsR0FBRztZQUNyQjtZQUVBLElBQUksQ0FBQ0QsS0FBSyxDQUFDNkIsRUFBRSxDQUFDLGdCQUFnQixDQUFDRztnQkFDN0JyQyxvRUFBT0EsQ0FBQyxzQkFBc0I7b0JBQUVzQyxTQUFTRDtnQkFBRztZQUM5QztZQUVBLGtCQUFrQjtZQUNsQixNQUFNLElBQUksQ0FBQ2hDLEtBQUssQ0FBQ0ssT0FBTztZQUN4QixNQUFNLElBQUksQ0FBQ0wsS0FBSyxDQUFDa0MsSUFBSTtZQUVyQixPQUFPLElBQUksQ0FBQ2xDLEtBQUs7UUFFbkIsRUFBRSxPQUFPOEIsT0FBTztZQUNkbEMscUVBQVFBLENBQUMscUNBQXFDO2dCQUFFa0MsT0FBT0EsTUFBTUMsT0FBTztZQUFDO1lBQ3JFLElBQUksQ0FBQzdCLGtCQUFrQjtZQUV2QixJQUFJLElBQUksQ0FBQ0Esa0JBQWtCLEdBQUcsSUFBSSxDQUFDQyxVQUFVLEVBQUU7Z0JBQzdDUixvRUFBT0EsQ0FBQyxDQUFDLDZCQUE2QixFQUFFLElBQUksQ0FBQ1MsWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFO29CQUM3RCtCLFNBQVMsSUFBSSxDQUFDakMsa0JBQWtCO29CQUNoQ0MsWUFBWSxJQUFJLENBQUNBLFVBQVU7Z0JBQzdCO2dCQUVBLE1BQU0sSUFBSWlDLFFBQVFDLENBQUFBLFVBQVdDLFdBQVdELFNBQVMsSUFBSSxDQUFDakMsWUFBWTtnQkFDbEUsT0FBTyxJQUFJLENBQUNDLE9BQU87WUFDckIsT0FBTztnQkFDTCxNQUFNLElBQUlJLE1BQU0sQ0FBQyxpQ0FBaUMsRUFBRSxJQUFJLENBQUNOLFVBQVUsQ0FBQyxXQUFXLEVBQUUyQixNQUFNQyxPQUFPLENBQUMsQ0FBQztZQUNsRztRQUNGO0lBQ0Y7SUFFQTs7R0FFQyxHQUNELE1BQU1RLFlBQVk7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQ3RDLFdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQ0QsS0FBSyxFQUFFO1lBQ3BDLE1BQU0sSUFBSSxDQUFDSyxPQUFPO1FBQ3BCO1FBQ0EsT0FBTyxJQUFJLENBQUNMLEtBQUs7SUFDbkI7SUFFQTs7R0FFQyxHQUNELE1BQU13QyxhQUFhO1FBQ2pCLElBQUksSUFBSSxDQUFDeEMsS0FBSyxFQUFFO1lBQ2RMLG9FQUFPQSxDQUFDO1lBQ1IsTUFBTSxJQUFJLENBQUNLLEtBQUssQ0FBQ3lDLElBQUk7WUFDckIsSUFBSSxDQUFDekMsS0FBSyxHQUFHO1lBQ2IsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFDckI7SUFDRjtJQUVBOztHQUVDLEdBQ0QsTUFBTXlDLGNBQWM7UUFDbEIsSUFBSTtZQUNGLE1BQU1DLFNBQVMsTUFBTSxJQUFJLENBQUNKLFNBQVM7WUFDbkMsTUFBTUssT0FBTyxNQUFNRCxPQUFPVCxJQUFJO1lBQzlCLE9BQU87Z0JBQ0xXLFFBQVE7Z0JBQ1JDLFVBQVVGO2dCQUNWRyxXQUFXLElBQUksQ0FBQzlDLFdBQVc7WUFDN0I7UUFDRixFQUFFLE9BQU82QixPQUFPO1lBQ2QsT0FBTztnQkFDTGUsUUFBUTtnQkFDUmYsT0FBT0EsTUFBTUMsT0FBTztnQkFDcEJnQixXQUFXO1lBQ2I7UUFDRjtJQUNGO0lBRUE7O0dBRUMsR0FDREMsb0JBQW9CO1FBQ2xCLDZFQUE2RTtRQUM3RSxPQUFPLENBQUMsSUFBSSxDQUFDL0MsV0FBVyxJQUFJLElBQUksQ0FBQ0Msa0JBQWtCLElBQUksSUFBSSxDQUFDQyxVQUFVO0lBQ3hFO0FBQ0Y7QUFFQSxxQkFBcUI7QUFDckIsTUFBTThDLGNBQWMsSUFBSW5EO0FBRXhCOztDQUVDLEdBQ00sZUFBZW9EO0lBQ3BCLElBQUk7UUFDRixPQUFPLE1BQU1ELFlBQVlWLFNBQVM7SUFDcEMsRUFBRSxPQUFPVCxPQUFPO1FBQ2RsQyxxRUFBUUEsQ0FBQyw4QkFBOEI7WUFBRWtDLE9BQU9BLE1BQU1DLE9BQU87UUFBQztRQUM5RCxNQUFNRDtJQUNSO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNNLGVBQWVxQjtJQUNwQixPQUFPLE1BQU1GLFlBQVlQLFdBQVc7QUFDdEM7QUFFQTs7Q0FFQyxHQUNNLFNBQVNVO0lBQ2QsT0FBT0gsWUFBWUQsaUJBQWlCO0FBQ3RDO0FBRUE7O0NBRUMsR0FDTSxlQUFlSztJQUNwQixNQUFNSixZQUFZVCxVQUFVO0FBQzlCO0FBRUEsK0JBQStCO0FBQ1Q7QUFFdEIsMEJBQTBCO0FBQzFCbEMsUUFBUXVCLEVBQUUsQ0FBQyxXQUFXd0I7QUFDdEIvQyxRQUFRdUIsRUFBRSxDQUFDLFVBQVV3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RyaWFuZ2xlLWludGVsbGlnZW5jZS1wbGF0Zm9ybS8uL2xpYi9yZWRpcy1jbGllbnQuanM/ZjQwZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlZGlzIENsaWVudCBmb3IgVHJpYW5nbGUgSW50ZWxsaWdlbmNlIFBsYXRmb3JtXG4gKiBIYW5kbGVzIGNhY2hpbmcsIHJhdGUgbGltaXRpbmcsIGFuZCBzZXNzaW9uIG1hbmFnZW1lbnRcbiAqL1xuXG5pbXBvcnQgUmVkaXMgZnJvbSAnaW9yZWRpcydcbmltcG9ydCB7IGxvZ0luZm8sIGxvZ0Vycm9yLCBsb2dEZWJ1ZyB9IGZyb20gJy4vdXRpbHMvcHJvZHVjdGlvbi1sb2dnZXIuanMnXG5cbmNsYXNzIFJlZGlzQ2xpZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5yZWRpcyA9IG51bGxcbiAgICB0aGlzLmlzQ29ubmVjdGVkID0gZmFsc2VcbiAgICB0aGlzLmNvbm5lY3Rpb25BdHRlbXB0cyA9IDBcbiAgICB0aGlzLm1heFJldHJpZXMgPSA1XG4gICAgdGhpcy5yZXRyeURlbGF5TXMgPSAyMDAwXG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBSZWRpcyBjb25uZWN0aW9uIHdpdGggcmV0cnkgbG9naWNcbiAgICovXG4gIGFzeW5jIGNvbm5lY3QoKSB7XG4gICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQgJiYgdGhpcy5yZWRpcykge1xuICAgICAgcmV0dXJuIHRoaXMucmVkaXNcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBSZWRpcyBzaG91bGQgYmUgZW5hYmxlZCAoY2FuIGJlIGRpc2FibGVkIGluIGRldmVsb3BtZW50KVxuICAgIGlmIChwcm9jZXNzLmVudi5FTkFCTEVfUkVESVNfUkFURV9MSU1JVElORyA9PT0gJ2ZhbHNlJykge1xuICAgICAgbG9nSW5mbygnUmVkaXMgcmF0ZSBsaW1pdGluZyBkaXNhYmxlZCB2aWEgZW52aXJvbm1lbnQgdmFyaWFibGUnKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWRpcyBkaXNhYmxlZCAtIHVzaW5nIG1lbW9yeSBmYWxsYmFjaycpXG4gICAgfVxuXG4gICAgbGV0IHJlZGlzQ29uZmlnXG5cbiAgICAvLyBVc2UgUmVkaXMgVVJMIGlmIHByb3ZpZGVkIChmb3IgbWFuYWdlZCBzZXJ2aWNlcyBsaWtlIFVwc3Rhc2gsIEVsYXN0aUNhY2hlKVxuICAgIGlmIChwcm9jZXNzLmVudi5SRURJU19VUkwpIHtcbiAgICAgIHJlZGlzQ29uZmlnID0ge1xuICAgICAgICBjb25uZWN0aW9uTmFtZTogJ3RyaWFuZ2xlLWludGVsbGlnZW5jZScsXG4gICAgICAgIHJldHJ5RGVsYXlPbkZhaWxvdmVyOiAxMDAsXG4gICAgICAgIGVuYWJsZVJlYWR5Q2hlY2s6IHRydWUsXG4gICAgICAgIG1heFJldHJpZXNQZXJSZXF1ZXN0OiAzLFxuICAgICAgICBsYXp5Q29ubmVjdDogdHJ1ZSxcbiAgICAgICAga2VlcEFsaXZlOiAzMDAwMCxcbiAgICAgICAgY29ubmVjdFRpbWVvdXQ6IDEwMDAwLFxuICAgICAgICBjb21tYW5kVGltZW91dDogNTAwMFxuICAgICAgfVxuICAgICAgdGhpcy5yZWRpcyA9IG5ldyBSZWRpcyhwcm9jZXNzLmVudi5SRURJU19VUkwsIHJlZGlzQ29uZmlnKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdGFuZGFyZCBob3N0L3BvcnQgY29uZmlndXJhdGlvblxuICAgICAgcmVkaXNDb25maWcgPSB7XG4gICAgICAgIGhvc3Q6IHByb2Nlc3MuZW52LlJFRElTX0hPU1QgfHwgJ2xvY2FsaG9zdCcsXG4gICAgICAgIHBvcnQ6IHBhcnNlSW50KHByb2Nlc3MuZW52LlJFRElTX1BPUlQgfHwgJzYzNzknKSxcbiAgICAgICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LlJFRElTX1BBU1NXT1JELFxuICAgICAgICBkYjogcGFyc2VJbnQocHJvY2Vzcy5lbnYuUkVESVNfREIgfHwgJzAnKSxcbiAgICAgICAgY29ubmVjdGlvbk5hbWU6ICd0cmlhbmdsZS1pbnRlbGxpZ2VuY2UnLFxuICAgICAgICByZXRyeURlbGF5T25GYWlsb3ZlcjogMTAwLFxuICAgICAgICBlbmFibGVSZWFkeUNoZWNrOiB0cnVlLFxuICAgICAgICBtYXhSZXRyaWVzUGVyUmVxdWVzdDogMyxcbiAgICAgICAgbGF6eUNvbm5lY3Q6IHRydWUsXG4gICAgICAgIGtlZXBBbGl2ZTogMzAwMDAsXG4gICAgICAgIGNvbm5lY3RUaW1lb3V0OiAxMDAwMCxcbiAgICAgICAgY29tbWFuZFRpbWVvdXQ6IDUwMDBcbiAgICAgIH1cbiAgICAgIHRoaXMucmVkaXMgPSBuZXcgUmVkaXMocmVkaXNDb25maWcpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIEV2ZW50IGhhbmRsZXJzXG4gICAgICB0aGlzLnJlZGlzLm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICBsb2dJbmZvKCdSZWRpcyBjbGllbnQgY29ubmVjdGVkIHN1Y2Nlc3NmdWxseScsIHsgXG4gICAgICAgICAgaG9zdDogcmVkaXNDb25maWcuaG9zdCwgXG4gICAgICAgICAgcG9ydDogcmVkaXNDb25maWcucG9ydCBcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5pc0Nvbm5lY3RlZCA9IHRydWVcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uQXR0ZW1wdHMgPSAwXG4gICAgICB9KVxuXG4gICAgICB0aGlzLnJlZGlzLm9uKCdyZWFkeScsICgpID0+IHtcbiAgICAgICAgbG9nSW5mbygnUmVkaXMgY2xpZW50IHJlYWR5IGZvciBvcGVyYXRpb25zJylcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMucmVkaXMub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICAgIGxvZ0Vycm9yKCdSZWRpcyBjb25uZWN0aW9uIGVycm9yJywgeyBcbiAgICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICBjb25uZWN0aW9uQXR0ZW1wdHM6IHRoaXMuY29ubmVjdGlvbkF0dGVtcHRzIFxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmlzQ29ubmVjdGVkID0gZmFsc2VcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMucmVkaXMub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICBsb2dJbmZvKCdSZWRpcyBjb25uZWN0aW9uIGNsb3NlZCcpXG4gICAgICAgIHRoaXMuaXNDb25uZWN0ZWQgPSBmYWxzZVxuICAgICAgfSlcblxuICAgICAgdGhpcy5yZWRpcy5vbigncmVjb25uZWN0aW5nJywgKG1zKSA9PiB7XG4gICAgICAgIGxvZ0luZm8oJ1JlZGlzIHJlY29ubmVjdGluZycsIHsgcmV0cnlJbjogbXMgfSlcbiAgICAgIH0pXG5cbiAgICAgIC8vIFRlc3QgY29ubmVjdGlvblxuICAgICAgYXdhaXQgdGhpcy5yZWRpcy5jb25uZWN0KClcbiAgICAgIGF3YWl0IHRoaXMucmVkaXMucGluZygpXG5cbiAgICAgIHJldHVybiB0aGlzLnJlZGlzXG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nRXJyb3IoJ0ZhaWxlZCB0byBpbml0aWFsaXplIFJlZGlzIGNsaWVudCcsIHsgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSlcbiAgICAgIHRoaXMuY29ubmVjdGlvbkF0dGVtcHRzKytcbiAgICAgIFxuICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbkF0dGVtcHRzIDwgdGhpcy5tYXhSZXRyaWVzKSB7XG4gICAgICAgIGxvZ0luZm8oYFJldHJ5aW5nIFJlZGlzIGNvbm5lY3Rpb24gaW4gJHt0aGlzLnJldHJ5RGVsYXlNc31tc2AsIHtcbiAgICAgICAgICBhdHRlbXB0OiB0aGlzLmNvbm5lY3Rpb25BdHRlbXB0cyxcbiAgICAgICAgICBtYXhSZXRyaWVzOiB0aGlzLm1heFJldHJpZXNcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCB0aGlzLnJldHJ5RGVsYXlNcykpXG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3QoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gY29ubmVjdCB0byBSZWRpcyBhZnRlciAke3RoaXMubWF4UmV0cmllc30gYXR0ZW1wdHM6ICR7ZXJyb3IubWVzc2FnZX1gKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgUmVkaXMgY2xpZW50ICh3aXRoIGF1dG9tYXRpYyBjb25uZWN0aW9uKVxuICAgKi9cbiAgYXN5bmMgZ2V0Q2xpZW50KCkge1xuICAgIGlmICghdGhpcy5pc0Nvbm5lY3RlZCB8fCAhdGhpcy5yZWRpcykge1xuICAgICAgYXdhaXQgdGhpcy5jb25uZWN0KClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucmVkaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBHcmFjZWZ1bCBzaHV0ZG93blxuICAgKi9cbiAgYXN5bmMgZGlzY29ubmVjdCgpIHtcbiAgICBpZiAodGhpcy5yZWRpcykge1xuICAgICAgbG9nSW5mbygnRGlzY29ubmVjdGluZyBSZWRpcyBjbGllbnQnKVxuICAgICAgYXdhaXQgdGhpcy5yZWRpcy5xdWl0KClcbiAgICAgIHRoaXMucmVkaXMgPSBudWxsXG4gICAgICB0aGlzLmlzQ29ubmVjdGVkID0gZmFsc2VcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGVhbHRoIGNoZWNrXG4gICAqL1xuICBhc3luYyBoZWFsdGhDaGVjaygpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgdGhpcy5nZXRDbGllbnQoKVxuICAgICAgY29uc3QgcG9uZyA9IGF3YWl0IGNsaWVudC5waW5nKClcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogJ2hlYWx0aHknLFxuICAgICAgICByZXNwb25zZTogcG9uZyxcbiAgICAgICAgY29ubmVjdGVkOiB0aGlzLmlzQ29ubmVjdGVkXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogJ3VuaGVhbHRoeScsXG4gICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBjb25uZWN0ZWQ6IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGZhbGxiYWNrIG1vZGUgc2hvdWxkIGJlIHVzZWRcbiAgICovXG4gIHNob3VsZFVzZUZhbGxiYWNrKCkge1xuICAgIC8vIFVzZSBmYWxsYmFjayBpZiBSZWRpcyBpcyBub3QgYXZhaWxhYmxlIG9yIGNvbm5lY3Rpb24gZmFpbGVkIHRvbyBtYW55IHRpbWVzXG4gICAgcmV0dXJuICF0aGlzLmlzQ29ubmVjdGVkIHx8IHRoaXMuY29ubmVjdGlvbkF0dGVtcHRzID49IHRoaXMubWF4UmV0cmllc1xuICB9XG59XG5cbi8vIFNpbmdsZXRvbiBpbnN0YW5jZVxuY29uc3QgcmVkaXNDbGllbnQgPSBuZXcgUmVkaXNDbGllbnQoKVxuXG4vKipcbiAqIEdldCBSZWRpcyBjbGllbnQgaW5zdGFuY2UgKHNpbmdsZXRvbilcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJlZGlzQ2xpZW50KCkge1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCByZWRpc0NsaWVudC5nZXRDbGllbnQoKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZ0Vycm9yKCdGYWlsZWQgdG8gZ2V0IFJlZGlzIGNsaWVudCcsIHsgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSlcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgUmVkaXMgaGVhbHRoXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja1JlZGlzSGVhbHRoKCkge1xuICByZXR1cm4gYXdhaXQgcmVkaXNDbGllbnQuaGVhbHRoQ2hlY2soKVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHNob3VsZCB1c2UgbWVtb3J5IGZhbGxiYWNrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRVc2VGYWxsYmFja01vZGUoKSB7XG4gIHJldHVybiByZWRpc0NsaWVudC5zaG91bGRVc2VGYWxsYmFjaygpXG59XG5cbi8qKlxuICogR3JhY2VmdWwgc2h1dGRvd24gaGVscGVyXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaHV0ZG93blJlZGlzKCkge1xuICBhd2FpdCByZWRpc0NsaWVudC5kaXNjb25uZWN0KClcbn1cblxuLy8gRXhwb3J0IHRoZSBjbGFzcyBmb3IgdGVzdGluZ1xuZXhwb3J0IHsgUmVkaXNDbGllbnQgfVxuXG4vLyBIYW5kbGUgcHJvY2VzcyBzaHV0ZG93blxucHJvY2Vzcy5vbignU0lHVEVSTScsIHNodXRkb3duUmVkaXMpXG5wcm9jZXNzLm9uKCdTSUdJTlQnLCBzaHV0ZG93blJlZGlzKSJdLCJuYW1lcyI6WyJSZWRpcyIsImxvZ0luZm8iLCJsb2dFcnJvciIsImxvZ0RlYnVnIiwiUmVkaXNDbGllbnQiLCJjb25zdHJ1Y3RvciIsInJlZGlzIiwiaXNDb25uZWN0ZWQiLCJjb25uZWN0aW9uQXR0ZW1wdHMiLCJtYXhSZXRyaWVzIiwicmV0cnlEZWxheU1zIiwiY29ubmVjdCIsInByb2Nlc3MiLCJlbnYiLCJFTkFCTEVfUkVESVNfUkFURV9MSU1JVElORyIsIkVycm9yIiwicmVkaXNDb25maWciLCJSRURJU19VUkwiLCJjb25uZWN0aW9uTmFtZSIsInJldHJ5RGVsYXlPbkZhaWxvdmVyIiwiZW5hYmxlUmVhZHlDaGVjayIsIm1heFJldHJpZXNQZXJSZXF1ZXN0IiwibGF6eUNvbm5lY3QiLCJrZWVwQWxpdmUiLCJjb25uZWN0VGltZW91dCIsImNvbW1hbmRUaW1lb3V0IiwiaG9zdCIsIlJFRElTX0hPU1QiLCJwb3J0IiwicGFyc2VJbnQiLCJSRURJU19QT1JUIiwicGFzc3dvcmQiLCJSRURJU19QQVNTV09SRCIsImRiIiwiUkVESVNfREIiLCJvbiIsImVycm9yIiwibWVzc2FnZSIsIm1zIiwicmV0cnlJbiIsInBpbmciLCJhdHRlbXB0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiZ2V0Q2xpZW50IiwiZGlzY29ubmVjdCIsInF1aXQiLCJoZWFsdGhDaGVjayIsImNsaWVudCIsInBvbmciLCJzdGF0dXMiLCJyZXNwb25zZSIsImNvbm5lY3RlZCIsInNob3VsZFVzZUZhbGxiYWNrIiwicmVkaXNDbGllbnQiLCJnZXRSZWRpc0NsaWVudCIsImNoZWNrUmVkaXNIZWFsdGgiLCJzaG91bGRVc2VGYWxsYmFja01vZGUiLCJzaHV0ZG93blJlZGlzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/redis-client.js\n");

/***/ }),

/***/ "(api)/./lib/security.js":
/*!*************************!*\
  !*** ./lib/security.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SecurityValidator: () => (/* binding */ SecurityValidator),\n/* harmony export */   applySecurityHeaders: () => (/* binding */ applySecurityHeaders),\n/* harmony export */   corsConfig: () => (/* binding */ corsConfig),\n/* harmony export */   createLegacySecurityMiddleware: () => (/* binding */ createLegacySecurityMiddleware),\n/* harmony export */   createSecurityMiddleware: () => (/* binding */ createSecurityMiddleware),\n/* harmony export */   securityHeaders: () => (/* binding */ securityHeaders)\n/* harmony export */ });\n/* harmony import */ var _utils_production_logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/production-logger.js */ \"(api)/./lib/utils/production-logger.js\");\n/* harmony import */ var _monitoring_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./monitoring.js */ \"(api)/./lib/monitoring.js\");\n/* harmony import */ var _middleware_redis_rate_limiter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./middleware/redis-rate-limiter.js */ \"(api)/./lib/middleware/redis-rate-limiter.js\");\n/**\n * Security Utilities and Input Validation\n * Production-ready security implementation\n */ \n\n\n/**\n * Input validation and sanitization utilities\n */ class SecurityValidator {\n    /**\n   * Sanitize string input to prevent XSS\n   */ static sanitizeString(input, maxLength = 1000) {\n        if (typeof input !== \"string\") {\n            return \"\";\n        }\n        // Remove potential XSS vectors\n        return input.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, \"\") // Remove script tags\n        .replace(/javascript:/gi, \"\") // Remove javascript: URLs\n        .replace(/on\\w+\\s*=/gi, \"\") // Remove event handlers\n        .trim().substring(0, maxLength);\n    }\n    /**\n   * Validate email format\n   */ static validateEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return typeof email === \"string\" && emailRegex.test(email) && email.length <= 254;\n    }\n    /**\n   * Validate business type\n   */ static validateBusinessType(businessType) {\n        const validTypes = [\n            \"manufacturing\",\n            \"electronics\",\n            \"textiles\",\n            \"automotive\",\n            \"medical\",\n            \"consumer_goods\",\n            \"industrial\",\n            \"other\"\n        ];\n        return validTypes.includes(businessType);\n    }\n    /**\n   * Validate import volume\n   */ static validateImportVolume(volume) {\n        const validVolumes = [\n            \"Under $500K\",\n            \"$500K - $1M\",\n            \"$1M - $5M\",\n            \"$5M - $25M\",\n            \"Over $25M\"\n        ];\n        return validVolumes.includes(volume);\n    }\n    /**\n   * Validate HS code format\n   */ static validateHSCode(hsCode) {\n        if (typeof hsCode !== \"string\") return false;\n        // HS codes are typically 6-10 digits\n        const hsCodeRegex = /^\\d{6,10}$/;\n        return hsCodeRegex.test(hsCode);\n    }\n    /**\n   * Validate company name\n   */ static validateCompanyName(name) {\n        if (typeof name !== \"string\") return false;\n        return name.trim().length >= 2 && name.trim().length <= 100 && !/<[^>]*>/g.test(name) // No HTML tags\n        ;\n    }\n    /**\n   * Validate geographic data\n   */ static validateGeography(location) {\n        const validStates = [\n            \"AL\",\n            \"AK\",\n            \"AZ\",\n            \"AR\",\n            \"CA\",\n            \"CO\",\n            \"CT\",\n            \"DE\",\n            \"FL\",\n            \"GA\",\n            \"HI\",\n            \"ID\",\n            \"IL\",\n            \"IN\",\n            \"IA\",\n            \"KS\",\n            \"KY\",\n            \"LA\",\n            \"ME\",\n            \"MD\",\n            \"MA\",\n            \"MI\",\n            \"MN\",\n            \"MS\",\n            \"MO\",\n            \"MT\",\n            \"NE\",\n            \"NV\",\n            \"NH\",\n            \"NJ\",\n            \"NM\",\n            \"NY\",\n            \"NC\",\n            \"ND\",\n            \"OH\",\n            \"OK\",\n            \"OR\",\n            \"PA\",\n            \"RI\",\n            \"SC\",\n            \"SD\",\n            \"TN\",\n            \"TX\",\n            \"UT\",\n            \"VT\",\n            \"VA\",\n            \"WA\",\n            \"WV\",\n            \"WI\",\n            \"WY\"\n        ];\n        return validStates.includes(location?.state) && typeof location?.city === \"string\" && location.city.length >= 1 && location.city.length <= 50 && typeof location?.zipCode === \"string\" && /^\\d{5}(-\\d{4})?$/.test(location.zipCode);\n    }\n    /**\n   * Check for SQL injection attempts\n   */ static checkSQLInjection(input) {\n        if (typeof input !== \"string\") return false;\n        const sqlPatterns = [\n            /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|SCRIPT)\\b)/i,\n            /(--|\\/\\*|\\*\\/|;|\\|\\||&&)/,\n            /(\\bOR\\b.*=.*\\bOR\\b|\\bAND\\b.*=.*\\bAND\\b)/i,\n            /'[^']*'(\\s*(=|!=|<>|<|>|\\bLIKE\\b)\\s*'[^']*'|\\s*\\bIN\\s*\\([^)]*\\))/i\n        ];\n        return sqlPatterns.some((pattern)=>pattern.test(input));\n    }\n    /**\n   * Validate API request structure\n   */ static validateAPIRequest(req, expectedFields = []) {\n        const errors = [];\n        // Check required fields\n        for (const field of expectedFields){\n            if (!(field in req.body)) {\n                errors.push(`Missing required field: ${field}`);\n            }\n        }\n        // Check for suspicious patterns in all string fields\n        for (const [key, value] of Object.entries(req.body)){\n            if (typeof value === \"string\") {\n                if (this.checkSQLInjection(value)) {\n                    (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logSecurity)(\"sql_injection_attempt\", {\n                        field: key,\n                        value: value.substring(0, 100),\n                        ip: this.getClientIP(req),\n                        userAgent: req.headers[\"user-agent\"]\n                    });\n                    (0,_monitoring_js__WEBPACK_IMPORTED_MODULE_1__.createAlert)(\"security_violation\", \"SQL injection attempt detected\", {\n                        field: key\n                    });\n                    errors.push(`Invalid input in field: ${key}`);\n                }\n            }\n        }\n        return {\n            valid: errors.length === 0,\n            errors\n        };\n    }\n    /**\n   * Get client IP address\n   */ static getClientIP(req) {\n        return req.headers[\"x-forwarded-for\"] || req.headers[\"x-real-ip\"] || req.connection?.remoteAddress || req.socket?.remoteAddress || \"unknown\";\n    }\n    /**\n   * Rate limiting check using Redis-based system\n   * @deprecated - Use rateLimitMiddleware directly instead\n   */ static async checkRateLimit(identifier, maxRequests = 100, timeWindow = 3600000) {\n        try {\n            // Get current rate limit status using Redis system\n            const config = {\n                windowMs: timeWindow,\n                maxRequests: maxRequests,\n                description: \"Legacy API rate limit\"\n            };\n            const status = await (0,_middleware_redis_rate_limiter_js__WEBPACK_IMPORTED_MODULE_2__.getRateLimitStatus)(identifier, config);\n            if (status.status === \"operational\" && status.currentCount >= maxRequests) {\n                (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logSecurity)(\"rate_limit_exceeded\", {\n                    identifier,\n                    requests: status.currentCount,\n                    timeWindow: timeWindow / 1000,\n                    mode: status.mode\n                });\n                return false;\n            }\n            return true;\n        } catch (error) {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logError)(\"Rate limit check error, allowing request\", {\n                error: error.message\n            });\n            return true // Allow request on error\n            ;\n        }\n    }\n}\n/**\n * API Security Middleware with Redis-based rate limiting\n */ function createSecurityMiddleware(options = {}) {\n    const { maxRequests = 100, timeWindow = 3600000, requiredFields = [], validateInput = true, useRedisRateLimit = true } = options;\n    return async (req, res, next)=>{\n        const startTime = Date.now();\n        try {\n            const clientIP = SecurityValidator.getClientIP(req);\n            // Apply Redis-based rate limiting first if enabled\n            if (useRedisRateLimit) {\n                await new Promise((resolve, reject)=>{\n                    (0,_middleware_redis_rate_limiter_js__WEBPACK_IMPORTED_MODULE_2__.rateLimitMiddleware)(req, res, (error)=>{\n                        if (error) {\n                            reject(error);\n                        } else {\n                            // Check if response was already sent (rate limit exceeded)\n                            if (res.headersSent) {\n                                return; // Rate limit response already sent\n                            }\n                            resolve();\n                        }\n                    });\n                });\n                // If rate limit middleware sent a response, stop here\n                if (res.headersSent) {\n                    return;\n                }\n            }\n            // Input validation\n            if (validateInput && req.method !== \"GET\") {\n                const validation = SecurityValidator.validateAPIRequest(req, requiredFields);\n                if (!validation.valid) {\n                    (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logSecurity)(\"invalid_input\", {\n                        errors: validation.errors,\n                        ip: clientIP,\n                        endpoint: req.url\n                    });\n                    return res.status(400).json({\n                        error: \"Invalid input\",\n                        message: \"Request validation failed\",\n                        details: validation.errors\n                    });\n                }\n            }\n            // Log successful security check\n            const duration = Date.now() - startTime;\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logSecurity)(\"request_validated\", {\n                method: req.method,\n                endpoint: req.url,\n                ip: clientIP,\n                duration: `${duration}ms`\n            });\n            // Continue to next middleware\n            if (next) {\n                next();\n            }\n        } catch (error) {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logError)(\"Security middleware error\", {\n                error: error.message,\n                stack: error.stack,\n                ip: SecurityValidator.getClientIP(req),\n                endpoint: req.url\n            });\n            return res.status(500).json({\n                error: \"Internal security error\",\n                message: \"Request could not be validated\"\n            });\n        }\n    };\n}\n/**\n * Legacy security middleware (for backwards compatibility)\n */ function createLegacySecurityMiddleware(options = {}) {\n    return createSecurityMiddleware({\n        ...options,\n        useRedisRateLimit: false\n    });\n}\n/**\n * CORS configuration\n */ const corsConfig = {\n    origin:  false ? 0 : [\n        \"http://localhost:3000\",\n        \"http://127.0.0.1:3000\"\n    ],\n    methods: [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\",\n        \"OPTIONS\"\n    ],\n    allowedHeaders: [\n        \"Content-Type\",\n        \"Authorization\",\n        \"X-Requested-With\"\n    ],\n    credentials: true,\n    maxAge: 86400 // 24 hours\n};\n/**\n * Security headers configuration\n */ const securityHeaders = {\n    \"X-Content-Type-Options\": \"nosniff\",\n    \"X-Frame-Options\": \"DENY\",\n    \"X-XSS-Protection\": \"1; mode=block\",\n    \"Referrer-Policy\": \"strict-origin-when-cross-origin\",\n    \"Strict-Transport-Security\": \"max-age=63072000; includeSubDomains; preload\",\n    \"Content-Security-Policy\": [\n        \"default-src 'self'\",\n        \"script-src 'self' 'unsafe-inline' 'unsafe-eval'\",\n        \"style-src 'self' 'unsafe-inline'\",\n        \"img-src 'self' data: https:\",\n        \"font-src 'self'\",\n        \"connect-src 'self' https://api.stripe.com https://*.supabase.co\",\n        \"frame-ancestors 'none'\",\n        \"base-uri 'self'\"\n    ].join(\"; \")\n};\n/**\n * Apply security headers to response\n */ function applySecurityHeaders(res) {\n    Object.entries(securityHeaders).forEach(([header, value])=>{\n        res.setHeader(header, value);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/security.js\n");

/***/ }),

/***/ "(api)/./lib/supabase-client.js":
/*!********************************!*\
  !*** ./lib/supabase-client.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   executeOptimizedQuery: () => (/* binding */ executeOptimizedQuery),\n/* harmony export */   getConnectionStats: () => (/* binding */ getConnectionStats),\n/* harmony export */   getServerSupabaseClient: () => (/* binding */ getServerSupabaseClient),\n/* harmony export */   getSupabaseClient: () => (/* binding */ getSupabaseClient),\n/* harmony export */   shutdownConnections: () => (/* binding */ shutdownConnections),\n/* harmony export */   testSupabaseConnection: () => (/* binding */ testSupabaseConnection)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _production_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./production-logger.js */ \"(api)/./lib/production-logger.js\");\n/* harmony import */ var _memory_optimizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./memory-optimizer.js */ \"(api)/./lib/memory-optimizer.js\");\n/**\n * SHARED SUPABASE CLIENT WITH SERVER/CLIENT SEPARATION\n * Ensures service keys are NEVER exposed client-side\n * Single instance pattern to avoid conflicts\n */ \n\n\nlet supabaseInstance = null;\nlet supabaseServerInstance = null;\nlet connectionPool = {\n    activeConnections: 0,\n    maxConnections: 50,\n    connectionQueue: [],\n    lastCleanup: Date.now(),\n    peakConnections: 0,\n    totalQueries: 0\n};\n/**\n * Get Supabase client appropriate for the environment\n * Client-side: Uses anonymous key (safe for browser)\n * Server-side: Uses service role key (never exposed to browser)\n */ const getSupabaseClient = ()=>{\n    // Check if we're on the server or client\n    const isServer = \"undefined\" === \"undefined\";\n    if (isServer) {\n        // SERVER-SIDE: Use service role key for full access\n        if (!supabaseServerInstance) {\n            const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n            if (!serviceKey) {\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"SUPABASE_SERVICE_ROLE_KEY not found in server environment\");\n                throw new Error(\"Server configuration error: Missing service key\");\n            }\n            supabaseServerInstance = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://mrwitpgbcaxgnirqtavt.supabase.co\", serviceKey, {\n                auth: {\n                    autoRefreshToken: false,\n                    persistSession: false\n                },\n                db: {\n                    schema: \"public\"\n                },\n                global: {\n                    headers: {\n                        \"User-Agent\": \"Triangle-Intelligence-Platform/1.0\"\n                    }\n                }\n            });\n            // Register cleanup with memory optimizer\n            const memoryOptimizer = (0,_memory_optimizer_js__WEBPACK_IMPORTED_MODULE_2__.getMemoryOptimizer)();\n            memoryOptimizer.registerCleanup(\"supabase-server-client\", ()=>{\n                if (supabaseServerInstance) {\n                    (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Cleaning up Supabase server connections\");\n                    supabaseServerInstance = null;\n                }\n            });\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Created server-side Supabase client with service role and memory optimization\");\n        }\n        return supabaseServerInstance;\n    } else {\n        // CLIENT-SIDE: Use anonymous key only\n        if (!supabaseInstance) {\n            const anonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1yd2l0cGdiY2F4Z25pcnF0YXZ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk4MjUxMzQsImV4cCI6MjA2NTQwMTEzNH0.5g-eaUIwy4VQD2YfNC2sFNoZYF1HdUzVTNJZvtuVSI8\";\n            if (!anonKey) {\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"NEXT_PUBLIC_SUPABASE_ANON_KEY not found\");\n                throw new Error(\"Client configuration error: Missing anonymous key\");\n            }\n            supabaseInstance = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://mrwitpgbcaxgnirqtavt.supabase.co\", anonKey);\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Created client-side Supabase client with anonymous key\");\n        }\n        return supabaseInstance;\n    }\n};\n/**\n * Get server-only Supabase client with service role\n * CRITICAL: Only use in API routes, never in components\n */ const getServerSupabaseClient = ()=>{\n    if (false) {}\n    if (!supabaseServerInstance) {\n        const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n        if (!serviceKey) {\n            throw new Error(\"SUPABASE_SERVICE_ROLE_KEY not configured\");\n        }\n        supabaseServerInstance = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://mrwitpgbcaxgnirqtavt.supabase.co\", serviceKey, {\n            auth: {\n                autoRefreshToken: false,\n                persistSession: false\n            }\n        });\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Created dedicated server Supabase client\");\n    }\n    return supabaseServerInstance;\n};\n// Test database connection\nconst testSupabaseConnection = async ()=>{\n    try {\n        const client = getSupabaseClient();\n        const { data, error } = await client.from(\"translations\").select(\"*\").limit(1);\n        if (error) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"Supabase connection test failed\", {\n                error: error.message\n            });\n            return false;\n        }\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Supabase connection test successful\");\n        return true;\n    } catch (error) {\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"Supabase connection test error\", {\n            error: error.message\n        });\n        return false;\n    }\n};\n/**\n * Memory-optimized database query wrapper\n */ const executeOptimizedQuery = async (queryFn, queryName = \"unknown\")=>{\n    const startTime = Date.now();\n    connectionPool.activeConnections++;\n    connectionPool.totalQueries++;\n    // Track peak connections for monitoring\n    if (connectionPool.activeConnections > connectionPool.peakConnections) {\n        connectionPool.peakConnections = connectionPool.activeConnections;\n    }\n    try {\n        // Check if we need cleanup\n        if (Date.now() - connectionPool.lastCleanup > 300000) {\n            cleanupConnections();\n        }\n        const result = await queryFn();\n        const duration = Date.now() - startTime;\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(`Optimized query executed: ${queryName}`, {\n            duration: `${duration}ms`,\n            activeConnections: connectionPool.activeConnections,\n            peakConnections: connectionPool.peakConnections\n        });\n        return result;\n    } catch (error) {\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(`Optimized query failed: ${queryName}`, {\n            error: error.message,\n            duration: `${Date.now() - startTime}ms`\n        });\n        throw error;\n    } finally{\n        connectionPool.activeConnections--;\n    }\n};\n/**\n * Clean up connection pool\n */ const cleanupConnections = ()=>{\n    (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Cleaning up Supabase connection pool\", {\n        activeConnections: connectionPool.activeConnections,\n        queueSize: connectionPool.connectionQueue.length\n    });\n    // Reset connection tracking\n    connectionPool.activeConnections = Math.max(0, connectionPool.activeConnections);\n    connectionPool.connectionQueue = connectionPool.connectionQueue.filter((conn)=>Date.now() - conn.created < 300000 // 5 minutes\n    );\n    connectionPool.lastCleanup = Date.now();\n};\n/**\n * Get connection pool statistics\n */ const getConnectionStats = ()=>{\n    return {\n        activeConnections: connectionPool.activeConnections,\n        maxConnections: connectionPool.maxConnections,\n        peakConnections: connectionPool.peakConnections,\n        totalQueries: connectionPool.totalQueries,\n        queueSize: connectionPool.connectionQueue.length,\n        lastCleanup: new Date(connectionPool.lastCleanup).toISOString(),\n        utilizationPercent: Math.round(connectionPool.activeConnections / connectionPool.maxConnections * 100),\n        status: connectionPool.activeConnections < connectionPool.maxConnections * 0.8 ? \"healthy\" : \"high_load\"\n    };\n};\n/**\n * Graceful shutdown - cleanup all connections\n */ const shutdownConnections = ()=>{\n    (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Shutting down all Supabase connections\");\n    supabaseInstance = null;\n    supabaseServerInstance = null;\n    connectionPool.activeConnections = 0;\n    connectionPool.connectionQueue = [];\n    (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"All Supabase connections shut down successfully\");\n};\n// Register shutdown handler\nconst memoryOptimizer = (0,_memory_optimizer_js__WEBPACK_IMPORTED_MODULE_2__.getMemoryOptimizer)();\nmemoryOptimizer.registerCleanup(\"supabase-connections\", shutdownConnections);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getSupabaseClient);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/supabase-client.js\n");

/***/ }),

/***/ "(api)/./lib/utils/environment-validation.js":
/*!*********************************************!*\
  !*** ./lib/utils/environment-validation.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnvVar: () => (/* binding */ getEnvVar),\n/* harmony export */   getSecurityStatus: () => (/* binding */ getSecurityStatus),\n/* harmony export */   getSupabaseConfig: () => (/* binding */ getSupabaseConfig),\n/* harmony export */   isDevelopment: () => (/* binding */ isDevelopment),\n/* harmony export */   isProduction: () => (/* binding */ isProduction),\n/* harmony export */   safeLog: () => (/* binding */ safeLog),\n/* harmony export */   validateAPIKeysSecurity: () => (/* binding */ validateAPIKeysSecurity),\n/* harmony export */   validateEnvironment: () => (/* binding */ validateEnvironment),\n/* harmony export */   validateSecretSecurity: () => (/* binding */ validateSecretSecurity)\n/* harmony export */ });\n/**\n * Environment Variable Validation and Configuration\n * Centralized validation for production readiness\n */ // Required environment variables for production\n// Split by client/server because client can't see server-only vars\nconst CLIENT_REQUIRED_ENV_VARS = [\n    \"NEXT_PUBLIC_SUPABASE_URL\",\n    \"NEXT_PUBLIC_SUPABASE_ANON_KEY\"\n];\nconst SERVER_REQUIRED_ENV_VARS = [\n    \"NEXT_PUBLIC_SUPABASE_URL\",\n    \"NEXT_PUBLIC_SUPABASE_ANON_KEY\",\n    \"SUPABASE_SERVICE_ROLE_KEY\",\n    \"JWT_SECRET\",\n    \"NEXTAUTH_SECRET\"\n];\nconst SERVER_RECOMMENDED_ENV_VARS = [\n    \"ANTHROPIC_API_KEY\",\n    \"COMTRADE_API_KEY\",\n    \"SHIPPO_API_KEY\",\n    \"STRIPE_SECRET_KEY\"\n];\n// Optional environment variables with defaults\nconst OPTIONAL_ENV_VARS = {\n    NODE_ENV: \"development\",\n    NEXT_PUBLIC_APP_URL: \"http://localhost:3000\"\n};\n/**\n * Validate all required environment variables are present\n * @throws {Error} If any required variable is missing\n */ function validateEnvironment() {\n    // Skip validation entirely on client-side to avoid errors\n    if (false) {}\n    // Server-side validation\n    const missing = SERVER_REQUIRED_ENV_VARS.filter((key)=>!process.env[key]);\n    if (missing.length > 0) {\n        throw new Error(`Missing required server-side environment variables: ${missing.join(\", \")}`);\n    }\n    // Note: Using console.log here as this runs before logger is initialized\n    console.log(\"✅ All required environment variables are present\");\n}\n/**\n * Get environment variable with validation\n * @param {string} key - Environment variable key\n * @param {boolean} required - Whether the variable is required\n * @returns {string} Environment variable value\n */ function getEnvVar(key, required = true) {\n    const value = process.env[key];\n    if (required && !value) {\n        throw new Error(`Missing required environment variable: ${key}`);\n    }\n    return value || OPTIONAL_ENV_VARS[key];\n}\n/**\n * Check if running in production\n */ function isProduction() {\n    return \"development\" === \"production\";\n}\n/**\n * Check if running in development\n */ function isDevelopment() {\n    return \"development\" === \"development\";\n}\n/**\n * Safe logging that respects environment\n * Only logs in development unless force is true\n */ function safeLog(message, data = null, force = false) {\n    if (isDevelopment() || force) {\n        if (data) {\n            // Note: Using console.log here as this is used for bootstrap logging\n            console.log(message, data);\n        } else {\n            console.log(message);\n        }\n    }\n}\n/**\n * Get Supabase configuration based on environment\n */ function getSupabaseConfig() {\n    const url = getEnvVar(\"NEXT_PUBLIC_SUPABASE_URL\");\n    // Use service role key on server, anon key on client\n    const key =  false ? 0 : getEnvVar(\"SUPABASE_SERVICE_ROLE_KEY\", false) || getEnvVar(\"NEXT_PUBLIC_SUPABASE_ANON_KEY\");\n    return {\n        url,\n        key\n    };\n}\n/**\n * Validate API keys are not exposed and check for security issues\n */ function validateAPIKeysSecurity() {\n    const sensitiveKeys = [\n        \"SUPABASE_SERVICE_ROLE_KEY\",\n        \"ANTHROPIC_API_KEY\",\n        \"STRIPE_SECRET_KEY\",\n        \"COMTRADE_API_KEY\",\n        \"SHIPPO_API_KEY\",\n        \"JWT_SECRET\",\n        \"NEXTAUTH_SECRET\",\n        \"ENTERPRISE_MASTER_KEY\"\n    ];\n    if (false) {}\n}\n/**\n * Check for dangerous default/template values\n */ function validateSecretSecurity() {\n    const dangerousPatterns = [\n        {\n            key: \"JWT_SECRET\",\n            patterns: [\n                \"your-super-secure\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"NEXTAUTH_SECRET\",\n            patterns: [\n                \"your-nextauth-secret\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"ENTERPRISE_MASTER_KEY\",\n            patterns: [\n                \"triangle-intelligence-enterprise\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"ANTHROPIC_API_KEY\",\n            patterns: [\n                \"your-key-here\",\n                \"REPLACE_WITH\"\n            ]\n        }\n    ];\n    const warnings = [];\n    dangerousPatterns.forEach(({ key, patterns })=>{\n        if (process.env[key]) {\n            patterns.forEach((pattern)=>{\n                if (process.env[key].includes(pattern)) {\n                    warnings.push(`${key} appears to use default/template value`);\n                }\n            });\n        }\n    });\n    // Check secret strength\n    if (process.env.JWT_SECRET && process.env.JWT_SECRET.length < 32) {\n        warnings.push(\"JWT_SECRET is too short (minimum 32 characters)\");\n    }\n    return warnings;\n}\n/**\n * Get comprehensive security status\n */ function getSecurityStatus() {\n    const warnings = validateSecretSecurity();\n    const requiredMissing = SERVER_REQUIRED_ENV_VARS.filter((key)=>!process.env[key]);\n    const recommendedMissing = SERVER_RECOMMENDED_ENV_VARS.filter((key)=>!process.env[key]);\n    return {\n        status: requiredMissing.length === 0 && warnings.length === 0 ? \"secure\" : \"needs_attention\",\n        requiredMissing,\n        recommendedMissing,\n        securityWarnings: warnings,\n        lastChecked: new Date().toISOString()\n    };\n}\n// Auto-validate on import in development (SERVER-SIDE ONLY)\nif (isDevelopment() && \"undefined\" === \"undefined\") {\n    try {\n        validateEnvironment();\n        validateAPIKeysSecurity();\n    } catch (error) {\n        // Note: Using console.error here as this is critical bootstrap error\n        console.error(\"❌ Environment validation failed:\", error.message);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/utils/environment-validation.js\n");

/***/ }),

/***/ "(api)/./lib/utils/production-logger.js":
/*!****************************************!*\
  !*** ./lib/utils/production-logger.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   logAPICall: () => (/* binding */ logAPICall),\n/* harmony export */   logBusiness: () => (/* binding */ logBusiness),\n/* harmony export */   logDBQuery: () => (/* binding */ logDBQuery),\n/* harmony export */   logDebug: () => (/* binding */ logDebug),\n/* harmony export */   logError: () => (/* binding */ logError),\n/* harmony export */   logInfo: () => (/* binding */ logInfo),\n/* harmony export */   logPerformance: () => (/* binding */ logPerformance),\n/* harmony export */   logSecurity: () => (/* binding */ logSecurity),\n/* harmony export */   logWarn: () => (/* binding */ logWarn),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _environment_validation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment-validation.js */ \"(api)/./lib/utils/environment-validation.js\");\n/**\n * Production-Safe Logging System\n * Handles logging with environment awareness and security\n */ \n// Log levels\nconst LOG_LEVELS = {\n    ERROR: 0,\n    WARN: 1,\n    INFO: 2,\n    DEBUG: 3,\n    TRACE: 4\n};\nclass ProductionLogger {\n    constructor(){\n        this.level = (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? LOG_LEVELS.WARN : LOG_LEVELS.DEBUG;\n        this.sensitivePatterns = [\n            /sk-[a-zA-Z0-9_-]+/,\n            /pk_[a-zA-Z0-9_-]+/,\n            /eyJ[a-zA-Z0-9_-]+/,\n            /password/i,\n            /secret/i,\n            /token/i,\n            /key.*=.*[a-zA-Z0-9_-]{20,}/ // Key-value pairs with long values\n        ];\n    }\n    /**\n   * Sanitize sensitive data from logs\n   */ sanitize(data) {\n        if (typeof data === \"string\") {\n            let sanitized = data;\n            this.sensitivePatterns.forEach((pattern)=>{\n                sanitized = sanitized.replace(pattern, \"[REDACTED]\");\n            });\n            return sanitized;\n        }\n        if (typeof data === \"object\" && data !== null) {\n            const sanitized = Array.isArray(data) ? [] : {};\n            for (const [key, value] of Object.entries(data)){\n                const keyLower = key.toLowerCase();\n                if (keyLower.includes(\"password\") || keyLower.includes(\"secret\") || keyLower.includes(\"token\") || keyLower.includes(\"key\")) {\n                    sanitized[key] = \"[REDACTED]\";\n                } else {\n                    sanitized[key] = this.sanitize(value);\n                }\n            }\n            return sanitized;\n        }\n        return data;\n    }\n    /**\n   * Format log message\n   */ formatMessage(level, message, data, metadata) {\n        const timestamp = new Date().toISOString();\n        const sanitizedData = data ? this.sanitize(data) : null;\n        const logEntry = {\n            timestamp,\n            level,\n            message,\n            ...sanitizedData && {\n                data: sanitizedData\n            },\n            ...metadata && {\n                metadata\n            }\n        };\n        return (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? JSON.stringify(logEntry) : logEntry;\n    }\n    /**\n   * Log error messages\n   */ error(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.ERROR) {\n            const formatted = this.formatMessage(\"ERROR\", message, data, metadata);\n            console.error((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"❌\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log warning messages\n   */ warn(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.WARN) {\n            const formatted = this.formatMessage(\"WARN\", message, data, metadata);\n            console.warn((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"⚠️\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log info messages\n   */ info(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.INFO) {\n            const formatted = this.formatMessage(\"INFO\", message, data, metadata);\n            console.log((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"ℹ️\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log debug messages (only in development)\n   */ debug(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.DEBUG && (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isDevelopment)()) {\n            const formatted = this.formatMessage(\"DEBUG\", message, data, metadata);\n            console.log((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"\\uD83D\\uDC1B\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log trace messages (only in development)\n   */ trace(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.TRACE && (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isDevelopment)()) {\n            const formatted = this.formatMessage(\"TRACE\", message, data, metadata);\n            console.log((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"\\uD83D\\uDD0D\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log performance metrics\n   */ performance(operation, duration, metadata = null) {\n        this.info(`Performance: ${operation}`, {\n            duration: `${duration}ms`\n        }, metadata);\n    }\n    /**\n   * Log API calls\n   */ apiCall(method, endpoint, duration, status) {\n        this.info(`API: ${method} ${endpoint}`, {\n            duration: `${duration}ms`,\n            status,\n            type: \"api_call\"\n        });\n    }\n    /**\n   * Log database queries\n   */ dbQuery(table, operation, duration, recordCount = null) {\n        this.debug(`DB: ${operation} on ${table}`, {\n            duration: `${duration}ms`,\n            recordCount,\n            type: \"db_query\"\n        });\n    }\n    /**\n   * Log security events\n   */ security(event, details = null) {\n        this.warn(`Security: ${event}`, details, {\n            type: \"security_event\"\n        });\n    }\n    /**\n   * Log business events\n   */ business(event, details = null) {\n        this.info(`Business: ${event}`, details, {\n            type: \"business_event\"\n        });\n    }\n}\n// Create singleton instance\nconst logger = new ProductionLogger();\n// Convenience functions for common use cases\nconst logError = (message, data, metadata)=>logger.error(message, data, metadata);\nconst logWarn = (message, data, metadata)=>logger.warn(message, data, metadata);\nconst logInfo = (message, data, metadata)=>logger.info(message, data, metadata);\nconst logDebug = (message, data, metadata)=>logger.debug(message, data, metadata);\nconst logPerformance = (operation, duration, metadata)=>logger.performance(operation, duration, metadata);\nconst logAPICall = (method, endpoint, duration, status)=>logger.apiCall(method, endpoint, duration, status);\nconst logDBQuery = (table, operation, duration, recordCount)=>logger.dbQuery(table, operation, duration, recordCount);\nconst logSecurity = (event, details)=>logger.security(event, details);\nconst logBusiness = (event, details)=>logger.business(event, details);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logger);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/utils/production-logger.js\n");

/***/ }),

/***/ "(api)/./pages/api/status.js":
/*!*****************************!*\
  !*** ./pages/api/status.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_security_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/security.js */ \"(api)/./lib/security.js\");\n/* harmony import */ var _lib_monitoring_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/monitoring.js */ \"(api)/./lib/monitoring.js\");\n/* harmony import */ var _lib_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/utils/production-logger.js */ \"(api)/./lib/utils/production-logger.js\");\n/* harmony import */ var _lib_supabase_client_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/supabase-client.js */ \"(api)/./lib/supabase-client.js\");\n/**\n * UNIFIED STATUS & HEALTH API ENDPOINT\n * Consolidates: status.js + health.js\n * Provides comprehensive system health and configuration status\n * Supports both detailed status and lightweight health checks\n */ \n\n\n\nasync function handler(req, res) {\n    const startTime = Date.now();\n    try {\n        // Apply security headers\n        (0,_lib_security_js__WEBPACK_IMPORTED_MODULE_0__.applySecurityHeaders)(res);\n        // Only allow GET requests\n        if (req.method !== \"GET\") {\n            const duration = Date.now() - startTime;\n            (0,_lib_monitoring_js__WEBPACK_IMPORTED_MODULE_1__.trackAPICall)(req.method, \"/api/status\", duration, 405);\n            return res.status(405).json({\n                error: \"Method not allowed\",\n                message: \"Only GET requests are supported\"\n            });\n        }\n        // Check for lightweight health mode (from health.js functionality)\n        const isSimpleHealthCheck = req.query.simple === \"true\" || req.query.health === \"true\";\n        if (isSimpleHealthCheck) {\n            (0,_lib_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)(\"Simple health check initiated\");\n            // Basic application health\n            const health = {\n                status: \"healthy\",\n                timestamp: new Date().toISOString(),\n                version: process.env.npm_package_version || \"1.0.0\",\n                uptime: process.uptime(),\n                environment: \"development\" || 0\n            };\n            // Test database connectivity\n            let databaseStatus = \"disconnected\";\n            try {\n                const dbConnected = await (0,_lib_supabase_client_js__WEBPACK_IMPORTED_MODULE_3__.testSupabaseConnection)();\n                databaseStatus = dbConnected ? \"connected\" : \"disconnected\";\n                if (!dbConnected) {\n                    health.status = \"unhealthy\";\n                    health.issues = [\n                        \"database_disconnected\"\n                    ];\n                }\n            } catch (error) {\n                health.status = \"unhealthy\";\n                health.issues = [\n                    \"database_error\"\n                ];\n                (0,_lib_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logError)(\"Database health check failed\", {\n                    error: error.message\n                });\n            }\n            // Add basic resource usage\n            const memUsage = process.memoryUsage();\n            health.database = databaseStatus;\n            health.memory_mb = Math.round(memUsage.rss / 1024 / 1024);\n            health.response_time_ms = Date.now() - startTime;\n            const duration = Date.now() - startTime;\n            (0,_lib_monitoring_js__WEBPACK_IMPORTED_MODULE_1__.trackAPICall)(req.method, \"/api/status?simple=true\", duration, 200);\n            return res.status(200).json(health);\n        }\n        // logInfo('API Status check initiated', {\n        //   ip: SecurityValidator.getClientIP(req),\n        //   userAgent: req.headers['user-agent']?.substring(0, 50)\n        // })\n        // Get system health metrics\n        const healthMetrics = (0,_lib_monitoring_js__WEBPACK_IMPORTED_MODULE_1__.getHealthMetrics)();\n        // Test database connectivity\n        let databaseStatus = \"unknown\";\n        try {\n            const dbConnected = await (0,_lib_supabase_client_js__WEBPACK_IMPORTED_MODULE_3__.testSupabaseConnection)();\n            databaseStatus = dbConnected ? \"connected\" : \"disconnected\";\n        } catch (error) {\n            databaseStatus = \"error\";\n            console.error(\"Database status check failed:\", error.message);\n        }\n        // Check API configuration (without exposing keys)\n        const apiStatus = {\n            comtrade: {\n                configured: !!process.env.COMTRADE_API_KEY,\n                status: process.env.COMTRADE_API_KEY ? \"ready\" : \"not_configured\"\n            },\n            shippo: {\n                configured: !!process.env.SHIPPO_API_KEY,\n                status: process.env.SHIPPO_API_KEY ? \"ready\" : \"not_configured\"\n            },\n            anthropic: {\n                configured: !!process.env.ANTHROPIC_API_KEY,\n                status: process.env.ANTHROPIC_API_KEY ? \"ready\" : \"not_configured\"\n            },\n            stripe: {\n                configured: !!process.env.STRIPE_SECRET_KEY,\n                status: process.env.STRIPE_SECRET_KEY ? \"ready\" : \"not_configured\"\n            }\n        };\n        // Build status response\n        const status = {\n            status: \"operational\",\n            timestamp: new Date().toISOString(),\n            environment: \"development\" || 0,\n            version: process.env.npm_package_version || \"1.0.0\",\n            uptime: healthMetrics.uptime,\n            system: {\n                database: databaseStatus,\n                memory: healthMetrics.memory,\n                requests: healthMetrics.requests,\n                alerts: healthMetrics.activeAlerts\n            },\n            apis: apiStatus,\n            features: {\n                monitoring: \"enabled\",\n                security: \"enabled\",\n                caching: \"enabled\",\n                logging: \"enabled\"\n            }\n        };\n        // Determine overall status\n        const hasErrors = databaseStatus === \"error\" || healthMetrics.requests.errorRate > 10 || !process.env.ANTHROPIC_API_KEY || !process.env.COMTRADE_API_KEY;\n        if (hasErrors) {\n            status.status = \"degraded\";\n        }\n        const duration = Date.now() - startTime;\n        const statusCode = hasErrors ? 200 : 200 // Always return 200 for status endpoint\n        ;\n        (0,_lib_monitoring_js__WEBPACK_IMPORTED_MODULE_1__.trackAPICall)(\"GET\", \"/api/status\", duration, statusCode);\n        // logInfo('API Status check completed', {\n        //   status: status.status,\n        //   responseTime: `${duration}ms`,\n        //   database: databaseStatus\n        // })\n        res.status(statusCode).json(status);\n    } catch (error) {\n        const duration = Date.now() - startTime;\n        (0,_lib_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logError)(\"API Status endpoint error\", {\n            error: error.message,\n            stack: error.stack,\n            responseTime: `${duration}ms`,\n            ip: _lib_security_js__WEBPACK_IMPORTED_MODULE_0__.SecurityValidator.getClientIP(req)\n        });\n        (0,_lib_monitoring_js__WEBPACK_IMPORTED_MODULE_1__.trackAPICall)(\"GET\", \"/api/status\", duration, 500, error);\n        // Don't expose internal error details\n        res.status(500).json({\n            status: \"error\",\n            timestamp: new Date().toISOString(),\n            message: \"Unable to retrieve system status\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/status.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fstatus&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cstatus.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();