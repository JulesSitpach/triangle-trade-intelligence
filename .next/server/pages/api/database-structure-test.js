"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/database-structure-test";
exports.ids = ["pages/api/database-structure-test"];
exports.modules = {

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

module.exports = require("react");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdatabase-structure-test&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdatabase-structure-test.js&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdatabase-structure-test&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdatabase-structure-test.js&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_database_structure_test_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/database-structure-test.js */ \"(api)/./pages/api/database-structure-test.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_database_structure_test_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_database_structure_test_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/database-structure-test\",\n        pathname: \"/api/database-structure-test\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_database_structure_test_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmRhdGFiYXNlLXN0cnVjdHVyZS10ZXN0JnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZkYXRhYmFzZS1zdHJ1Y3R1cmUtdGVzdC5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNtRTtBQUNuRTtBQUNBLGlFQUFlLHdFQUFLLENBQUMsa0VBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLGtFQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RyaWFuZ2xlLWludGVsbGlnZW5jZS1wbGF0Zm9ybS8/NmZiOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2RhdGFiYXNlLXN0cnVjdHVyZS10ZXN0LmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZGF0YWJhc2Utc3RydWN0dXJlLXRlc3RcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9kYXRhYmFzZS1zdHJ1Y3R1cmUtdGVzdFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdatabase-structure-test&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdatabase-structure-test.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/environment-validation.js":
/*!***************************************!*\
  !*** ./lib/environment-validation.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnvVar: () => (/* binding */ getEnvVar),\n/* harmony export */   getSecurityStatus: () => (/* binding */ getSecurityStatus),\n/* harmony export */   getSupabaseConfig: () => (/* binding */ getSupabaseConfig),\n/* harmony export */   isDevelopment: () => (/* binding */ isDevelopment),\n/* harmony export */   isProduction: () => (/* binding */ isProduction),\n/* harmony export */   safeLog: () => (/* binding */ safeLog),\n/* harmony export */   validateAPIKeysSecurity: () => (/* binding */ validateAPIKeysSecurity),\n/* harmony export */   validateEnvironment: () => (/* binding */ validateEnvironment),\n/* harmony export */   validateSecretSecurity: () => (/* binding */ validateSecretSecurity)\n/* harmony export */ });\n/**\n * Environment Variable Validation and Configuration\n * Centralized validation for production readiness\n */ // Required environment variables for production\n// Split by client/server because client can't see server-only vars\nconst CLIENT_REQUIRED_ENV_VARS = [\n    \"NEXT_PUBLIC_SUPABASE_URL\",\n    \"NEXT_PUBLIC_SUPABASE_ANON_KEY\"\n];\nconst SERVER_REQUIRED_ENV_VARS = [\n    \"NEXT_PUBLIC_SUPABASE_URL\",\n    \"NEXT_PUBLIC_SUPABASE_ANON_KEY\",\n    \"SUPABASE_SERVICE_ROLE_KEY\",\n    \"JWT_SECRET\",\n    \"NEXTAUTH_SECRET\"\n];\nconst SERVER_RECOMMENDED_ENV_VARS = [\n    \"ANTHROPIC_API_KEY\",\n    \"COMTRADE_API_KEY\",\n    \"SHIPPO_API_KEY\",\n    \"STRIPE_SECRET_KEY\"\n];\n// Optional environment variables with defaults\nconst OPTIONAL_ENV_VARS = {\n    NODE_ENV: \"development\",\n    NEXT_PUBLIC_APP_URL: \"http://localhost:3000\"\n};\n/**\n * Validate all required environment variables are present\n * @throws {Error} If any required variable is missing\n */ function validateEnvironment() {\n    // Skip validation entirely on client-side to avoid errors\n    if (false) {}\n    // Server-side validation\n    const missing = SERVER_REQUIRED_ENV_VARS.filter((key)=>!process.env[key]);\n    if (missing.length > 0) {\n        throw new Error(`Missing required server-side environment variables: ${missing.join(\", \")}`);\n    }\n    // Note: Using console.log here as this runs before logger is initialized\n    console.log(\"✅ All required environment variables are present\");\n}\n/**\n * Get environment variable with validation\n * @param {string} key - Environment variable key\n * @param {boolean} required - Whether the variable is required\n * @returns {string} Environment variable value\n */ function getEnvVar(key, required = true) {\n    const value = process.env[key];\n    if (required && !value) {\n        throw new Error(`Missing required environment variable: ${key}`);\n    }\n    return value || OPTIONAL_ENV_VARS[key];\n}\n/**\n * Check if running in production\n */ function isProduction() {\n    return \"development\" === \"production\";\n}\n/**\n * Check if running in development\n */ function isDevelopment() {\n    return \"development\" === \"development\";\n}\n/**\n * Safe logging that respects environment\n * Only logs in development unless force is true\n */ function safeLog(message, data = null, force = false) {\n    if (isDevelopment() || force) {\n        if (data) {\n            // Note: Using console.log here as this is used for bootstrap logging\n            console.log(message, data);\n        } else {\n            console.log(message);\n        }\n    }\n}\n/**\n * Get Supabase configuration based on environment\n */ function getSupabaseConfig() {\n    const url = getEnvVar(\"NEXT_PUBLIC_SUPABASE_URL\");\n    // Use service role key on server, anon key on client\n    const key =  false ? 0 : getEnvVar(\"SUPABASE_SERVICE_ROLE_KEY\", false) || getEnvVar(\"NEXT_PUBLIC_SUPABASE_ANON_KEY\");\n    return {\n        url,\n        key\n    };\n}\n/**\n * Validate API keys are not exposed and check for security issues\n */ function validateAPIKeysSecurity() {\n    const sensitiveKeys = [\n        \"SUPABASE_SERVICE_ROLE_KEY\",\n        \"ANTHROPIC_API_KEY\",\n        \"STRIPE_SECRET_KEY\",\n        \"COMTRADE_API_KEY\",\n        \"SHIPPO_API_KEY\",\n        \"JWT_SECRET\",\n        \"NEXTAUTH_SECRET\",\n        \"ENTERPRISE_MASTER_KEY\"\n    ];\n    if (false) {}\n}\n/**\n * Check for dangerous default/template values\n */ function validateSecretSecurity() {\n    const dangerousPatterns = [\n        {\n            key: \"JWT_SECRET\",\n            patterns: [\n                \"your-super-secure\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"NEXTAUTH_SECRET\",\n            patterns: [\n                \"your-nextauth-secret\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"ENTERPRISE_MASTER_KEY\",\n            patterns: [\n                \"triangle-intelligence-enterprise\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"ANTHROPIC_API_KEY\",\n            patterns: [\n                \"your-key-here\",\n                \"REPLACE_WITH\"\n            ]\n        }\n    ];\n    const warnings = [];\n    dangerousPatterns.forEach(({ key, patterns })=>{\n        if (process.env[key]) {\n            patterns.forEach((pattern)=>{\n                if (process.env[key].includes(pattern)) {\n                    warnings.push(`${key} appears to use default/template value`);\n                }\n            });\n        }\n    });\n    // Check secret strength\n    if (process.env.JWT_SECRET && process.env.JWT_SECRET.length < 32) {\n        warnings.push(\"JWT_SECRET is too short (minimum 32 characters)\");\n    }\n    return warnings;\n}\n/**\n * Get comprehensive security status\n */ function getSecurityStatus() {\n    const warnings = validateSecretSecurity();\n    const requiredMissing = SERVER_REQUIRED_ENV_VARS.filter((key)=>!process.env[key]);\n    const recommendedMissing = SERVER_RECOMMENDED_ENV_VARS.filter((key)=>!process.env[key]);\n    return {\n        status: requiredMissing.length === 0 && warnings.length === 0 ? \"secure\" : \"needs_attention\",\n        requiredMissing,\n        recommendedMissing,\n        securityWarnings: warnings,\n        lastChecked: new Date().toISOString()\n    };\n}\n// Auto-validate on import in development (SERVER-SIDE ONLY)\nif (isDevelopment() && \"undefined\" === \"undefined\") {\n    try {\n        validateEnvironment();\n        validateAPIKeysSecurity();\n    } catch (error) {\n        // Note: Using console.error here as this is critical bootstrap error\n        console.error(\"❌ Environment validation failed:\", error.message);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/environment-validation.js\n");

/***/ }),

/***/ "(api)/./lib/memory-optimizer.js":
/*!*********************************!*\
  !*** ./lib/memory-optimizer.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getMemoryOptimizer: () => (/* binding */ getMemoryOptimizer),\n/* harmony export */   memoryOptimizedAPICall: () => (/* binding */ memoryOptimizedAPICall),\n/* harmony export */   useMemoryOptimizedEffect: () => (/* binding */ useMemoryOptimizedEffect)\n/* harmony export */ });\n/* harmony import */ var _production_logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./production-logger.js */ \"(api)/./lib/production-logger.js\");\n/**\n * 🧠 MEMORY OPTIMIZER - PRODUCTION MEMORY MANAGEMENT\n * \n * Comprehensive memory management system for Triangle Intelligence Platform\n * Eliminates memory leaks while maintaining 30-second real-time updates\n * \n * KEY FEATURES:\n * ✅ Process event listener cleanup\n * ✅ React component unmount handlers  \n * ✅ API call cancellation with AbortController\n * ✅ RSS monitoring cleanup\n * ✅ Beast Master resource management\n * ✅ Database connection pooling optimization\n * ✅ Automatic memory pressure detection\n */ \nclass MemoryOptimizer {\n    constructor(){\n        this.lastLogTime = 0;\n        this.cleanupHandlers = new Map();\n        this.intervalCleanup = new Map();\n        this.timeoutCleanup = new Map();\n        this.eventListeners = new Map();\n        this.abortControllers = new Set();\n        // Environment-based configuration (CRITICAL FIX)\n        this.memoryPressureThreshold = (parseInt(process.env.MEMORY_PRESSURE_THRESHOLD_MB) || 512) * 1024 * 1024;\n        this.gcThreshold = (parseInt(process.env.MEMORY_GC_THRESHOLD_MB) || 768) * 1024 * 1024;\n        this.monitorInterval = parseInt(process.env.MEMORY_MONITOR_INTERVAL_MS) || 60000;\n        this.isInitialized = false;\n        this.lastCleanupTime = 0;\n        this.initializeMemoryMonitoring();\n    }\n    /**\n   * Initialize memory monitoring and cleanup systems\n   */ initializeMemoryMonitoring() {\n        if (this.isInitialized) return;\n        // Only run in server environment\n        if (typeof process === \"undefined\" || \"undefined\" !== \"undefined\") {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory Optimizer: Browser environment detected, limited functionality enabled\");\n            this.isInitialized = true;\n            return;\n        }\n        // Monitor memory usage based on environment configuration\n        const memoryMonitor = setInterval(()=>{\n            this.checkMemoryPressure();\n        }, this.monitorInterval);\n        this.registerCleanup(\"memoryMonitor\", ()=>clearInterval(memoryMonitor));\n        // Process cleanup handlers\n        const processCleanup = ()=>{\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory Optimizer: Initiating graceful shutdown\");\n            this.performGlobalCleanup();\n            process.exit(0);\n        };\n        // Register process event listeners with proper cleanup\n        process.removeAllListeners(\"SIGTERM\");\n        process.removeAllListeners(\"SIGINT\");\n        process.removeAllListeners(\"uncaughtException\");\n        process.removeAllListeners(\"unhandledRejection\");\n        process.once(\"SIGTERM\", processCleanup);\n        process.once(\"SIGINT\", processCleanup);\n        process.on(\"uncaughtException\", (error)=>{\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logError)(\"Uncaught Exception - initiating cleanup\", {\n                error: error.message\n            });\n            this.performGlobalCleanup();\n            process.exit(1);\n        });\n        process.on(\"unhandledRejection\", (reason, promise)=>{\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logError)(\"Unhandled Promise Rejection - cleaning up\", {\n                reason: reason?.message || reason,\n                stack: reason?.stack\n            });\n        });\n        this.isInitialized = true;\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory Optimizer initialized successfully\");\n    }\n    /**\n   * Register cleanup handler for a specific resource\n   */ registerCleanup(id, cleanupFunction) {\n        if (this.cleanupHandlers.has(id)) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(`Cleanup handler already registered for: ${id}`);\n            this.cleanupHandlers.get(id)(); // Clean up old one first\n        }\n        this.cleanupHandlers.set(id, cleanupFunction);\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(`Registered cleanup handler: ${id}`);\n    }\n    /**\n   * Register interval with automatic cleanup\n   */ registerInterval(id, intervalId) {\n        if (this.intervalCleanup.has(id)) {\n            clearInterval(this.intervalCleanup.get(id));\n        }\n        this.intervalCleanup.set(id, intervalId);\n        // Auto-cleanup after 10 minutes to prevent accumulation\n        setTimeout(()=>{\n            if (this.intervalCleanup.has(id)) {\n                clearInterval(this.intervalCleanup.get(id));\n                this.intervalCleanup.delete(id);\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(`Auto-cleaned interval: ${id}`);\n            }\n        }, 600000); // 10 minutes\n    }\n    /**\n   * Register timeout with automatic cleanup\n   */ registerTimeout(id, timeoutId) {\n        if (this.timeoutCleanup.has(id)) {\n            clearTimeout(this.timeoutCleanup.get(id));\n        }\n        this.timeoutCleanup.set(id, timeoutId);\n    }\n    /**\n   * Create and register AbortController for API calls\n   */ createAbortController(timeoutMs = 30000) {\n        const controller = new AbortController();\n        this.abortControllers.add(controller);\n        // Auto-abort after timeout to prevent hanging requests\n        const timeoutId = setTimeout(()=>{\n            if (!controller.signal.aborted) {\n                controller.abort();\n                this.abortControllers.delete(controller);\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Auto-aborted API request due to timeout\");\n            }\n        }, timeoutMs);\n        // Clean up timeout when controller is aborted\n        controller.signal.addEventListener(\"abort\", ()=>{\n            clearTimeout(timeoutId);\n            this.abortControllers.delete(controller);\n        });\n        return controller;\n    }\n    /**\n   * React useEffect cleanup helper\n   */ createReactCleanup() {\n        const cleanupFunctions = [];\n        return {\n            register: (cleanupFn)=>{\n                cleanupFunctions.push(cleanupFn);\n            },\n            cleanup: ()=>{\n                cleanupFunctions.forEach((fn, index)=>{\n                    try {\n                        fn();\n                    } catch (error) {\n                        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logError)(`React cleanup function ${index} failed`, {\n                            error: error.message\n                        });\n                    }\n                });\n                cleanupFunctions.length = 0;\n            }\n        };\n    }\n    /**\n   * Check memory pressure and trigger cleanup if needed - OPTIMIZED\n   */ checkMemoryPressure() {\n        // Only run memory checks in server environment\n        if (typeof process === \"undefined\" || \"undefined\" !== \"undefined\") {\n            return;\n        }\n        const memUsage = process.memoryUsage();\n        const heapUsed = memUsage.heapUsed;\n        const external = memUsage.external;\n        const totalMemory = heapUsed + external;\n        const totalMemoryMB = Math.round(totalMemory / 1024 / 1024);\n        const thresholdMB = Math.round(this.memoryPressureThreshold / 1024 / 1024);\n        const gcThresholdMB = Math.round(this.gcThreshold / 1024 / 1024);\n        // CRITICAL FIX: Only log when threshold exceeded or every 5 minutes\n        const now = Date.now();\n        const shouldLog = totalMemory > this.memoryPressureThreshold || now - this.lastLogTime > 300000;\n        if (shouldLog) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory usage check\", {\n                heapUsed: Math.round(heapUsed / 1024 / 1024) + \"MB\",\n                external: Math.round(external / 1024 / 1024) + \"MB\",\n                total: totalMemoryMB + \"MB\",\n                threshold: thresholdMB + \"MB\",\n                gcThreshold: gcThresholdMB + \"MB\"\n            });\n            this.lastLogTime = now;\n        }\n        // Trigger cleanup if memory usage is high AND enough time has passed\n        if (totalMemory > this.memoryPressureThreshold && now - this.lastCleanupTime > 60000) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(\"Memory pressure detected, triggering cleanup\", {\n                memoryMB: totalMemoryMB,\n                thresholdMB: thresholdMB\n            });\n            this.performMemoryCleanup();\n            this.lastCleanupTime = now;\n        }\n        // Force garbage collection if memory is very high\n        if (totalMemory > this.gcThreshold && global.gc) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(\"High memory usage, forcing garbage collection\", {\n                memoryMB: totalMemoryMB,\n                gcThresholdMB: gcThresholdMB\n            });\n            global.gc();\n        }\n    }\n    /**\n   * Perform memory cleanup operations\n   */ performMemoryCleanup() {\n        let cleaned = 0;\n        // Clean up old intervals (older than 5 minutes)\n        const now = Date.now();\n        for (const [id, data] of this.intervalCleanup.entries()){\n            if (typeof data === \"object\" && data.timestamp && now - data.timestamp > 300000) {\n                clearInterval(data.intervalId);\n                this.intervalCleanup.delete(id);\n                cleaned++;\n            }\n        }\n        // Clean up old timeouts\n        for (const [id, timeoutId] of this.timeoutCleanup.entries()){\n            clearTimeout(timeoutId);\n            this.timeoutCleanup.delete(id);\n            cleaned++;\n        }\n        // Abort old API requests\n        for (const controller of this.abortControllers){\n            if (!controller.signal.aborted) {\n                controller.abort();\n                cleaned++;\n            }\n        }\n        this.abortControllers.clear();\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(`Memory cleanup completed, cleaned ${cleaned} resources`);\n    }\n    /**\n   * Perform global cleanup on shutdown\n   */ performGlobalCleanup() {\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Performing global cleanup\");\n        // Run all registered cleanup handlers\n        for (const [id, cleanupFn] of this.cleanupHandlers.entries()){\n            try {\n                cleanupFn();\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(`Cleaned up: ${id}`);\n            } catch (error) {\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logError)(`Cleanup failed for: ${id}`, {\n                    error: error.message\n                });\n            }\n        }\n        // Clear all intervals and timeouts\n        for (const intervalId of this.intervalCleanup.values()){\n            clearInterval(typeof intervalId === \"object\" ? intervalId.intervalId : intervalId);\n        }\n        for (const timeoutId of this.timeoutCleanup.values()){\n            clearTimeout(timeoutId);\n        }\n        // Abort all pending requests\n        for (const controller of this.abortControllers){\n            controller.abort();\n        }\n        // Clear maps\n        this.cleanupHandlers.clear();\n        this.intervalCleanup.clear();\n        this.timeoutCleanup.clear();\n        this.abortControllers.clear();\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Global cleanup completed\");\n    }\n    /**\n   * Get memory statistics\n   */ getMemoryStats() {\n        if (typeof process === \"undefined\" || \"undefined\" !== \"undefined\") {\n            return {\n                available: false,\n                environment: \"browser\",\n                cleanupHandlers: this.cleanupHandlers.size,\n                activeIntervals: this.intervalCleanup.size,\n                activeTimeouts: this.timeoutCleanup.size,\n                activeRequests: this.abortControllers.size\n            };\n        }\n        const memUsage = process.memoryUsage();\n        return {\n            available: true,\n            environment: \"server\",\n            heap: {\n                used: Math.round(memUsage.heapUsed / 1024 / 1024),\n                total: Math.round(memUsage.heapTotal / 1024 / 1024)\n            },\n            external: Math.round(memUsage.external / 1024 / 1024),\n            cleanupHandlers: this.cleanupHandlers.size,\n            activeIntervals: this.intervalCleanup.size,\n            activeTimeouts: this.timeoutCleanup.size,\n            activeRequests: this.abortControllers.size\n        };\n    }\n}\n// Global singleton instance\nlet memoryOptimizer = null;\nfunction getMemoryOptimizer() {\n    if (!memoryOptimizer) {\n        memoryOptimizer = new MemoryOptimizer();\n    }\n    return memoryOptimizer;\n}\n// React hook for memory-optimized effects\nfunction useMemoryOptimizedEffect(effect, deps) {\n    const React = __webpack_require__(/*! react */ \"react\");\n    React.useEffect(()=>{\n        const optimizer = getMemoryOptimizer();\n        const reactCleanup = optimizer.createReactCleanup();\n        const cleanup = effect(reactCleanup.register);\n        return ()=>{\n            reactCleanup.cleanup();\n            if (cleanup) cleanup();\n        };\n    }, deps);\n}\n// API call helper with automatic cleanup\nasync function memoryOptimizedAPICall(url, options = {}, timeoutMs = 30000) {\n    const optimizer = getMemoryOptimizer();\n    const controller = optimizer.createAbortController(timeoutMs);\n    try {\n        const response = await fetch(url, {\n            ...options,\n            signal: controller.signal\n        });\n        return response;\n    } catch (error) {\n        if (error.name === \"AbortError\") {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(\"API call was aborted\", {\n                url\n            });\n            throw new Error(\"Request timeout\");\n        }\n        throw error;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getMemoryOptimizer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/memory-optimizer.js\n");

/***/ }),

/***/ "(api)/./lib/production-logger.js":
/*!**********************************!*\
  !*** ./lib/production-logger.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   logAPICall: () => (/* binding */ logAPICall),\n/* harmony export */   logBusiness: () => (/* binding */ logBusiness),\n/* harmony export */   logDBQuery: () => (/* binding */ logDBQuery),\n/* harmony export */   logDebug: () => (/* binding */ logDebug),\n/* harmony export */   logError: () => (/* binding */ logError),\n/* harmony export */   logInfo: () => (/* binding */ logInfo),\n/* harmony export */   logPerformance: () => (/* binding */ logPerformance),\n/* harmony export */   logSecurity: () => (/* binding */ logSecurity),\n/* harmony export */   logWarn: () => (/* binding */ logWarn),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _environment_validation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment-validation.js */ \"(api)/./lib/environment-validation.js\");\n/**\n * Production-Safe Logging System\n * Handles logging with environment awareness and security\n */ \n// Log levels\nconst LOG_LEVELS = {\n    ERROR: 0,\n    WARN: 1,\n    INFO: 2,\n    DEBUG: 3,\n    TRACE: 4\n};\nclass ProductionLogger {\n    constructor(){\n        this.level = (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? LOG_LEVELS.WARN : LOG_LEVELS.DEBUG;\n        this.sensitivePatterns = [\n            /sk-[a-zA-Z0-9_-]+/,\n            /pk_[a-zA-Z0-9_-]+/,\n            /eyJ[a-zA-Z0-9_-]+/,\n            /password/i,\n            /secret/i,\n            /token/i,\n            /key.*=.*[a-zA-Z0-9_-]{20,}/ // Key-value pairs with long values\n        ];\n        // Asynchronous logging queue for performance\n        this.logQueue = [];\n        this.maxQueueSize = 1000;\n        this.flushInterval = 5000 // 5 seconds\n        ;\n        this.isFlushingLogs = false;\n        // Start periodic log flushing in production\n        if ((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)()) {\n            setInterval(()=>{\n                this.flushLogsAsync();\n            }, this.flushInterval);\n        }\n    }\n    /**\n   * Sanitize sensitive data from logs\n   */ sanitize(data) {\n        if (typeof data === \"string\") {\n            let sanitized = data;\n            this.sensitivePatterns.forEach((pattern)=>{\n                sanitized = sanitized.replace(pattern, \"[REDACTED]\");\n            });\n            return sanitized;\n        }\n        if (typeof data === \"object\" && data !== null) {\n            const sanitized = Array.isArray(data) ? [] : {};\n            for (const [key, value] of Object.entries(data)){\n                const keyLower = key.toLowerCase();\n                if (keyLower.includes(\"password\") || keyLower.includes(\"secret\") || keyLower.includes(\"token\") || keyLower.includes(\"key\")) {\n                    sanitized[key] = \"[REDACTED]\";\n                } else {\n                    sanitized[key] = this.sanitize(value);\n                }\n            }\n            return sanitized;\n        }\n        return data;\n    }\n    /**\n   * Format log message\n   */ formatMessage(level, message, data, metadata) {\n        const timestamp = new Date().toISOString();\n        const sanitizedData = data ? this.sanitize(data) : null;\n        const logEntry = {\n            timestamp,\n            level,\n            message,\n            ...sanitizedData && {\n                data: sanitizedData\n            },\n            ...metadata && {\n                metadata\n            }\n        };\n        return (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? JSON.stringify(logEntry) : logEntry;\n    }\n    /**\n   * Log error messages (always synchronous for errors)\n   */ error(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.ERROR) {\n            const formatted = this.formatMessage(\"ERROR\", message, data, metadata);\n            console.error((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"❌\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log warning messages (asynchronous in production)\n   */ warn(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.WARN) {\n            const logEntry = {\n                level: \"WARN\",\n                message,\n                data: this.sanitize(data),\n                metadata,\n                timestamp: new Date().toISOString()\n            };\n            if ((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)()) {\n                this.queueLog(logEntry);\n            } else {\n                console.warn(\"⚠️\", message, this.sanitize(data));\n            }\n        }\n    }\n    /**\n   * Log info messages (asynchronous in production)\n   */ info(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.INFO) {\n            const logEntry = {\n                level: \"INFO\",\n                message,\n                data: this.sanitize(data),\n                metadata,\n                timestamp: new Date().toISOString()\n            };\n            if ((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)()) {\n                this.queueLog(logEntry);\n            } else {\n                console.log(\"ℹ️\", message, this.sanitize(data));\n            }\n        }\n    }\n    /**\n   * Log debug messages (only in development, always synchronous)\n   */ debug(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.DEBUG && (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isDevelopment)()) {\n            console.log(\"\\uD83D\\uDC1B\", message, this.sanitize(data));\n        }\n    }\n    /**\n   * Log trace messages (only in development)\n   */ trace(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.TRACE && (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isDevelopment)()) {\n            const formatted = this.formatMessage(\"TRACE\", message, data, metadata);\n            console.log((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"\\uD83D\\uDD0D\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log performance metrics\n   */ performance(operation, duration, metadata = null) {\n        this.info(`Performance: ${operation}`, {\n            duration: `${duration}ms`\n        }, metadata);\n    }\n    /**\n   * Log API calls\n   */ apiCall(method, endpoint, duration, status) {\n        this.info(`API: ${method} ${endpoint}`, {\n            duration: `${duration}ms`,\n            status,\n            type: \"api_call\"\n        });\n    }\n    /**\n   * Log database queries\n   */ dbQuery(table, operation, duration, recordCount = null) {\n        this.debug(`DB: ${operation} on ${table}`, {\n            duration: `${duration}ms`,\n            recordCount,\n            type: \"db_query\"\n        });\n    }\n    /**\n   * Log security events\n   */ security(event, details = null) {\n        this.warn(`Security: ${event}`, details, {\n            type: \"security_event\"\n        });\n    }\n    /**\n   * Log business events\n   */ business(event, details = null) {\n        this.info(`Business: ${event}`, details, {\n            type: \"business_event\"\n        });\n    }\n}\n// Create singleton instance\nconst logger = new ProductionLogger();\n// Convenience functions for common use cases\nconst logError = (message, data, metadata)=>logger.error(message, data, metadata);\nconst logWarn = (message, data, metadata)=>logger.warn(message, data, metadata);\nconst logInfo = (message, data, metadata)=>logger.info(message, data, metadata);\nconst logDebug = (message, data, metadata)=>logger.debug(message, data, metadata);\nconst logPerformance = (operation, duration, metadata)=>logger.performance(operation, duration, metadata);\nconst logAPICall = (method, endpoint, duration, status)=>logger.apiCall(method, endpoint, duration, status);\nconst logDBQuery = (table, operation, duration, recordCount)=>logger.dbQuery(table, operation, duration, recordCount);\nconst logSecurity = (event, details)=>logger.security(event, details);\nconst logBusiness = (event, details)=>logger.business(event, details);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logger);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/production-logger.js\n");

/***/ }),

/***/ "(api)/./lib/supabase-client.js":
/*!********************************!*\
  !*** ./lib/supabase-client.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   executeOptimizedQuery: () => (/* binding */ executeOptimizedQuery),\n/* harmony export */   getConnectionStats: () => (/* binding */ getConnectionStats),\n/* harmony export */   getServerSupabaseClient: () => (/* binding */ getServerSupabaseClient),\n/* harmony export */   getSupabaseClient: () => (/* binding */ getSupabaseClient),\n/* harmony export */   shutdownConnections: () => (/* binding */ shutdownConnections),\n/* harmony export */   testSupabaseConnection: () => (/* binding */ testSupabaseConnection)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _production_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./production-logger.js */ \"(api)/./lib/production-logger.js\");\n/* harmony import */ var _memory_optimizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./memory-optimizer.js */ \"(api)/./lib/memory-optimizer.js\");\n/**\n * SHARED SUPABASE CLIENT WITH SERVER/CLIENT SEPARATION\n * Ensures service keys are NEVER exposed client-side\n * Single instance pattern to avoid conflicts\n */ \n\n\nlet supabaseInstance = null;\nlet supabaseServerInstance = null;\nlet connectionPool = {\n    activeConnections: 0,\n    maxConnections: 50,\n    connectionQueue: [],\n    lastCleanup: Date.now(),\n    peakConnections: 0,\n    totalQueries: 0\n};\n/**\n * Get Supabase client appropriate for the environment\n * Client-side: Uses anonymous key (safe for browser)\n * Server-side: Uses service role key (never exposed to browser)\n */ const getSupabaseClient = ()=>{\n    // Check if we're on the server or client\n    const isServer = \"undefined\" === \"undefined\";\n    if (isServer) {\n        // SERVER-SIDE: Use service role key for full access\n        if (!supabaseServerInstance) {\n            const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n            if (!serviceKey) {\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"SUPABASE_SERVICE_ROLE_KEY not found in server environment\");\n                throw new Error(\"Server configuration error: Missing service key\");\n            }\n            supabaseServerInstance = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://mrwitpgbcaxgnirqtavt.supabase.co\", serviceKey, {\n                auth: {\n                    autoRefreshToken: false,\n                    persistSession: false\n                },\n                db: {\n                    schema: \"public\"\n                },\n                global: {\n                    headers: {\n                        \"User-Agent\": \"Triangle-Intelligence-Platform/1.0\"\n                    }\n                }\n            });\n            // Register cleanup with memory optimizer\n            const memoryOptimizer = (0,_memory_optimizer_js__WEBPACK_IMPORTED_MODULE_2__.getMemoryOptimizer)();\n            memoryOptimizer.registerCleanup(\"supabase-server-client\", ()=>{\n                if (supabaseServerInstance) {\n                    (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Cleaning up Supabase server connections\");\n                    supabaseServerInstance = null;\n                }\n            });\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Created server-side Supabase client with service role and memory optimization\");\n        }\n        return supabaseServerInstance;\n    } else {\n        // CLIENT-SIDE: Use anonymous key only\n        if (!supabaseInstance) {\n            const anonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1yd2l0cGdiY2F4Z25pcnF0YXZ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk4MjUxMzQsImV4cCI6MjA2NTQwMTEzNH0.5g-eaUIwy4VQD2YfNC2sFNoZYF1HdUzVTNJZvtuVSI8\";\n            if (!anonKey) {\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"NEXT_PUBLIC_SUPABASE_ANON_KEY not found\");\n                throw new Error(\"Client configuration error: Missing anonymous key\");\n            }\n            supabaseInstance = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://mrwitpgbcaxgnirqtavt.supabase.co\", anonKey);\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Created client-side Supabase client with anonymous key\");\n        }\n        return supabaseInstance;\n    }\n};\n/**\n * Get server-only Supabase client with service role\n * CRITICAL: Only use in API routes, never in components\n */ const getServerSupabaseClient = ()=>{\n    if (false) {}\n    if (!supabaseServerInstance) {\n        const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n        if (!serviceKey) {\n            throw new Error(\"SUPABASE_SERVICE_ROLE_KEY not configured\");\n        }\n        supabaseServerInstance = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://mrwitpgbcaxgnirqtavt.supabase.co\", serviceKey, {\n            auth: {\n                autoRefreshToken: false,\n                persistSession: false\n            }\n        });\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Created dedicated server Supabase client\");\n    }\n    return supabaseServerInstance;\n};\n// Test database connection\nconst testSupabaseConnection = async ()=>{\n    try {\n        const client = getSupabaseClient();\n        const { data, error } = await client.from(\"translations\").select(\"*\").limit(1);\n        if (error) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"Supabase connection test failed\", {\n                error: error.message\n            });\n            return false;\n        }\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Supabase connection test successful\");\n        return true;\n    } catch (error) {\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"Supabase connection test error\", {\n            error: error.message\n        });\n        return false;\n    }\n};\n/**\n * Memory-optimized database query wrapper\n */ const executeOptimizedQuery = async (queryFn, queryName = \"unknown\")=>{\n    const startTime = Date.now();\n    connectionPool.activeConnections++;\n    connectionPool.totalQueries++;\n    // Track peak connections for monitoring\n    if (connectionPool.activeConnections > connectionPool.peakConnections) {\n        connectionPool.peakConnections = connectionPool.activeConnections;\n    }\n    try {\n        // Check if we need cleanup\n        if (Date.now() - connectionPool.lastCleanup > 300000) {\n            cleanupConnections();\n        }\n        const result = await queryFn();\n        const duration = Date.now() - startTime;\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(`Optimized query executed: ${queryName}`, {\n            duration: `${duration}ms`,\n            activeConnections: connectionPool.activeConnections,\n            peakConnections: connectionPool.peakConnections\n        });\n        return result;\n    } catch (error) {\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(`Optimized query failed: ${queryName}`, {\n            error: error.message,\n            duration: `${Date.now() - startTime}ms`\n        });\n        throw error;\n    } finally{\n        connectionPool.activeConnections--;\n    }\n};\n/**\n * Clean up connection pool\n */ const cleanupConnections = ()=>{\n    (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Cleaning up Supabase connection pool\", {\n        activeConnections: connectionPool.activeConnections,\n        queueSize: connectionPool.connectionQueue.length\n    });\n    // Reset connection tracking\n    connectionPool.activeConnections = Math.max(0, connectionPool.activeConnections);\n    connectionPool.connectionQueue = connectionPool.connectionQueue.filter((conn)=>Date.now() - conn.created < 300000 // 5 minutes\n    );\n    connectionPool.lastCleanup = Date.now();\n};\n/**\n * Get connection pool statistics\n */ const getConnectionStats = ()=>{\n    return {\n        activeConnections: connectionPool.activeConnections,\n        maxConnections: connectionPool.maxConnections,\n        peakConnections: connectionPool.peakConnections,\n        totalQueries: connectionPool.totalQueries,\n        queueSize: connectionPool.connectionQueue.length,\n        lastCleanup: new Date(connectionPool.lastCleanup).toISOString(),\n        utilizationPercent: Math.round(connectionPool.activeConnections / connectionPool.maxConnections * 100),\n        status: connectionPool.activeConnections < connectionPool.maxConnections * 0.8 ? \"healthy\" : \"high_load\"\n    };\n};\n/**\n * Graceful shutdown - cleanup all connections\n */ const shutdownConnections = ()=>{\n    (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Shutting down all Supabase connections\");\n    supabaseInstance = null;\n    supabaseServerInstance = null;\n    connectionPool.activeConnections = 0;\n    connectionPool.connectionQueue = [];\n    (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"All Supabase connections shut down successfully\");\n};\n// Register shutdown handler\nconst memoryOptimizer = (0,_memory_optimizer_js__WEBPACK_IMPORTED_MODULE_2__.getMemoryOptimizer)();\nmemoryOptimizer.registerCleanup(\"supabase-connections\", shutdownConnections);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getSupabaseClient);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/supabase-client.js\n");

/***/ }),

/***/ "(api)/./pages/api/database-structure-test.js":
/*!**********************************************!*\
  !*** ./pages/api/database-structure-test.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/supabase-client */ \"(api)/./lib/supabase-client.js\");\n/* harmony import */ var _lib_production_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/production-logger */ \"(api)/./lib/production-logger.js\");\n// Test actual database structure and demonstrate volatile/stable concept\n\n\nconst supabase = (0,_lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.getSupabaseClient)();\nasync function handler(req, res) {\n    const startTime = Date.now();\n    (0,_lib_production_logger__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"\\uD83D\\uDD0D Starting database structure test\");\n    try {\n        const results = {};\n        // Test STABLE tables (cache forever - no API calls needed)\n        (0,_lib_production_logger__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"⚓ Testing STABLE data tables...\");\n        // USMCA tariff rates (should be 0% - treaty locked)\n        const { data: usmcaData, error: usmcaError } = await supabase.from(\"usmca_tariff_rates\").select(\"*\").limit(5);\n        (0,_lib_production_logger__WEBPACK_IMPORTED_MODULE_1__.logDBQuery)(\"usmca_tariff_rates\", \"SELECT\", Date.now() - startTime, usmcaData?.length);\n        results.stable = {\n            usmca_tariff_rates: {\n                rows: usmcaData?.length || 0,\n                sample: usmcaData?.[0] || null,\n                strategy: \"Cache forever - treaty-locked rates never change\",\n                apiCallsNeeded: 0,\n                error: usmcaError?.message || null\n            }\n        };\n        // US Ports (infrastructure doesn't move)\n        const { data: portsData } = await supabase.from(\"us_ports\").select(\"*\").limit(3);\n        results.stable.us_ports = {\n            rows: portsData?.length || 0,\n            sample: portsData?.[0] || null,\n            strategy: \"Cache forever - port locations are static\",\n            apiCallsNeeded: 0\n        };\n        // Comtrade reference (institutional intelligence - 15K+ rows!)\n        const { count: comtradeCount } = await supabase.from(\"comtrade_reference\").select(\"*\", {\n            count: \"exact\",\n            head: true\n        });\n        const { data: comtradeSample } = await supabase.from(\"comtrade_reference\").select(\"*\").limit(2);\n        results.stable.comtrade_reference = {\n            totalRows: comtradeCount || 0,\n            sample: comtradeSample?.[0] || null,\n            strategy: \"Massive institutional intelligence - cache forever\",\n            apiCallsNeeded: 0,\n            value: `${(comtradeCount || 0).toLocaleString()} HS code intelligence records`\n        };\n        // Trade flows (597K+ records)\n        const { count: tradeFlowCount } = await supabase.from(\"trade_flows\").select(\"*\", {\n            count: \"exact\",\n            head: true\n        });\n        const { data: tradeFlowSample } = await supabase.from(\"trade_flows\").select(\"*\").limit(2);\n        results.stable.trade_flows = {\n            totalRows: tradeFlowCount || 0,\n            sample: tradeFlowSample?.[0] || null,\n            strategy: \"Massive bilateral trade intelligence - cache forever\",\n            apiCallsNeeded: 0,\n            value: `${(tradeFlowCount || 0).toLocaleString()} trade flow records`\n        };\n        // Test VOLATILE tables (update with API calls)\n        (0,_lib_production_logger__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"\\uD83D\\uDD25 Testing VOLATILE data tables...\");\n        // Current market alerts (changes daily)\n        const { data: alertsData } = await supabase.from(\"current_market_alerts\").select(\"*\").limit(5);\n        results.volatile = {\n            current_market_alerts: {\n                rows: alertsData?.length || 0,\n                sample: alertsData?.[0] || null,\n                strategy: \"Update daily with market changes\",\n                apiCallsNeeded: \"Yes - when tariffs change\"\n            }\n        };\n        // API cache (stores volatile API responses)\n        const { data: cacheData } = await supabase.from(\"api_cache\").select(\"*\").limit(3);\n        results.volatile.api_cache = {\n            rows: cacheData?.length || 0,\n            sample: cacheData?.[0] || null,\n            strategy: \"Cache API responses 1-4 hours\",\n            apiCallsNeeded: \"Yes - when cache expires\"\n        };\n        // Workflow sessions (learning intelligence)\n        const { data: sessionsData } = await supabase.from(\"workflow_sessions\").select(\"*\").limit(2);\n        results.institutional = {\n            workflow_sessions: {\n                rows: sessionsData?.length || 0,\n                sample: sessionsData?.[0] || null,\n                strategy: \"Institutional learning - grows over time\",\n                value: \"240+ user sessions for pattern recognition\"\n            }\n        };\n        // Countries and translations\n        const { count: countriesCount } = await supabase.from(\"countries\").select(\"*\", {\n            count: \"exact\",\n            head: true\n        });\n        const { count: translationsCount } = await supabase.from(\"translations\").select(\"*\", {\n            count: \"exact\",\n            head: true\n        });\n        results.stable.countries = {\n            rows: countriesCount || 0,\n            strategy: \"Geographic data - cache forever\"\n        };\n        results.stable.translations = {\n            rows: translationsCount || 0,\n            strategy: \"Trilingual support (EN/ES/FR) - cache forever\"\n        };\n        // Summary of strategy\n        results.strategy = {\n            stable: {\n                description: \"Query these tables directly - never expires, no API calls\",\n                tables: [\n                    \"usmca_tariff_rates\",\n                    \"us_ports\",\n                    \"comtrade_reference\",\n                    \"trade_flows\",\n                    \"countries\",\n                    \"translations\"\n                ],\n                benefit: \"Instant responses, zero API costs\",\n                cacheTime: \"FOREVER\"\n            },\n            volatile: {\n                description: \"Update these with fresh API data per user\",\n                tables: [\n                    \"current_market_alerts\",\n                    \"api_cache\",\n                    \"country_risk_scores\"\n                ],\n                benefit: \"Real-time market intelligence\",\n                cacheTime: \"1-4 hours depending on volatility\"\n            },\n            efficiency: {\n                apiCallsSaved: \"80%+\",\n                costReduction: \"Significant - most data from stable tables\",\n                speedImprovement: \"Instant responses for stable data\"\n            }\n        };\n        const totalTime = Date.now() - startTime;\n        (0,_lib_production_logger__WEBPACK_IMPORTED_MODULE_1__.logInfo)(`✅ DATABASE STRUCTURE TEST COMPLETE - ${totalTime}ms`);\n        (0,_lib_production_logger__WEBPACK_IMPORTED_MODULE_1__.logInfo)(`📊 Stable tables tested: ${Object.keys(results.stable).length}`);\n        (0,_lib_production_logger__WEBPACK_IMPORTED_MODULE_1__.logInfo)(`🔥 Volatile tables tested: ${Object.keys(results.volatile).length}`);\n        (0,_lib_production_logger__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"⚡ Strategy: Perfect separation achieved!\");\n        res.status(200).json(results);\n    } catch (error) {\n        (0,_lib_production_logger__WEBPACK_IMPORTED_MODULE_1__.logError)(\"❌ DATABASE STRUCTURE TEST FAILED\", {\n            error\n        });\n        res.status(500).json({\n            error: \"Database test failed\",\n            message: error.message,\n            suggestion: \"Check Supabase connection and table permissions\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/database-structure-test.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdatabase-structure-test&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdatabase-structure-test.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();