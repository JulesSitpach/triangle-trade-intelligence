"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/infrastructure-test";
exports.ids = ["pages/api/infrastructure-test"];
exports.modules = {

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "ioredis":
/*!**************************!*\
  !*** external "ioredis" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("ioredis");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

module.exports = require("react");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Finfrastructure-test&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Finfrastructure-test.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Finfrastructure-test&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Finfrastructure-test.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_infrastructure_test_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/infrastructure-test.js */ \"(api)/./pages/api/infrastructure-test.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_infrastructure_test_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_infrastructure_test_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/infrastructure-test\",\n        pathname: \"/api/infrastructure-test\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_infrastructure_test_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmluZnJhc3RydWN0dXJlLXRlc3QmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRmluZnJhc3RydWN0dXJlLXRlc3QuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDK0Q7QUFDL0Q7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLDhEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyw4REFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cmlhbmdsZS1pbnRlbGxpZ2VuY2UtcGxhdGZvcm0vPzgwMTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS9pbmZyYXN0cnVjdHVyZS10ZXN0LmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvaW5mcmFzdHJ1Y3R1cmUtdGVzdFwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2luZnJhc3RydWN0dXJlLXRlc3RcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Finfrastructure-test&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Finfrastructure-test.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/database/query-optimizer.js":
/*!*****************************************!*\
  !*** ./lib/database/query-optimizer.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryOptimizer: () => (/* binding */ QueryOptimizer),\n/* harmony export */   SpecializedQueries: () => (/* binding */ SpecializedQueries),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   queryOptimizer: () => (/* binding */ queryOptimizer)\n/* harmony export */ });\n/* harmony import */ var _supabase_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../supabase-client.js */ \"(api)/./lib/supabase-client.js\");\n/* harmony import */ var _utils_memory_cache_fallback_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/memory-cache-fallback.js */ \"(api)/./lib/utils/memory-cache-fallback.js\");\n/* harmony import */ var _utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/production-logger.js */ \"(api)/./lib/utils/production-logger.js\");\n/**\n * Query Optimizer for Triangle Intelligence Platform\n * Reduces response times from 4.9s to <1s through intelligent caching and query optimization\n * Critical for production readiness and scalability\n */ \n\n\nconst supabase = (0,_supabase_client_js__WEBPACK_IMPORTED_MODULE_0__.getSupabaseClient)();\n/**\n * High-Performance Query Optimizer\n * Implements multiple optimization strategies:\n * 1. Intelligent caching with TTL\n * 2. Query result batching\n * 3. Selective field loading\n * 4. Connection pooling awareness\n */ class QueryOptimizer {\n    constructor(){\n        this.queryCache = new Map();\n        this.batchQueue = new Map();\n        this.batchTimeout = 50 // 50ms batching window\n        ;\n        this.defaultCacheTTL = 300 // 5 minutes for database queries\n        ;\n        (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)(\"QueryOptimizer initialized with aggressive caching\");\n    }\n    /**\n   * Optimized triangle routing query\n   * Target: <500ms response time\n   */ async getTriangleRoutingData(params) {\n        const startTime = Date.now();\n        const { origin, destination, hsCode, businessType } = params;\n        // Create cache key for this specific query\n        const cacheKey = `triangle_routing:${origin}:${destination}:${hsCode}:${businessType}`;\n        // Try cache first\n        const cached = await _utils_memory_cache_fallback_js__WEBPACK_IMPORTED_MODULE_1__.universalCache.get(cacheKey);\n        if (cached) {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logPerformance)(\"triangle_routing_query\", Date.now() - startTime, {\n                source: \"CACHE_HIT\",\n                origin,\n                destination,\n                recordsFound: cached.totalRecords || 0\n            });\n            return cached;\n        }\n        try {\n            // Optimized queries with selective field loading\n            const [tradeFlowsResult, triangleOpportunities] = await Promise.all([\n                this.getOptimizedTradeFlows(origin, destination, hsCode),\n                this.getTriangleOpportunities(origin, destination)\n            ]);\n            const result = {\n                direct: tradeFlowsResult,\n                triangleOptions: triangleOpportunities,\n                analysis: {\n                    confidence: this.calculateConfidence(tradeFlowsResult, triangleOpportunities),\n                    dataQuality: \"High - Optimized queries\",\n                    recommendTriangle: triangleOpportunities.length > 0\n                },\n                efficiency: {\n                    apiCallsMade: 0,\n                    allFromDatabase: true,\n                    responseTime: Date.now() - startTime,\n                    optimized: true\n                },\n                totalRecords: tradeFlowsResult.flow?.totalRecords || 0\n            };\n            // Cache the result with shorter TTL for dynamic data\n            await _utils_memory_cache_fallback_js__WEBPACK_IMPORTED_MODULE_1__.universalCache.set(cacheKey, result, this.defaultCacheTTL);\n            const duration = Date.now() - startTime;\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logPerformance)(\"triangle_routing_query\", duration, {\n                source: \"DATABASE_OPTIMIZED\",\n                origin,\n                destination,\n                recordsFound: result.totalRecords,\n                triangleRoutes: triangleOpportunities.length\n            });\n            // Alert if query is still slow\n            if (duration > 1000) {\n                (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(\"Slow triangle routing query detected\", {\n                    duration,\n                    params,\n                    recordsAnalyzed: result.totalRecords\n                });\n            }\n            return result;\n        } catch (error) {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logError)(\"Triangle routing query failed\", {\n                error: error.message,\n                params,\n                duration: Date.now() - startTime\n            });\n            throw error;\n        }\n    }\n    /**\n   * Optimized trade flows query with intelligent field selection\n   */ async getOptimizedTradeFlows(origin, destination, hsCode) {\n        const startTime = Date.now();\n        // Only select essential fields to reduce data transfer (using correct column names)\n        const essentialFields = [\n            \"id\",\n            \"reporter_country\",\n            \"partner_country\",\n            \"hs_code\",\n            \"trade_flow\",\n            \"trade_value\",\n            \"quantity\"\n        ].join(\",\");\n        // Build optimized query with indexes\n        let query = supabase.from(\"trade_flows\").select(essentialFields);\n        // Add filters in order of database indexes (using correct column names)\n        if (origin && origin !== \"ALL\") {\n            query = query.eq(\"partner_country\", origin === \"CN\" ? \"China\" : origin === \"KR\" ? \"South Korea\" : origin === \"JP\" ? \"Japan\" : origin);\n        }\n        if (destination && destination !== \"ALL\") {\n            query = query.eq(\"reporter_country\", destination === \"US\" || destination === \"USA\" ? \"United States\" : destination);\n        }\n        if (hsCode && hsCode !== \"ALL\") {\n            // Use prefix matching for HS codes to utilize index\n            const hsPrefix = hsCode.substring(0, 4);\n            query = query.like(\"hs_code\", `${hsPrefix}%`);\n        }\n        // Limit results to prevent memory issues\n        query = query.limit(1000);\n        const { data, error } = await query;\n        const duration = Date.now() - startTime;\n        (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logDBQuery)(\"trade_flows\", \"SELECT_OPTIMIZED\", duration, data?.length);\n        if (error) {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logError)(\"Optimized trade flows query failed\", {\n                error,\n                origin,\n                destination,\n                hsCode\n            });\n            throw error;\n        }\n        return {\n            flow: {\n                records: data || [],\n                totalRecords: data?.length || 0\n            }\n        };\n    }\n    /**\n   * Fast triangle opportunities query\n   */ async getTriangleOpportunities(origin, destination) {\n        const startTime = Date.now();\n        // Hardcoded high-performance triangle routes for common scenarios\n        const commonTriangleRoutes = this.getCommonTriangleRoutes(origin, destination);\n        if (commonTriangleRoutes.length > 0) {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logPerformance)(\"triangle_opportunities\", Date.now() - startTime, {\n                source: \"STATIC_ROUTES\",\n                routesFound: commonTriangleRoutes.length\n            });\n            return commonTriangleRoutes;\n        }\n        // Dynamic query for uncommon routes\n        const triangleRoutes = [];\n        // Mexico route (most common)\n        if (![\n            \"MX\",\n            \"US\",\n            \"CA\"\n        ].includes(origin)) {\n            triangleRoutes.push({\n                route: `${origin} → Mexico → USA`,\n                usmcaTariff: 0,\n                leg1: [],\n                leg2: [],\n                savings: \"High\",\n                complexity: 2\n            });\n        }\n        // Canada route  \n        if (![\n            \"CA\",\n            \"US\"\n        ].includes(origin) && [\n            \"US\",\n            \"USA\"\n        ].includes(destination)) {\n            triangleRoutes.push({\n                route: `${origin} → Canada → USA`,\n                usmcaTariff: 0,\n                leg1: [],\n                leg2: [],\n                savings: \"Medium\",\n                complexity: 2\n            });\n        }\n        const duration = Date.now() - startTime;\n        (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logPerformance)(\"triangle_opportunities\", duration, {\n            source: \"DYNAMIC_ROUTES\",\n            routesFound: triangleRoutes.length\n        });\n        return triangleRoutes;\n    }\n    /**\n   * Pre-computed common triangle routes for instant response\n   */ getCommonTriangleRoutes(origin, destination) {\n        const routes = [];\n        // High-volume country pairs get pre-computed routes\n        const highVolumeOrigins = [\n            \"CN\",\n            \"VN\",\n            \"TW\",\n            \"KR\",\n            \"IN\",\n            \"TH\",\n            \"MY\",\n            \"JP\"\n        ];\n        if (highVolumeOrigins.includes(origin) && [\n            \"US\",\n            \"USA\"\n        ].includes(destination)) {\n            routes.push({\n                route: `${origin} → Mexico → USA`,\n                usmcaTariff: 0,\n                leg1: [],\n                leg2: [],\n                savings: \"High - 0% USMCA tariffs\",\n                complexity: 2,\n                precomputed: true\n            });\n            routes.push({\n                route: `${origin} → Canada → USA`,\n                usmcaTariff: 0,\n                leg1: [],\n                leg2: [],\n                savings: \"Medium - 0% USMCA tariffs\",\n                complexity: 2,\n                precomputed: true\n            });\n        }\n        return routes;\n    }\n    /**\n   * Calculate confidence score based on data availability\n   */ calculateConfidence(tradeFlowsResult, triangleOpportunities) {\n        let confidence = 50 // Base confidence\n        ;\n        const recordCount = tradeFlowsResult.flow?.totalRecords || 0;\n        // Boost confidence based on data availability\n        if (recordCount > 100) confidence += 20;\n        else if (recordCount > 10) confidence += 10;\n        // Boost for triangle route availability\n        if (triangleOpportunities.length > 0) confidence += 20;\n        // Cap at reasonable maximum\n        return Math.min(confidence, 95);\n    }\n    /**\n   * Clear cache for specific query patterns\n   */ async clearCache(pattern = null) {\n        if (pattern) {\n            // Clear specific pattern - implementation depends on cache backend\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)(\"Clearing cache for pattern\", {\n                pattern\n            });\n        } else {\n            this.queryCache.clear();\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)(\"Query cache cleared completely\");\n        }\n    }\n    /**\n   * Get optimization statistics\n   */ getStats() {\n        return {\n            cacheSize: this.queryCache.size,\n            batchQueueSize: this.batchQueue.size,\n            optimizationsActive: true,\n            cacheHitRate: \"Tracked by UniversalCache\"\n        };\n    }\n}\n/**\n * Specific optimizations for different query types\n */ class SpecializedQueries {\n    /**\n   * Lightning-fast HS code lookup (target: <100ms)\n   */ static async getHSCodeInfo(hsCode) {\n        const startTime = Date.now();\n        const cacheKey = `hs_code:${hsCode}`;\n        const cached = await _utils_memory_cache_fallback_js__WEBPACK_IMPORTED_MODULE_1__.universalCache.get(cacheKey);\n        if (cached) {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logPerformance)(\"hs_code_lookup\", Date.now() - startTime, {\n                source: \"CACHE\",\n                hsCode\n            });\n            return cached;\n        }\n        const { data, error } = await supabase.from(\"comtrade_reference\").select(\"classification_code, text\").eq(\"classification_code\", hsCode).limit(1);\n        if (error) throw error;\n        const result = {\n            hsCode,\n            description: data?.[0]?.text || \"Description not found\",\n            found: data?.length > 0\n        };\n        // Cache HS codes for 24 hours (they rarely change)\n        await _utils_memory_cache_fallback_js__WEBPACK_IMPORTED_MODULE_1__.universalCache.set(cacheKey, result, 86400);\n        (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_2__.logPerformance)(\"hs_code_lookup\", Date.now() - startTime, {\n            source: \"DATABASE\",\n            hsCode,\n            found: result.found\n        });\n        return result;\n    }\n    /**\n   * Fast country information lookup\n   */ static async getCountryInfo(countryCode) {\n        const cacheKey = `country:${countryCode}`;\n        const cached = await _utils_memory_cache_fallback_js__WEBPACK_IMPORTED_MODULE_1__.universalCache.get(cacheKey);\n        if (cached) return cached;\n        const { data, error } = await supabase.from(\"countries\").select(\"iso_alpha2, country_name_en, region\").eq(\"iso_alpha2\", countryCode).limit(1);\n        if (error) throw error;\n        const result = {\n            code: countryCode,\n            name: data?.[0]?.country_name_en || countryCode,\n            region: data?.[0]?.region || \"Unknown\",\n            found: data?.length > 0\n        };\n        // Cache country data for 24 hours\n        await _utils_memory_cache_fallback_js__WEBPACK_IMPORTED_MODULE_1__.universalCache.set(cacheKey, result, 86400);\n        return result;\n    }\n}\n// Export singleton optimizer instance\nconst queryOptimizer = new QueryOptimizer();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (queryOptimizer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/database/query-optimizer.js\n");

/***/ }),

/***/ "(api)/./lib/environment-validation.js":
/*!***************************************!*\
  !*** ./lib/environment-validation.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnvVar: () => (/* binding */ getEnvVar),\n/* harmony export */   getSecurityStatus: () => (/* binding */ getSecurityStatus),\n/* harmony export */   getSupabaseConfig: () => (/* binding */ getSupabaseConfig),\n/* harmony export */   isDevelopment: () => (/* binding */ isDevelopment),\n/* harmony export */   isProduction: () => (/* binding */ isProduction),\n/* harmony export */   safeLog: () => (/* binding */ safeLog),\n/* harmony export */   validateAPIKeysSecurity: () => (/* binding */ validateAPIKeysSecurity),\n/* harmony export */   validateEnvironment: () => (/* binding */ validateEnvironment),\n/* harmony export */   validateSecretSecurity: () => (/* binding */ validateSecretSecurity)\n/* harmony export */ });\n/**\n * Environment Variable Validation and Configuration\n * Centralized validation for production readiness\n */ // Required environment variables for production\n// Split by client/server because client can't see server-only vars\nconst CLIENT_REQUIRED_ENV_VARS = [\n    \"NEXT_PUBLIC_SUPABASE_URL\",\n    \"NEXT_PUBLIC_SUPABASE_ANON_KEY\"\n];\nconst SERVER_REQUIRED_ENV_VARS = [\n    \"NEXT_PUBLIC_SUPABASE_URL\",\n    \"NEXT_PUBLIC_SUPABASE_ANON_KEY\",\n    \"SUPABASE_SERVICE_ROLE_KEY\",\n    \"JWT_SECRET\",\n    \"NEXTAUTH_SECRET\"\n];\nconst SERVER_RECOMMENDED_ENV_VARS = [\n    \"ANTHROPIC_API_KEY\",\n    \"COMTRADE_API_KEY\",\n    \"SHIPPO_API_KEY\",\n    \"STRIPE_SECRET_KEY\"\n];\n// Optional environment variables with defaults\nconst OPTIONAL_ENV_VARS = {\n    NODE_ENV: \"development\",\n    NEXT_PUBLIC_APP_URL: \"http://localhost:3000\"\n};\n/**\n * Validate all required environment variables are present\n * @throws {Error} If any required variable is missing\n */ function validateEnvironment() {\n    // Skip validation entirely on client-side to avoid errors\n    if (false) {}\n    // Server-side validation\n    const missing = SERVER_REQUIRED_ENV_VARS.filter((key)=>!process.env[key]);\n    if (missing.length > 0) {\n        throw new Error(`Missing required server-side environment variables: ${missing.join(\", \")}`);\n    }\n    // Note: Using console.log here as this runs before logger is initialized\n    console.log(\"✅ All required environment variables are present\");\n}\n/**\n * Get environment variable with validation\n * @param {string} key - Environment variable key\n * @param {boolean} required - Whether the variable is required\n * @returns {string} Environment variable value\n */ function getEnvVar(key, required = true) {\n    const value = process.env[key];\n    if (required && !value) {\n        throw new Error(`Missing required environment variable: ${key}`);\n    }\n    return value || OPTIONAL_ENV_VARS[key];\n}\n/**\n * Check if running in production\n */ function isProduction() {\n    return \"development\" === \"production\";\n}\n/**\n * Check if running in development\n */ function isDevelopment() {\n    return \"development\" === \"development\";\n}\n/**\n * Safe logging that respects environment\n * Only logs in development unless force is true\n */ function safeLog(message, data = null, force = false) {\n    if (isDevelopment() || force) {\n        if (data) {\n            // Note: Using console.log here as this is used for bootstrap logging\n            console.log(message, data);\n        } else {\n            console.log(message);\n        }\n    }\n}\n/**\n * Get Supabase configuration based on environment\n */ function getSupabaseConfig() {\n    const url = getEnvVar(\"NEXT_PUBLIC_SUPABASE_URL\");\n    // Use service role key on server, anon key on client\n    const key =  false ? 0 : getEnvVar(\"SUPABASE_SERVICE_ROLE_KEY\", false) || getEnvVar(\"NEXT_PUBLIC_SUPABASE_ANON_KEY\");\n    return {\n        url,\n        key\n    };\n}\n/**\n * Validate API keys are not exposed and check for security issues\n */ function validateAPIKeysSecurity() {\n    const sensitiveKeys = [\n        \"SUPABASE_SERVICE_ROLE_KEY\",\n        \"ANTHROPIC_API_KEY\",\n        \"STRIPE_SECRET_KEY\",\n        \"COMTRADE_API_KEY\",\n        \"SHIPPO_API_KEY\",\n        \"JWT_SECRET\",\n        \"NEXTAUTH_SECRET\",\n        \"ENTERPRISE_MASTER_KEY\"\n    ];\n    if (false) {}\n}\n/**\n * Check for dangerous default/template values\n */ function validateSecretSecurity() {\n    const dangerousPatterns = [\n        {\n            key: \"JWT_SECRET\",\n            patterns: [\n                \"your-super-secure\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"NEXTAUTH_SECRET\",\n            patterns: [\n                \"your-nextauth-secret\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"ENTERPRISE_MASTER_KEY\",\n            patterns: [\n                \"triangle-intelligence-enterprise\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"ANTHROPIC_API_KEY\",\n            patterns: [\n                \"your-key-here\",\n                \"REPLACE_WITH\"\n            ]\n        }\n    ];\n    const warnings = [];\n    dangerousPatterns.forEach(({ key, patterns })=>{\n        if (process.env[key]) {\n            patterns.forEach((pattern)=>{\n                if (process.env[key].includes(pattern)) {\n                    warnings.push(`${key} appears to use default/template value`);\n                }\n            });\n        }\n    });\n    // Check secret strength\n    if (process.env.JWT_SECRET && process.env.JWT_SECRET.length < 32) {\n        warnings.push(\"JWT_SECRET is too short (minimum 32 characters)\");\n    }\n    return warnings;\n}\n/**\n * Get comprehensive security status\n */ function getSecurityStatus() {\n    const warnings = validateSecretSecurity();\n    const requiredMissing = SERVER_REQUIRED_ENV_VARS.filter((key)=>!process.env[key]);\n    const recommendedMissing = SERVER_RECOMMENDED_ENV_VARS.filter((key)=>!process.env[key]);\n    return {\n        status: requiredMissing.length === 0 && warnings.length === 0 ? \"secure\" : \"needs_attention\",\n        requiredMissing,\n        recommendedMissing,\n        securityWarnings: warnings,\n        lastChecked: new Date().toISOString()\n    };\n}\n// Auto-validate on import in development (SERVER-SIDE ONLY)\nif (isDevelopment() && \"undefined\" === \"undefined\") {\n    try {\n        validateEnvironment();\n        validateAPIKeysSecurity();\n    } catch (error) {\n        // Note: Using console.error here as this is critical bootstrap error\n        console.error(\"❌ Environment validation failed:\", error.message);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/environment-validation.js\n");

/***/ }),

/***/ "(api)/./lib/memory-optimizer.js":
/*!*********************************!*\
  !*** ./lib/memory-optimizer.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getMemoryOptimizer: () => (/* binding */ getMemoryOptimizer),\n/* harmony export */   memoryOptimizedAPICall: () => (/* binding */ memoryOptimizedAPICall),\n/* harmony export */   useMemoryOptimizedEffect: () => (/* binding */ useMemoryOptimizedEffect)\n/* harmony export */ });\n/* harmony import */ var _production_logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./production-logger.js */ \"(api)/./lib/production-logger.js\");\n/**\n * 🧠 MEMORY OPTIMIZER - PRODUCTION MEMORY MANAGEMENT\n * \n * Comprehensive memory management system for Triangle Intelligence Platform\n * Eliminates memory leaks while maintaining 30-second real-time updates\n * \n * KEY FEATURES:\n * ✅ Process event listener cleanup\n * ✅ React component unmount handlers  \n * ✅ API call cancellation with AbortController\n * ✅ RSS monitoring cleanup\n * ✅ Beast Master resource management\n * ✅ Database connection pooling optimization\n * ✅ Automatic memory pressure detection\n */ \nclass MemoryOptimizer {\n    constructor(){\n        this.cleanupHandlers = new Map();\n        this.intervalCleanup = new Map();\n        this.timeoutCleanup = new Map();\n        this.eventListeners = new Map();\n        this.abortControllers = new Set();\n        this.memoryPressureThreshold = 100 * 1024 * 1024; // 100MB\n        this.gcThreshold = 150 * 1024 * 1024; // 150MB\n        this.isInitialized = false;\n        this.initializeMemoryMonitoring();\n    }\n    /**\n   * Initialize memory monitoring and cleanup systems\n   */ initializeMemoryMonitoring() {\n        if (this.isInitialized) return;\n        // Only run in server environment\n        if (typeof process === \"undefined\" || \"undefined\" !== \"undefined\") {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory Optimizer: Browser environment detected, limited functionality enabled\");\n            this.isInitialized = true;\n            return;\n        }\n        // Monitor memory usage every 30 seconds (aligned with dashboard updates)\n        const memoryMonitor = setInterval(()=>{\n            this.checkMemoryPressure();\n        }, 30000);\n        this.registerCleanup(\"memoryMonitor\", ()=>clearInterval(memoryMonitor));\n        // Process cleanup handlers\n        const processCleanup = ()=>{\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory Optimizer: Initiating graceful shutdown\");\n            this.performGlobalCleanup();\n            process.exit(0);\n        };\n        // Register process event listeners with proper cleanup\n        process.removeAllListeners(\"SIGTERM\");\n        process.removeAllListeners(\"SIGINT\");\n        process.removeAllListeners(\"uncaughtException\");\n        process.removeAllListeners(\"unhandledRejection\");\n        process.once(\"SIGTERM\", processCleanup);\n        process.once(\"SIGINT\", processCleanup);\n        process.on(\"uncaughtException\", (error)=>{\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logError)(\"Uncaught Exception - initiating cleanup\", {\n                error: error.message\n            });\n            this.performGlobalCleanup();\n            process.exit(1);\n        });\n        process.on(\"unhandledRejection\", (reason, promise)=>{\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logError)(\"Unhandled Promise Rejection - cleaning up\", {\n                reason: reason?.message || reason,\n                stack: reason?.stack\n            });\n        });\n        this.isInitialized = true;\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory Optimizer initialized successfully\");\n    }\n    /**\n   * Register cleanup handler for a specific resource\n   */ registerCleanup(id, cleanupFunction) {\n        if (this.cleanupHandlers.has(id)) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(`Cleanup handler already registered for: ${id}`);\n            this.cleanupHandlers.get(id)(); // Clean up old one first\n        }\n        this.cleanupHandlers.set(id, cleanupFunction);\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(`Registered cleanup handler: ${id}`);\n    }\n    /**\n   * Register interval with automatic cleanup\n   */ registerInterval(id, intervalId) {\n        if (this.intervalCleanup.has(id)) {\n            clearInterval(this.intervalCleanup.get(id));\n        }\n        this.intervalCleanup.set(id, intervalId);\n        // Auto-cleanup after 10 minutes to prevent accumulation\n        setTimeout(()=>{\n            if (this.intervalCleanup.has(id)) {\n                clearInterval(this.intervalCleanup.get(id));\n                this.intervalCleanup.delete(id);\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(`Auto-cleaned interval: ${id}`);\n            }\n        }, 600000); // 10 minutes\n    }\n    /**\n   * Register timeout with automatic cleanup\n   */ registerTimeout(id, timeoutId) {\n        if (this.timeoutCleanup.has(id)) {\n            clearTimeout(this.timeoutCleanup.get(id));\n        }\n        this.timeoutCleanup.set(id, timeoutId);\n    }\n    /**\n   * Create and register AbortController for API calls\n   */ createAbortController(timeoutMs = 30000) {\n        const controller = new AbortController();\n        this.abortControllers.add(controller);\n        // Auto-abort after timeout to prevent hanging requests\n        const timeoutId = setTimeout(()=>{\n            if (!controller.signal.aborted) {\n                controller.abort();\n                this.abortControllers.delete(controller);\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Auto-aborted API request due to timeout\");\n            }\n        }, timeoutMs);\n        // Clean up timeout when controller is aborted\n        controller.signal.addEventListener(\"abort\", ()=>{\n            clearTimeout(timeoutId);\n            this.abortControllers.delete(controller);\n        });\n        return controller;\n    }\n    /**\n   * React useEffect cleanup helper\n   */ createReactCleanup() {\n        const cleanupFunctions = [];\n        return {\n            register: (cleanupFn)=>{\n                cleanupFunctions.push(cleanupFn);\n            },\n            cleanup: ()=>{\n                cleanupFunctions.forEach((fn, index)=>{\n                    try {\n                        fn();\n                    } catch (error) {\n                        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logError)(`React cleanup function ${index} failed`, {\n                            error: error.message\n                        });\n                    }\n                });\n                cleanupFunctions.length = 0;\n            }\n        };\n    }\n    /**\n   * Check memory pressure and trigger cleanup if needed\n   */ checkMemoryPressure() {\n        // Only run memory checks in server environment\n        if (typeof process === \"undefined\" || \"undefined\" !== \"undefined\") {\n            return;\n        }\n        const memUsage = process.memoryUsage();\n        const heapUsed = memUsage.heapUsed;\n        const external = memUsage.external;\n        const totalMemory = heapUsed + external;\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory usage check\", {\n            heapUsed: Math.round(heapUsed / 1024 / 1024) + \"MB\",\n            external: Math.round(external / 1024 / 1024) + \"MB\",\n            total: Math.round(totalMemory / 1024 / 1024) + \"MB\"\n        });\n        // Trigger cleanup if memory usage is high\n        if (totalMemory > this.memoryPressureThreshold) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(\"Memory pressure detected, triggering cleanup\", {\n                memoryMB: Math.round(totalMemory / 1024 / 1024)\n            });\n            this.performMemoryCleanup();\n        }\n        // Force garbage collection if memory is very high\n        if (totalMemory > this.gcThreshold && global.gc) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(\"High memory usage, forcing garbage collection\");\n            global.gc();\n        }\n    }\n    /**\n   * Perform memory cleanup operations\n   */ performMemoryCleanup() {\n        let cleaned = 0;\n        // Clean up old intervals (older than 5 minutes)\n        const now = Date.now();\n        for (const [id, data] of this.intervalCleanup.entries()){\n            if (typeof data === \"object\" && data.timestamp && now - data.timestamp > 300000) {\n                clearInterval(data.intervalId);\n                this.intervalCleanup.delete(id);\n                cleaned++;\n            }\n        }\n        // Clean up old timeouts\n        for (const [id, timeoutId] of this.timeoutCleanup.entries()){\n            clearTimeout(timeoutId);\n            this.timeoutCleanup.delete(id);\n            cleaned++;\n        }\n        // Abort old API requests\n        for (const controller of this.abortControllers){\n            if (!controller.signal.aborted) {\n                controller.abort();\n                cleaned++;\n            }\n        }\n        this.abortControllers.clear();\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(`Memory cleanup completed, cleaned ${cleaned} resources`);\n    }\n    /**\n   * Perform global cleanup on shutdown\n   */ performGlobalCleanup() {\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Performing global cleanup\");\n        // Run all registered cleanup handlers\n        for (const [id, cleanupFn] of this.cleanupHandlers.entries()){\n            try {\n                cleanupFn();\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(`Cleaned up: ${id}`);\n            } catch (error) {\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logError)(`Cleanup failed for: ${id}`, {\n                    error: error.message\n                });\n            }\n        }\n        // Clear all intervals and timeouts\n        for (const intervalId of this.intervalCleanup.values()){\n            clearInterval(typeof intervalId === \"object\" ? intervalId.intervalId : intervalId);\n        }\n        for (const timeoutId of this.timeoutCleanup.values()){\n            clearTimeout(timeoutId);\n        }\n        // Abort all pending requests\n        for (const controller of this.abortControllers){\n            controller.abort();\n        }\n        // Clear maps\n        this.cleanupHandlers.clear();\n        this.intervalCleanup.clear();\n        this.timeoutCleanup.clear();\n        this.abortControllers.clear();\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Global cleanup completed\");\n    }\n    /**\n   * Get memory statistics\n   */ getMemoryStats() {\n        if (typeof process === \"undefined\" || \"undefined\" !== \"undefined\") {\n            return {\n                available: false,\n                environment: \"browser\",\n                cleanupHandlers: this.cleanupHandlers.size,\n                activeIntervals: this.intervalCleanup.size,\n                activeTimeouts: this.timeoutCleanup.size,\n                activeRequests: this.abortControllers.size\n            };\n        }\n        const memUsage = process.memoryUsage();\n        return {\n            available: true,\n            environment: \"server\",\n            heap: {\n                used: Math.round(memUsage.heapUsed / 1024 / 1024),\n                total: Math.round(memUsage.heapTotal / 1024 / 1024)\n            },\n            external: Math.round(memUsage.external / 1024 / 1024),\n            cleanupHandlers: this.cleanupHandlers.size,\n            activeIntervals: this.intervalCleanup.size,\n            activeTimeouts: this.timeoutCleanup.size,\n            activeRequests: this.abortControllers.size\n        };\n    }\n}\n// Global singleton instance\nlet memoryOptimizer = null;\nfunction getMemoryOptimizer() {\n    if (!memoryOptimizer) {\n        memoryOptimizer = new MemoryOptimizer();\n    }\n    return memoryOptimizer;\n}\n// React hook for memory-optimized effects\nfunction useMemoryOptimizedEffect(effect, deps) {\n    const React = __webpack_require__(/*! react */ \"react\");\n    React.useEffect(()=>{\n        const optimizer = getMemoryOptimizer();\n        const reactCleanup = optimizer.createReactCleanup();\n        const cleanup = effect(reactCleanup.register);\n        return ()=>{\n            reactCleanup.cleanup();\n            if (cleanup) cleanup();\n        };\n    }, deps);\n}\n// API call helper with automatic cleanup\nasync function memoryOptimizedAPICall(url, options = {}, timeoutMs = 30000) {\n    const optimizer = getMemoryOptimizer();\n    const controller = optimizer.createAbortController(timeoutMs);\n    try {\n        const response = await fetch(url, {\n            ...options,\n            signal: controller.signal\n        });\n        return response;\n    } catch (error) {\n        if (error.name === \"AbortError\") {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(\"API call was aborted\", {\n                url\n            });\n            throw new Error(\"Request timeout\");\n        }\n        throw error;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getMemoryOptimizer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/memory-optimizer.js\n");

/***/ }),

/***/ "(api)/./lib/production-logger.js":
/*!**********************************!*\
  !*** ./lib/production-logger.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   logAPICall: () => (/* binding */ logAPICall),\n/* harmony export */   logBusiness: () => (/* binding */ logBusiness),\n/* harmony export */   logDBQuery: () => (/* binding */ logDBQuery),\n/* harmony export */   logDebug: () => (/* binding */ logDebug),\n/* harmony export */   logError: () => (/* binding */ logError),\n/* harmony export */   logInfo: () => (/* binding */ logInfo),\n/* harmony export */   logPerformance: () => (/* binding */ logPerformance),\n/* harmony export */   logSecurity: () => (/* binding */ logSecurity),\n/* harmony export */   logWarn: () => (/* binding */ logWarn),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _environment_validation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment-validation.js */ \"(api)/./lib/environment-validation.js\");\n/**\n * Production-Safe Logging System\n * Handles logging with environment awareness and security\n */ \n// Log levels\nconst LOG_LEVELS = {\n    ERROR: 0,\n    WARN: 1,\n    INFO: 2,\n    DEBUG: 3,\n    TRACE: 4\n};\nclass ProductionLogger {\n    constructor(){\n        this.level = (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? LOG_LEVELS.WARN : LOG_LEVELS.DEBUG;\n        this.sensitivePatterns = [\n            /sk-[a-zA-Z0-9_-]+/,\n            /pk_[a-zA-Z0-9_-]+/,\n            /eyJ[a-zA-Z0-9_-]+/,\n            /password/i,\n            /secret/i,\n            /token/i,\n            /key.*=.*[a-zA-Z0-9_-]{20,}/ // Key-value pairs with long values\n        ];\n    }\n    /**\n   * Sanitize sensitive data from logs\n   */ sanitize(data) {\n        if (typeof data === \"string\") {\n            let sanitized = data;\n            this.sensitivePatterns.forEach((pattern)=>{\n                sanitized = sanitized.replace(pattern, \"[REDACTED]\");\n            });\n            return sanitized;\n        }\n        if (typeof data === \"object\" && data !== null) {\n            const sanitized = Array.isArray(data) ? [] : {};\n            for (const [key, value] of Object.entries(data)){\n                const keyLower = key.toLowerCase();\n                if (keyLower.includes(\"password\") || keyLower.includes(\"secret\") || keyLower.includes(\"token\") || keyLower.includes(\"key\")) {\n                    sanitized[key] = \"[REDACTED]\";\n                } else {\n                    sanitized[key] = this.sanitize(value);\n                }\n            }\n            return sanitized;\n        }\n        return data;\n    }\n    /**\n   * Format log message\n   */ formatMessage(level, message, data, metadata) {\n        const timestamp = new Date().toISOString();\n        const sanitizedData = data ? this.sanitize(data) : null;\n        const logEntry = {\n            timestamp,\n            level,\n            message,\n            ...sanitizedData && {\n                data: sanitizedData\n            },\n            ...metadata && {\n                metadata\n            }\n        };\n        return (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? JSON.stringify(logEntry) : logEntry;\n    }\n    /**\n   * Log error messages\n   */ error(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.ERROR) {\n            const formatted = this.formatMessage(\"ERROR\", message, data, metadata);\n            console.error((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"❌\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log warning messages\n   */ warn(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.WARN) {\n            const formatted = this.formatMessage(\"WARN\", message, data, metadata);\n            console.warn((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"⚠️\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log info messages\n   */ info(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.INFO) {\n            const formatted = this.formatMessage(\"INFO\", message, data, metadata);\n            console.log((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"ℹ️\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log debug messages (only in development)\n   */ debug(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.DEBUG && (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isDevelopment)()) {\n            const formatted = this.formatMessage(\"DEBUG\", message, data, metadata);\n            console.log((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"\\uD83D\\uDC1B\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log trace messages (only in development)\n   */ trace(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.TRACE && (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isDevelopment)()) {\n            const formatted = this.formatMessage(\"TRACE\", message, data, metadata);\n            console.log((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"\\uD83D\\uDD0D\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log performance metrics\n   */ performance(operation, duration, metadata = null) {\n        this.info(`Performance: ${operation}`, {\n            duration: `${duration}ms`\n        }, metadata);\n    }\n    /**\n   * Log API calls\n   */ apiCall(method, endpoint, duration, status) {\n        this.info(`API: ${method} ${endpoint}`, {\n            duration: `${duration}ms`,\n            status,\n            type: \"api_call\"\n        });\n    }\n    /**\n   * Log database queries\n   */ dbQuery(table, operation, duration, recordCount = null) {\n        this.debug(`DB: ${operation} on ${table}`, {\n            duration: `${duration}ms`,\n            recordCount,\n            type: \"db_query\"\n        });\n    }\n    /**\n   * Log security events\n   */ security(event, details = null) {\n        this.warn(`Security: ${event}`, details, {\n            type: \"security_event\"\n        });\n    }\n    /**\n   * Log business events\n   */ business(event, details = null) {\n        this.info(`Business: ${event}`, details, {\n            type: \"business_event\"\n        });\n    }\n}\n// Create singleton instance\nconst logger = new ProductionLogger();\n// Convenience functions for common use cases\nconst logError = (message, data, metadata)=>logger.error(message, data, metadata);\nconst logWarn = (message, data, metadata)=>logger.warn(message, data, metadata);\nconst logInfo = (message, data, metadata)=>logger.info(message, data, metadata);\nconst logDebug = (message, data, metadata)=>logger.debug(message, data, metadata);\nconst logPerformance = (operation, duration, metadata)=>logger.performance(operation, duration, metadata);\nconst logAPICall = (method, endpoint, duration, status)=>logger.apiCall(method, endpoint, duration, status);\nconst logDBQuery = (table, operation, duration, recordCount)=>logger.dbQuery(table, operation, duration, recordCount);\nconst logSecurity = (event, details)=>logger.security(event, details);\nconst logBusiness = (event, details)=>logger.business(event, details);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logger);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/production-logger.js\n");

/***/ }),

/***/ "(api)/./lib/supabase-client.js":
/*!********************************!*\
  !*** ./lib/supabase-client.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   executeOptimizedQuery: () => (/* binding */ executeOptimizedQuery),\n/* harmony export */   getConnectionStats: () => (/* binding */ getConnectionStats),\n/* harmony export */   getServerSupabaseClient: () => (/* binding */ getServerSupabaseClient),\n/* harmony export */   getSupabaseClient: () => (/* binding */ getSupabaseClient),\n/* harmony export */   shutdownConnections: () => (/* binding */ shutdownConnections),\n/* harmony export */   testSupabaseConnection: () => (/* binding */ testSupabaseConnection)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _production_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./production-logger.js */ \"(api)/./lib/production-logger.js\");\n/* harmony import */ var _memory_optimizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./memory-optimizer.js */ \"(api)/./lib/memory-optimizer.js\");\n/**\n * SHARED SUPABASE CLIENT WITH SERVER/CLIENT SEPARATION\n * Ensures service keys are NEVER exposed client-side\n * Single instance pattern to avoid conflicts\n */ \n\n\nlet supabaseInstance = null;\nlet supabaseServerInstance = null;\nlet connectionPool = {\n    activeConnections: 0,\n    maxConnections: 50,\n    connectionQueue: [],\n    lastCleanup: Date.now(),\n    peakConnections: 0,\n    totalQueries: 0\n};\n/**\n * Get Supabase client appropriate for the environment\n * Client-side: Uses anonymous key (safe for browser)\n * Server-side: Uses service role key (never exposed to browser)\n */ const getSupabaseClient = ()=>{\n    // Check if we're on the server or client\n    const isServer = \"undefined\" === \"undefined\";\n    if (isServer) {\n        // SERVER-SIDE: Use service role key for full access\n        if (!supabaseServerInstance) {\n            const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n            if (!serviceKey) {\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"SUPABASE_SERVICE_ROLE_KEY not found in server environment\");\n                throw new Error(\"Server configuration error: Missing service key\");\n            }\n            supabaseServerInstance = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://mrwitpgbcaxgnirqtavt.supabase.co\", serviceKey, {\n                auth: {\n                    autoRefreshToken: false,\n                    persistSession: false\n                },\n                db: {\n                    schema: \"public\"\n                },\n                global: {\n                    headers: {\n                        \"User-Agent\": \"Triangle-Intelligence-Platform/1.0\"\n                    }\n                }\n            });\n            // Register cleanup with memory optimizer\n            const memoryOptimizer = (0,_memory_optimizer_js__WEBPACK_IMPORTED_MODULE_2__.getMemoryOptimizer)();\n            memoryOptimizer.registerCleanup(\"supabase-server-client\", ()=>{\n                if (supabaseServerInstance) {\n                    (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Cleaning up Supabase server connections\");\n                    supabaseServerInstance = null;\n                }\n            });\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Created server-side Supabase client with service role and memory optimization\");\n        }\n        return supabaseServerInstance;\n    } else {\n        // CLIENT-SIDE: Use anonymous key only\n        if (!supabaseInstance) {\n            const anonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1yd2l0cGdiY2F4Z25pcnF0YXZ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk4MjUxMzQsImV4cCI6MjA2NTQwMTEzNH0.5g-eaUIwy4VQD2YfNC2sFNoZYF1HdUzVTNJZvtuVSI8\";\n            if (!anonKey) {\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"NEXT_PUBLIC_SUPABASE_ANON_KEY not found\");\n                throw new Error(\"Client configuration error: Missing anonymous key\");\n            }\n            supabaseInstance = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://mrwitpgbcaxgnirqtavt.supabase.co\", anonKey);\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Created client-side Supabase client with anonymous key\");\n        }\n        return supabaseInstance;\n    }\n};\n/**\n * Get server-only Supabase client with service role\n * CRITICAL: Only use in API routes, never in components\n */ const getServerSupabaseClient = ()=>{\n    if (false) {}\n    if (!supabaseServerInstance) {\n        const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n        if (!serviceKey) {\n            throw new Error(\"SUPABASE_SERVICE_ROLE_KEY not configured\");\n        }\n        supabaseServerInstance = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://mrwitpgbcaxgnirqtavt.supabase.co\", serviceKey, {\n            auth: {\n                autoRefreshToken: false,\n                persistSession: false\n            }\n        });\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Created dedicated server Supabase client\");\n    }\n    return supabaseServerInstance;\n};\n// Test database connection\nconst testSupabaseConnection = async ()=>{\n    try {\n        const client = getSupabaseClient();\n        const { data, error } = await client.from(\"translations\").select(\"*\").limit(1);\n        if (error) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"Supabase connection test failed\", {\n                error: error.message\n            });\n            return false;\n        }\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Supabase connection test successful\");\n        return true;\n    } catch (error) {\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"Supabase connection test error\", {\n            error: error.message\n        });\n        return false;\n    }\n};\n/**\n * Memory-optimized database query wrapper\n */ const executeOptimizedQuery = async (queryFn, queryName = \"unknown\")=>{\n    const startTime = Date.now();\n    connectionPool.activeConnections++;\n    connectionPool.totalQueries++;\n    // Track peak connections for monitoring\n    if (connectionPool.activeConnections > connectionPool.peakConnections) {\n        connectionPool.peakConnections = connectionPool.activeConnections;\n    }\n    try {\n        // Check if we need cleanup\n        if (Date.now() - connectionPool.lastCleanup > 300000) {\n            cleanupConnections();\n        }\n        const result = await queryFn();\n        const duration = Date.now() - startTime;\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(`Optimized query executed: ${queryName}`, {\n            duration: `${duration}ms`,\n            activeConnections: connectionPool.activeConnections,\n            peakConnections: connectionPool.peakConnections\n        });\n        return result;\n    } catch (error) {\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(`Optimized query failed: ${queryName}`, {\n            error: error.message,\n            duration: `${Date.now() - startTime}ms`\n        });\n        throw error;\n    } finally{\n        connectionPool.activeConnections--;\n    }\n};\n/**\n * Clean up connection pool\n */ const cleanupConnections = ()=>{\n    (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Cleaning up Supabase connection pool\", {\n        activeConnections: connectionPool.activeConnections,\n        queueSize: connectionPool.connectionQueue.length\n    });\n    // Reset connection tracking\n    connectionPool.activeConnections = Math.max(0, connectionPool.activeConnections);\n    connectionPool.connectionQueue = connectionPool.connectionQueue.filter((conn)=>Date.now() - conn.created < 300000 // 5 minutes\n    );\n    connectionPool.lastCleanup = Date.now();\n};\n/**\n * Get connection pool statistics\n */ const getConnectionStats = ()=>{\n    return {\n        activeConnections: connectionPool.activeConnections,\n        maxConnections: connectionPool.maxConnections,\n        peakConnections: connectionPool.peakConnections,\n        totalQueries: connectionPool.totalQueries,\n        queueSize: connectionPool.connectionQueue.length,\n        lastCleanup: new Date(connectionPool.lastCleanup).toISOString(),\n        utilizationPercent: Math.round(connectionPool.activeConnections / connectionPool.maxConnections * 100),\n        status: connectionPool.activeConnections < connectionPool.maxConnections * 0.8 ? \"healthy\" : \"high_load\"\n    };\n};\n/**\n * Graceful shutdown - cleanup all connections\n */ const shutdownConnections = ()=>{\n    (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Shutting down all Supabase connections\");\n    supabaseInstance = null;\n    supabaseServerInstance = null;\n    connectionPool.activeConnections = 0;\n    connectionPool.connectionQueue = [];\n    (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"All Supabase connections shut down successfully\");\n};\n// Register shutdown handler\nconst memoryOptimizer = (0,_memory_optimizer_js__WEBPACK_IMPORTED_MODULE_2__.getMemoryOptimizer)();\nmemoryOptimizer.registerCleanup(\"supabase-connections\", shutdownConnections);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getSupabaseClient);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/supabase-client.js\n");

/***/ }),

/***/ "(api)/./lib/utils/environment-validation.js":
/*!*********************************************!*\
  !*** ./lib/utils/environment-validation.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnvVar: () => (/* binding */ getEnvVar),\n/* harmony export */   getSecurityStatus: () => (/* binding */ getSecurityStatus),\n/* harmony export */   getSupabaseConfig: () => (/* binding */ getSupabaseConfig),\n/* harmony export */   isDevelopment: () => (/* binding */ isDevelopment),\n/* harmony export */   isProduction: () => (/* binding */ isProduction),\n/* harmony export */   safeLog: () => (/* binding */ safeLog),\n/* harmony export */   validateAPIKeysSecurity: () => (/* binding */ validateAPIKeysSecurity),\n/* harmony export */   validateEnvironment: () => (/* binding */ validateEnvironment),\n/* harmony export */   validateSecretSecurity: () => (/* binding */ validateSecretSecurity)\n/* harmony export */ });\n/**\n * Environment Variable Validation and Configuration\n * Centralized validation for production readiness\n */ // Required environment variables for production\n// Split by client/server because client can't see server-only vars\nconst CLIENT_REQUIRED_ENV_VARS = [\n    \"NEXT_PUBLIC_SUPABASE_URL\",\n    \"NEXT_PUBLIC_SUPABASE_ANON_KEY\"\n];\nconst SERVER_REQUIRED_ENV_VARS = [\n    \"NEXT_PUBLIC_SUPABASE_URL\",\n    \"NEXT_PUBLIC_SUPABASE_ANON_KEY\",\n    \"SUPABASE_SERVICE_ROLE_KEY\",\n    \"JWT_SECRET\",\n    \"NEXTAUTH_SECRET\"\n];\nconst SERVER_RECOMMENDED_ENV_VARS = [\n    \"ANTHROPIC_API_KEY\",\n    \"COMTRADE_API_KEY\",\n    \"SHIPPO_API_KEY\",\n    \"STRIPE_SECRET_KEY\"\n];\n// Optional environment variables with defaults\nconst OPTIONAL_ENV_VARS = {\n    NODE_ENV: \"development\",\n    NEXT_PUBLIC_APP_URL: \"http://localhost:3000\"\n};\n/**\n * Validate all required environment variables are present\n * @throws {Error} If any required variable is missing\n */ function validateEnvironment() {\n    // Skip validation entirely on client-side to avoid errors\n    if (false) {}\n    // Server-side validation\n    const missing = SERVER_REQUIRED_ENV_VARS.filter((key)=>!process.env[key]);\n    if (missing.length > 0) {\n        throw new Error(`Missing required server-side environment variables: ${missing.join(\", \")}`);\n    }\n    // Note: Using console.log here as this runs before logger is initialized\n    console.log(\"✅ All required environment variables are present\");\n}\n/**\n * Get environment variable with validation\n * @param {string} key - Environment variable key\n * @param {boolean} required - Whether the variable is required\n * @returns {string} Environment variable value\n */ function getEnvVar(key, required = true) {\n    const value = process.env[key];\n    if (required && !value) {\n        throw new Error(`Missing required environment variable: ${key}`);\n    }\n    return value || OPTIONAL_ENV_VARS[key];\n}\n/**\n * Check if running in production\n */ function isProduction() {\n    return \"development\" === \"production\";\n}\n/**\n * Check if running in development\n */ function isDevelopment() {\n    return \"development\" === \"development\";\n}\n/**\n * Safe logging that respects environment\n * Only logs in development unless force is true\n */ function safeLog(message, data = null, force = false) {\n    if (isDevelopment() || force) {\n        if (data) {\n            // Note: Using console.log here as this is used for bootstrap logging\n            console.log(message, data);\n        } else {\n            console.log(message);\n        }\n    }\n}\n/**\n * Get Supabase configuration based on environment\n */ function getSupabaseConfig() {\n    const url = getEnvVar(\"NEXT_PUBLIC_SUPABASE_URL\");\n    // Use service role key on server, anon key on client\n    const key =  false ? 0 : getEnvVar(\"SUPABASE_SERVICE_ROLE_KEY\", false) || getEnvVar(\"NEXT_PUBLIC_SUPABASE_ANON_KEY\");\n    return {\n        url,\n        key\n    };\n}\n/**\n * Validate API keys are not exposed and check for security issues\n */ function validateAPIKeysSecurity() {\n    const sensitiveKeys = [\n        \"SUPABASE_SERVICE_ROLE_KEY\",\n        \"ANTHROPIC_API_KEY\",\n        \"STRIPE_SECRET_KEY\",\n        \"COMTRADE_API_KEY\",\n        \"SHIPPO_API_KEY\",\n        \"JWT_SECRET\",\n        \"NEXTAUTH_SECRET\",\n        \"ENTERPRISE_MASTER_KEY\"\n    ];\n    if (false) {}\n}\n/**\n * Check for dangerous default/template values\n */ function validateSecretSecurity() {\n    const dangerousPatterns = [\n        {\n            key: \"JWT_SECRET\",\n            patterns: [\n                \"your-super-secure\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"NEXTAUTH_SECRET\",\n            patterns: [\n                \"your-nextauth-secret\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"ENTERPRISE_MASTER_KEY\",\n            patterns: [\n                \"triangle-intelligence-enterprise\",\n                \"generate-new\",\n                \"REPLACE_WITH\"\n            ]\n        },\n        {\n            key: \"ANTHROPIC_API_KEY\",\n            patterns: [\n                \"your-key-here\",\n                \"REPLACE_WITH\"\n            ]\n        }\n    ];\n    const warnings = [];\n    dangerousPatterns.forEach(({ key, patterns })=>{\n        if (process.env[key]) {\n            patterns.forEach((pattern)=>{\n                if (process.env[key].includes(pattern)) {\n                    warnings.push(`${key} appears to use default/template value`);\n                }\n            });\n        }\n    });\n    // Check secret strength\n    if (process.env.JWT_SECRET && process.env.JWT_SECRET.length < 32) {\n        warnings.push(\"JWT_SECRET is too short (minimum 32 characters)\");\n    }\n    return warnings;\n}\n/**\n * Get comprehensive security status\n */ function getSecurityStatus() {\n    const warnings = validateSecretSecurity();\n    const requiredMissing = SERVER_REQUIRED_ENV_VARS.filter((key)=>!process.env[key]);\n    const recommendedMissing = SERVER_RECOMMENDED_ENV_VARS.filter((key)=>!process.env[key]);\n    return {\n        status: requiredMissing.length === 0 && warnings.length === 0 ? \"secure\" : \"needs_attention\",\n        requiredMissing,\n        recommendedMissing,\n        securityWarnings: warnings,\n        lastChecked: new Date().toISOString()\n    };\n}\n// Auto-validate on import in development (SERVER-SIDE ONLY)\nif (isDevelopment() && \"undefined\" === \"undefined\") {\n    try {\n        validateEnvironment();\n        validateAPIKeysSecurity();\n    } catch (error) {\n        // Note: Using console.error here as this is critical bootstrap error\n        console.error(\"❌ Environment validation failed:\", error.message);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/utils/environment-validation.js\n");

/***/ }),

/***/ "(api)/./lib/utils/memory-cache-fallback.js":
/*!********************************************!*\
  !*** ./lib/utils/memory-cache-fallback.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   memoryCacheFallback: () => (/* binding */ memoryCacheFallback),\n/* harmony export */   universalCache: () => (/* binding */ universalCache)\n/* harmony export */ });\n/* harmony import */ var _production_logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./production-logger.js */ \"(api)/./lib/utils/production-logger.js\");\n/**\n * Memory Cache Fallback System for Triangle Intelligence Platform\n * Provides high-performance caching when Redis is not available\n * Critical for production readiness and performance optimization\n */ \nclass MemoryCacheFallback {\n    constructor(){\n        this.cache = new Map();\n        this.keyTTL = new Map() // Track TTL for each key\n        ;\n        this.stats = {\n            hits: 0,\n            misses: 0,\n            sets: 0,\n            evictions: 0,\n            totalRequests: 0\n        };\n        this.maxSize = 10000 // Maximum cache entries\n        ;\n        this.defaultTTL = 3600000 // 1 hour in milliseconds\n        ;\n        // Start cleanup interval\n        this.startCleanupInterval();\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory cache fallback initialized\", {\n            maxSize: this.maxSize,\n            defaultTTL: this.defaultTTL / 1000 + \"s\",\n            status: \"READY\"\n        });\n    }\n    /**\n   * Get value from cache\n   */ async get(key) {\n        this.stats.totalRequests++;\n        const startTime = Date.now();\n        if (!this.cache.has(key)) {\n            this.stats.misses++;\n            return null;\n        }\n        // Check if expired\n        const ttl = this.keyTTL.get(key);\n        if (ttl && Date.now() > ttl) {\n            this.cache.delete(key);\n            this.keyTTL.delete(key);\n            this.stats.misses++;\n            return null;\n        }\n        this.stats.hits++;\n        const value = this.cache.get(key);\n        const duration = Date.now() - startTime;\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logPerformance)(\"memory_cache_get\", duration, {\n            key: key.substring(0, 50) + \"...\",\n            hit: true,\n            hitRate: (this.stats.hits / this.stats.totalRequests * 100).toFixed(1) + \"%\"\n        });\n        return value;\n    }\n    /**\n   * Set value in cache with optional TTL\n   */ async set(key, value, ttlSeconds = null) {\n        const startTime = Date.now();\n        // Evict oldest entries if cache is full\n        if (this.cache.size >= this.maxSize) {\n            this.evictOldest();\n        }\n        const ttl = ttlSeconds ? Date.now() + ttlSeconds * 1000 : Date.now() + this.defaultTTL;\n        this.cache.set(key, value);\n        this.keyTTL.set(key, ttl);\n        this.stats.sets++;\n        const duration = Date.now() - startTime;\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logPerformance)(\"memory_cache_set\", duration, {\n            key: key.substring(0, 50) + \"...\",\n            ttl: ttlSeconds || this.defaultTTL / 1000 + \"s\",\n            cacheSize: this.cache.size\n        });\n    }\n    /**\n   * Delete key from cache\n   */ async del(key) {\n        const deleted = this.cache.delete(key);\n        this.keyTTL.delete(key);\n        return deleted ? 1 : 0;\n    }\n    /**\n   * Check if key exists (and is not expired)\n   */ async exists(key) {\n        if (!this.cache.has(key)) return false;\n        const ttl = this.keyTTL.get(key);\n        if (ttl && Date.now() > ttl) {\n            this.cache.delete(key);\n            this.keyTTL.delete(key);\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Get cache statistics\n   */ getStats() {\n        return {\n            ...this.stats,\n            cacheSize: this.cache.size,\n            maxSize: this.maxSize,\n            hitRate: this.stats.totalRequests > 0 ? (this.stats.hits / this.stats.totalRequests * 100).toFixed(2) + \"%\" : \"0%\",\n            memoryUsage: process.memoryUsage()\n        };\n    }\n    /**\n   * Evict oldest entries when cache is full\n   */ evictOldest() {\n        const oldestKeys = Array.from(this.cache.keys()).slice(0, Math.floor(this.maxSize * 0.1));\n        for (const key of oldestKeys){\n            this.cache.delete(key);\n            this.keyTTL.delete(key);\n            this.stats.evictions++;\n        }\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory cache eviction completed\", {\n            evictedKeys: oldestKeys.length,\n            remainingSize: this.cache.size\n        });\n    }\n    /**\n   * Clean up expired entries periodically\n   */ startCleanupInterval() {\n        setInterval(()=>{\n            const now = Date.now();\n            let expiredCount = 0;\n            for (const [key, ttl] of this.keyTTL.entries()){\n                if (ttl < now) {\n                    this.cache.delete(key);\n                    this.keyTTL.delete(key);\n                    expiredCount++;\n                }\n            }\n            if (expiredCount > 0) {\n                (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory cache cleanup completed\", {\n                    expiredKeys: expiredCount,\n                    cacheSize: this.cache.size\n                });\n            }\n        }, 60000) // Every minute\n        ;\n    }\n    /**\n   * Clear all cache\n   */ async flushall() {\n        this.cache.clear();\n        this.keyTTL.clear();\n        this.stats.evictions += this.cache.size;\n        (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"Memory cache flushed completely\");\n    }\n    /**\n   * Get multiple keys at once\n   */ async mget(keys) {\n        const results = [];\n        for (const key of keys){\n            results.push(await this.get(key));\n        }\n        return results;\n    }\n    /**\n   * Set multiple key-value pairs\n   */ async mset(keyValuePairs) {\n        for(let i = 0; i < keyValuePairs.length; i += 2){\n            await this.set(keyValuePairs[i], keyValuePairs[i + 1]);\n        }\n    }\n    /**\n   * Increment a numeric value\n   */ async incr(key) {\n        const current = await this.get(key) || 0;\n        const newValue = parseInt(current) + 1;\n        await this.set(key, newValue);\n        return newValue;\n    }\n    /**\n   * Set expiry for existing key\n   */ async expire(key, ttlSeconds) {\n        if (this.cache.has(key)) {\n            this.keyTTL.set(key, Date.now() + ttlSeconds * 1000);\n            return true;\n        }\n        return false;\n    }\n}\n// Singleton instance\nconst memoryCacheFallback = new MemoryCacheFallback();\n/**\n * Universal cache interface that works with both Redis and memory fallback\n */ class UniversalCache {\n    constructor(){\n        this.redis = null;\n        this.usingFallback = true;\n        this.initializeRedis();\n    }\n    async initializeRedis() {\n        try {\n            const { getRedisClient } = await __webpack_require__.e(/*! import() */ \"_api_lib_redis-client_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../redis-client.js */ \"(api)/./lib/redis-client.js\"));\n            this.redis = await getRedisClient();\n            this.usingFallback = false;\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)(\"UniversalCache: Redis connected successfully\");\n        } catch (error) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(\"UniversalCache: Redis unavailable, using memory fallback\", {\n                error: error.message\n            });\n            this.usingFallback = true;\n        }\n    }\n    async get(key) {\n        if (this.usingFallback || !this.redis) {\n            return await memoryCacheFallback.get(key);\n        }\n        try {\n            const result = await this.redis.get(key);\n            return result ? JSON.parse(result) : null;\n        } catch (error) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(\"Redis get failed, falling back to memory\", {\n                key,\n                error: error.message\n            });\n            return await memoryCacheFallback.get(key);\n        }\n    }\n    async set(key, value, ttlSeconds = 3600) {\n        if (this.usingFallback || !this.redis) {\n            return await memoryCacheFallback.set(key, value, ttlSeconds);\n        }\n        try {\n            await this.redis.setex(key, ttlSeconds, JSON.stringify(value));\n        } catch (error) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(\"Redis set failed, falling back to memory\", {\n                key,\n                error: error.message\n            });\n            await memoryCacheFallback.set(key, value, ttlSeconds);\n        }\n    }\n    async del(key) {\n        if (this.usingFallback || !this.redis) {\n            return await memoryCacheFallback.del(key);\n        }\n        try {\n            return await this.redis.del(key);\n        } catch (error) {\n            (0,_production_logger_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)(\"Redis del failed, falling back to memory\", {\n                key,\n                error: error.message\n            });\n            return await memoryCacheFallback.del(key);\n        }\n    }\n    getStats() {\n        return {\n            usingFallback: this.usingFallback,\n            redisConnected: !this.usingFallback && !!this.redis,\n            fallbackStats: memoryCacheFallback.getStats()\n        };\n    }\n}\n// Export singleton instance\nconst universalCache = new UniversalCache();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (universalCache);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/utils/memory-cache-fallback.js\n");

/***/ }),

/***/ "(api)/./lib/utils/production-logger.js":
/*!****************************************!*\
  !*** ./lib/utils/production-logger.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   logAPICall: () => (/* binding */ logAPICall),\n/* harmony export */   logBusiness: () => (/* binding */ logBusiness),\n/* harmony export */   logDBQuery: () => (/* binding */ logDBQuery),\n/* harmony export */   logDebug: () => (/* binding */ logDebug),\n/* harmony export */   logError: () => (/* binding */ logError),\n/* harmony export */   logInfo: () => (/* binding */ logInfo),\n/* harmony export */   logPerformance: () => (/* binding */ logPerformance),\n/* harmony export */   logSecurity: () => (/* binding */ logSecurity),\n/* harmony export */   logWarn: () => (/* binding */ logWarn),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _environment_validation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment-validation.js */ \"(api)/./lib/utils/environment-validation.js\");\n/**\n * Production-Safe Logging System\n * Handles logging with environment awareness and security\n */ \n// Log levels\nconst LOG_LEVELS = {\n    ERROR: 0,\n    WARN: 1,\n    INFO: 2,\n    DEBUG: 3,\n    TRACE: 4\n};\nclass ProductionLogger {\n    constructor(){\n        this.level = (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? LOG_LEVELS.WARN : LOG_LEVELS.DEBUG;\n        this.sensitivePatterns = [\n            /sk-[a-zA-Z0-9_-]+/,\n            /pk_[a-zA-Z0-9_-]+/,\n            /eyJ[a-zA-Z0-9_-]+/,\n            /password/i,\n            /secret/i,\n            /token/i,\n            /key.*=.*[a-zA-Z0-9_-]{20,}/ // Key-value pairs with long values\n        ];\n    }\n    /**\n   * Sanitize sensitive data from logs\n   */ sanitize(data) {\n        if (typeof data === \"string\") {\n            let sanitized = data;\n            this.sensitivePatterns.forEach((pattern)=>{\n                sanitized = sanitized.replace(pattern, \"[REDACTED]\");\n            });\n            return sanitized;\n        }\n        if (typeof data === \"object\" && data !== null) {\n            const sanitized = Array.isArray(data) ? [] : {};\n            for (const [key, value] of Object.entries(data)){\n                const keyLower = key.toLowerCase();\n                if (keyLower.includes(\"password\") || keyLower.includes(\"secret\") || keyLower.includes(\"token\") || keyLower.includes(\"key\")) {\n                    sanitized[key] = \"[REDACTED]\";\n                } else {\n                    sanitized[key] = this.sanitize(value);\n                }\n            }\n            return sanitized;\n        }\n        return data;\n    }\n    /**\n   * Format log message\n   */ formatMessage(level, message, data, metadata) {\n        const timestamp = new Date().toISOString();\n        const sanitizedData = data ? this.sanitize(data) : null;\n        const logEntry = {\n            timestamp,\n            level,\n            message,\n            ...sanitizedData && {\n                data: sanitizedData\n            },\n            ...metadata && {\n                metadata\n            }\n        };\n        return (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? JSON.stringify(logEntry) : logEntry;\n    }\n    /**\n   * Log error messages\n   */ error(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.ERROR) {\n            const formatted = this.formatMessage(\"ERROR\", message, data, metadata);\n            console.error((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"❌\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log warning messages\n   */ warn(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.WARN) {\n            const formatted = this.formatMessage(\"WARN\", message, data, metadata);\n            console.warn((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"⚠️\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log info messages\n   */ info(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.INFO) {\n            const formatted = this.formatMessage(\"INFO\", message, data, metadata);\n            console.log((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"ℹ️\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log debug messages (only in development)\n   */ debug(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.DEBUG && (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isDevelopment)()) {\n            const formatted = this.formatMessage(\"DEBUG\", message, data, metadata);\n            console.log((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"\\uD83D\\uDC1B\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log trace messages (only in development)\n   */ trace(message, data = null, metadata = null) {\n        if (this.level >= LOG_LEVELS.TRACE && (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isDevelopment)()) {\n            const formatted = this.formatMessage(\"TRACE\", message, data, metadata);\n            console.log((0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? formatted : \"\\uD83D\\uDD0D\", (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : message, (0,_environment_validation_js__WEBPACK_IMPORTED_MODULE_0__.isProduction)() ? \"\" : this.sanitize(data));\n        }\n    }\n    /**\n   * Log performance metrics\n   */ performance(operation, duration, metadata = null) {\n        this.info(`Performance: ${operation}`, {\n            duration: `${duration}ms`\n        }, metadata);\n    }\n    /**\n   * Log API calls\n   */ apiCall(method, endpoint, duration, status) {\n        this.info(`API: ${method} ${endpoint}`, {\n            duration: `${duration}ms`,\n            status,\n            type: \"api_call\"\n        });\n    }\n    /**\n   * Log database queries\n   */ dbQuery(table, operation, duration, recordCount = null) {\n        this.debug(`DB: ${operation} on ${table}`, {\n            duration: `${duration}ms`,\n            recordCount,\n            type: \"db_query\"\n        });\n    }\n    /**\n   * Log security events\n   */ security(event, details = null) {\n        this.warn(`Security: ${event}`, details, {\n            type: \"security_event\"\n        });\n    }\n    /**\n   * Log business events\n   */ business(event, details = null) {\n        this.info(`Business: ${event}`, details, {\n            type: \"business_event\"\n        });\n    }\n}\n// Create singleton instance\nconst logger = new ProductionLogger();\n// Convenience functions for common use cases\nconst logError = (message, data, metadata)=>logger.error(message, data, metadata);\nconst logWarn = (message, data, metadata)=>logger.warn(message, data, metadata);\nconst logInfo = (message, data, metadata)=>logger.info(message, data, metadata);\nconst logDebug = (message, data, metadata)=>logger.debug(message, data, metadata);\nconst logPerformance = (operation, duration, metadata)=>logger.performance(operation, duration, metadata);\nconst logAPICall = (method, endpoint, duration, status)=>logger.apiCall(method, endpoint, duration, status);\nconst logDBQuery = (table, operation, duration, recordCount)=>logger.dbQuery(table, operation, duration, recordCount);\nconst logSecurity = (event, details)=>logger.security(event, details);\nconst logBusiness = (event, details)=>logger.business(event, details);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logger);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/utils/production-logger.js\n");

/***/ }),

/***/ "(api)/./pages/api/infrastructure-test.js":
/*!******************************************!*\
  !*** ./pages/api/infrastructure-test.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_utils_memory_cache_fallback_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/utils/memory-cache-fallback.js */ \"(api)/./lib/utils/memory-cache-fallback.js\");\n/* harmony import */ var _lib_database_query_optimizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/database/query-optimizer.js */ \"(api)/./lib/database/query-optimizer.js\");\n/* harmony import */ var _lib_supabase_client_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/supabase-client.js */ \"(api)/./lib/supabase-client.js\");\n/* harmony import */ var _lib_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/utils/production-logger.js */ \"(api)/./lib/utils/production-logger.js\");\n/**\n * Infrastructure Test API - Production Readiness Check\n * Tests all critical infrastructure components for Triangle Intelligence Platform\n */ \n\n\n\nasync function handler(req, res) {\n    const startTime = Date.now();\n    (0,_lib_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_3__.logInfo)(\"Infrastructure test started\", {\n        method: req.method,\n        timestamp: new Date().toISOString()\n    });\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    const testResults = {\n        timestamp: new Date().toISOString(),\n        environment: \"development\",\n        tests: {},\n        performance: {},\n        recommendations: []\n    };\n    try {\n        // 1. Test Database Connection\n        (0,_lib_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_3__.logInfo)(\"Testing database connection...\");\n        const dbStartTime = Date.now();\n        try {\n            const supabase = (0,_lib_supabase_client_js__WEBPACK_IMPORTED_MODULE_2__.getSupabaseClient)();\n            const { data: dbTest, error: dbError } = await supabase.from(\"countries\").select(\"*\").limit(1);\n            const dbDuration = Date.now() - dbStartTime;\n            testResults.tests.database = {\n                status: dbError ? \"FAILED\" : \"PASS\",\n                duration: dbDuration,\n                error: dbError?.message,\n                recordsFound: dbTest?.length || 0\n            };\n            if (dbDuration > 1000) {\n                testResults.recommendations.push(\"Database query >1s - consider connection optimization\");\n            }\n        } catch (error) {\n            testResults.tests.database = {\n                status: \"FAILED\",\n                error: error.message,\n                duration: Date.now() - dbStartTime\n            };\n        }\n        // 2. Test Cache System (Universal Cache with Redis/Memory fallback)\n        (0,_lib_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_3__.logInfo)(\"Testing cache system...\");\n        const cacheStartTime = Date.now();\n        try {\n            const testKey = \"infrastructure_test_\" + Date.now();\n            const testValue = {\n                test: true,\n                timestamp: new Date().toISOString()\n            };\n            // Test SET\n            await _lib_utils_memory_cache_fallback_js__WEBPACK_IMPORTED_MODULE_0__.universalCache.set(testKey, testValue, 60);\n            // Test GET\n            const cachedValue = await _lib_utils_memory_cache_fallback_js__WEBPACK_IMPORTED_MODULE_0__.universalCache.get(testKey);\n            // Test DELETE\n            await _lib_utils_memory_cache_fallback_js__WEBPACK_IMPORTED_MODULE_0__.universalCache.del(testKey);\n            const cacheDuration = Date.now() - cacheStartTime;\n            const cacheStats = _lib_utils_memory_cache_fallback_js__WEBPACK_IMPORTED_MODULE_0__.universalCache.getStats();\n            testResults.tests.cache = {\n                status: cachedValue && cachedValue.test ? \"PASS\" : \"FAILED\",\n                duration: cacheDuration,\n                backend: cacheStats.usingFallback ? \"MEMORY_FALLBACK\" : \"REDIS\",\n                stats: cacheStats\n            };\n            if (cacheStats.usingFallback) {\n                testResults.recommendations.push(\"Using memory cache fallback - deploy Redis for production\");\n            }\n        } catch (error) {\n            testResults.tests.cache = {\n                status: \"FAILED\",\n                error: error.message,\n                duration: Date.now() - cacheStartTime\n            };\n        }\n        // 3. Test Query Optimizer Performance\n        (0,_lib_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_3__.logInfo)(\"Testing query optimizer performance...\");\n        const queryStartTime = Date.now();\n        try {\n            const testParams = {\n                origin: \"CN\",\n                destination: \"US\",\n                hsCode: \"8471\",\n                businessType: \"Electronics\"\n            };\n            const queryResult = await _lib_database_query_optimizer_js__WEBPACK_IMPORTED_MODULE_1__.queryOptimizer.getTriangleRoutingData(testParams);\n            const queryDuration = Date.now() - queryStartTime;\n            testResults.tests.queryOptimizer = {\n                status: queryResult ? \"PASS\" : \"FAILED\",\n                duration: queryDuration,\n                recordsAnalyzed: queryResult.totalRecords || 0,\n                triangleRoutes: queryResult.triangleOptions?.length || 0,\n                optimized: queryResult.efficiency?.optimized || false\n            };\n            if (queryDuration > 1000) {\n                testResults.recommendations.push(\"Query optimizer >1s - check database indexes and caching\");\n            }\n        } catch (error) {\n            testResults.tests.queryOptimizer = {\n                status: \"FAILED\",\n                error: error.message,\n                duration: Date.now() - queryStartTime\n            };\n        }\n        // 4. Test Memory Usage\n        const memoryUsage = process.memoryUsage();\n        testResults.tests.memory = {\n            status: memoryUsage.heapUsed < 512 * 1024 * 1024 ? \"PASS\" : \"WARNING\",\n            heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024) + \"MB\",\n            heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024) + \"MB\",\n            external: Math.round(memoryUsage.external / 1024 / 1024) + \"MB\"\n        };\n        if (memoryUsage.heapUsed > 256 * 1024 * 1024) {\n            testResults.recommendations.push(\"High memory usage detected - implement memory optimization\");\n        }\n        // 5. Overall Performance Assessment\n        const totalDuration = Date.now() - startTime;\n        testResults.performance = {\n            totalTestDuration: totalDuration,\n            status: totalDuration < 2000 ? \"EXCELLENT\" : totalDuration < 5000 ? \"GOOD\" : \"NEEDS_OPTIMIZATION\",\n            target: \"<2000ms for all tests\"\n        };\n        // 6. Production Readiness Score\n        const passedTests = Object.values(testResults.tests).filter((test)=>test.status === \"PASS\").length;\n        const totalTests = Object.keys(testResults.tests).length;\n        const readinessScore = Math.round(passedTests / totalTests * 100);\n        testResults.productionReadiness = {\n            score: readinessScore,\n            level: readinessScore >= 90 ? \"READY\" : readinessScore >= 70 ? \"ALMOST_READY\" : \"NEEDS_WORK\",\n            passedTests,\n            totalTests\n        };\n        // Add specific recommendations based on test results\n        if (testResults.tests.cache?.backend === \"MEMORY_FALLBACK\") {\n            testResults.recommendations.push(\"PRIORITY: Deploy Redis for production-grade caching and rate limiting\");\n        }\n        if (testResults.performance.status !== \"EXCELLENT\") {\n            testResults.recommendations.push(\"Optimize query performance and enable all caching layers\");\n        }\n        // Log performance metrics\n        (0,_lib_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_3__.logPerformance)(\"infrastructure_test_complete\", totalDuration, {\n            readinessScore,\n            level: testResults.productionReadiness.level,\n            recommendationsCount: testResults.recommendations.length\n        });\n        res.status(200).json(testResults);\n    } catch (error) {\n        (0,_lib_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_3__.logError)(\"Infrastructure test failed\", {\n            error: error.message\n        });\n        res.status(500).json({\n            error: \"Infrastructure test failed\",\n            message: error.message,\n            timestamp: new Date().toISOString(),\n            recommendations: [\n                \"Check environment variables and database connectivity\",\n                \"Verify all required services are running\",\n                \"Review server logs for detailed error information\"\n            ]\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/infrastructure-test.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Finfrastructure-test&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Finfrastructure-test.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();