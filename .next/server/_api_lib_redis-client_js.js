"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_api_lib_redis-client_js";
exports.ids = ["_api_lib_redis-client_js"];
exports.modules = {

/***/ "(api)/./lib/redis-client.js":
/*!*****************************!*\
  !*** ./lib/redis-client.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedisClient: () => (/* binding */ RedisClient),\n/* harmony export */   checkRedisHealth: () => (/* binding */ checkRedisHealth),\n/* harmony export */   getRedisClient: () => (/* binding */ getRedisClient),\n/* harmony export */   shouldUseFallbackMode: () => (/* binding */ shouldUseFallbackMode),\n/* harmony export */   shutdownRedis: () => (/* binding */ shutdownRedis)\n/* harmony export */ });\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ioredis */ \"ioredis\");\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ioredis__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/production-logger.js */ \"(api)/./lib/utils/production-logger.js\");\n/**\n * Redis Client for Triangle Intelligence Platform\n * Handles caching, rate limiting, and session management\n */ \n\nclass RedisClient {\n    constructor(){\n        this.redis = null;\n        this.isConnected = false;\n        this.connectionAttempts = 0;\n        this.maxRetries = 5;\n        this.retryDelayMs = 2000;\n    }\n    /**\n   * Initialize Redis connection with retry logic\n   */ async connect() {\n        if (this.isConnected && this.redis) {\n            return this.redis;\n        }\n        // Check if Redis should be enabled (can be disabled in development)\n        if (process.env.ENABLE_REDIS_RATE_LIMITING === \"false\") {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Redis rate limiting disabled via environment variable\");\n            throw new Error(\"Redis disabled - using memory fallback\");\n        }\n        let redisConfig;\n        // Use Redis URL if provided (for managed services like Upstash, ElastiCache)\n        if (process.env.REDIS_URL) {\n            redisConfig = {\n                connectionName: \"triangle-intelligence\",\n                retryDelayOnFailover: 100,\n                enableReadyCheck: true,\n                maxRetriesPerRequest: 3,\n                lazyConnect: true,\n                keepAlive: 30000,\n                connectTimeout: 10000,\n                commandTimeout: 5000\n            };\n            this.redis = new (ioredis__WEBPACK_IMPORTED_MODULE_0___default())(process.env.REDIS_URL, redisConfig);\n        } else {\n            // Standard host/port configuration\n            redisConfig = {\n                host: process.env.REDIS_HOST || \"localhost\",\n                port: parseInt(process.env.REDIS_PORT || \"6379\"),\n                password: process.env.REDIS_PASSWORD,\n                db: parseInt(process.env.REDIS_DB || \"0\"),\n                connectionName: \"triangle-intelligence\",\n                retryDelayOnFailover: 100,\n                enableReadyCheck: true,\n                maxRetriesPerRequest: 3,\n                lazyConnect: true,\n                keepAlive: 30000,\n                connectTimeout: 10000,\n                commandTimeout: 5000\n            };\n            this.redis = new (ioredis__WEBPACK_IMPORTED_MODULE_0___default())(redisConfig);\n        }\n        try {\n            // Event handlers\n            this.redis.on(\"connect\", ()=>{\n                (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Redis client connected successfully\", {\n                    host: redisConfig.host,\n                    port: redisConfig.port\n                });\n                this.isConnected = true;\n                this.connectionAttempts = 0;\n            });\n            this.redis.on(\"ready\", ()=>{\n                (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Redis client ready for operations\");\n            });\n            this.redis.on(\"error\", (error)=>{\n                (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"Redis connection error\", {\n                    error: error.message,\n                    connectionAttempts: this.connectionAttempts\n                });\n                this.isConnected = false;\n            });\n            this.redis.on(\"close\", ()=>{\n                (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Redis connection closed\");\n                this.isConnected = false;\n            });\n            this.redis.on(\"reconnecting\", (ms)=>{\n                (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Redis reconnecting\", {\n                    retryIn: ms\n                });\n            });\n            // Test connection\n            await this.redis.connect();\n            await this.redis.ping();\n            return this.redis;\n        } catch (error) {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"Failed to initialize Redis client\", {\n                error: error.message\n            });\n            this.connectionAttempts++;\n            if (this.connectionAttempts < this.maxRetries) {\n                (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(`Retrying Redis connection in ${this.retryDelayMs}ms`, {\n                    attempt: this.connectionAttempts,\n                    maxRetries: this.maxRetries\n                });\n                await new Promise((resolve)=>setTimeout(resolve, this.retryDelayMs));\n                return this.connect();\n            } else {\n                throw new Error(`Failed to connect to Redis after ${this.maxRetries} attempts: ${error.message}`);\n            }\n        }\n    }\n    /**\n   * Get Redis client (with automatic connection)\n   */ async getClient() {\n        if (!this.isConnected || !this.redis) {\n            await this.connect();\n        }\n        return this.redis;\n    }\n    /**\n   * Graceful shutdown\n   */ async disconnect() {\n        if (this.redis) {\n            (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)(\"Disconnecting Redis client\");\n            await this.redis.quit();\n            this.redis = null;\n            this.isConnected = false;\n        }\n    }\n    /**\n   * Health check\n   */ async healthCheck() {\n        try {\n            const client = await this.getClient();\n            const pong = await client.ping();\n            return {\n                status: \"healthy\",\n                response: pong,\n                connected: this.isConnected\n            };\n        } catch (error) {\n            return {\n                status: \"unhealthy\",\n                error: error.message,\n                connected: false\n            };\n        }\n    }\n    /**\n   * Check if fallback mode should be used\n   */ shouldUseFallback() {\n        // Use fallback if Redis is not available or connection failed too many times\n        return !this.isConnected || this.connectionAttempts >= this.maxRetries;\n    }\n}\n// Singleton instance\nconst redisClient = new RedisClient();\n/**\n * Get Redis client instance (singleton)\n */ async function getRedisClient() {\n    try {\n        return await redisClient.getClient();\n    } catch (error) {\n        (0,_utils_production_logger_js__WEBPACK_IMPORTED_MODULE_1__.logError)(\"Failed to get Redis client\", {\n            error: error.message\n        });\n        throw error;\n    }\n}\n/**\n * Check Redis health\n */ async function checkRedisHealth() {\n    return await redisClient.healthCheck();\n}\n/**\n * Check if should use memory fallback\n */ function shouldUseFallbackMode() {\n    return redisClient.shouldUseFallback();\n}\n/**\n * Graceful shutdown helper\n */ async function shutdownRedis() {\n    await redisClient.disconnect();\n}\n// Export the class for testing\n\n// Handle process shutdown\nprocess.on(\"SIGTERM\", shutdownRedis);\nprocess.on(\"SIGINT\", shutdownRedis);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/redis-client.js\n");

/***/ })

};
;