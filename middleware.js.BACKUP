/**
 * Next.js Middleware - Auth & Admin Verification
 * Automatically refreshes Supabase auth tokens and verifies admin access
 * Critical for Vercel serverless deployment
 */

import { createServerClient } from '@supabase/ssr';
import { NextResponse } from 'next/server';
import crypto from 'crypto';

function verifySession(cookieValue, secret) {
  try {
    if (!cookieValue || !secret) return null;

    const decoded = Buffer.from(cookieValue, 'base64').toString('utf-8');
    const { data, sig } = JSON.parse(decoded);

    // Data is already a string (not an object), verify it directly
    const expectedSig = crypto.createHmac('sha256', secret)
      .update(data)
      .digest('hex');

    if (sig !== expectedSig) return null;

    // Parse the data string to get the session object
    const sessionData = JSON.parse(data);

    // Check expiration (7 days)
    const sevenDaysMs = 7 * 24 * 60 * 60 * 1000;
    if (Date.now() - sessionData.timestamp > sevenDaysMs) return null;

    return sessionData;
  } catch (error) {
    return null;
  }
}

export async function middleware(request) {
  const { pathname } = request.nextUrl;

  // Admin route protection ONLY (no supabase auth refresh to avoid overhead)
  if (pathname.startsWith('/admin')) {
    const sessionCookie = request.cookies.get('triangle_session')?.value;

    if (!sessionCookie) {
      console.log('❌ Admin access denied - No session cookie');
      return NextResponse.redirect(new URL('/login', request.url));
    }

    const sessionData = verifySession(sessionCookie, process.env.JWT_SECRET);

    if (!sessionData) {
      console.log('❌ Admin access denied - Invalid session');
      return NextResponse.redirect(new URL('/login', request.url));
    }

    const adminEmails = ['triangleintel@gmail.com'];

    if (!adminEmails.includes(sessionData.email)) {
      console.log(`❌ Admin access denied - ${sessionData.email} is not an admin`);
      return NextResponse.redirect(new URL('/dashboard', request.url));
    }

    console.log(`✅ Admin access granted - ${sessionData.email}`);
  }

  return NextResponse.next({
    request: {
      headers: request.headers,
    },
  });
}

// Only run middleware on admin routes
export const config = {
  matcher: '/admin/:path*',
};

