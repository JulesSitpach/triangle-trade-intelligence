-- Vulnerability Analyses Table
-- Stores AI-generated vulnerability analyses for dashboard alert history

CREATE TABLE IF NOT EXISTS vulnerability_analyses (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,

  -- Company context
  company_name TEXT,
  product_description TEXT,
  business_type TEXT,
  hs_code TEXT,

  -- Analysis results
  overall_risk_level TEXT NOT NULL, -- HIGH, MODERATE, LOW
  risk_score INTEGER NOT NULL, -- 0-100
  alert_count INTEGER DEFAULT 0,

  -- Component origins analyzed
  component_origins JSONB, -- Array of component data

  -- Full analysis data
  primary_vulnerabilities JSONB, -- Array of vulnerabilities
  component_risks JSONB, -- Array of component-specific risks
  alerts JSONB, -- Array of generated alerts
  recommendations JSONB, -- Immediate actions, monitoring, diversification

  -- AI metadata
  ai_model TEXT DEFAULT 'claude-3.5-sonnet',
  confidence_score INTEGER DEFAULT 85,

  -- Timestamps
  analyzed_at TIMESTAMPTZ DEFAULT NOW(),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Index for fast user queries
CREATE INDEX IF NOT EXISTS idx_vulnerability_analyses_user_id
  ON vulnerability_analyses(user_id);

-- Index for chronological queries
CREATE INDEX IF NOT EXISTS idx_vulnerability_analyses_analyzed_at
  ON vulnerability_analyses(analyzed_at DESC);

-- Row Level Security
ALTER TABLE vulnerability_analyses ENABLE ROW LEVEL SECURITY;

-- Policy: Users can only see their own analyses
CREATE POLICY "Users can view their own vulnerability analyses"
  ON vulnerability_analyses
  FOR SELECT
  USING (auth.uid() = user_id);

-- Policy: Users can insert their own analyses
CREATE POLICY "Users can create their own vulnerability analyses"
  ON vulnerability_analyses
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);

-- Policy: Users can update their own analyses
CREATE POLICY "Users can update their own vulnerability analyses"
  ON vulnerability_analyses
  FOR UPDATE
  USING (auth.uid() = user_id);

-- Policy: Users can delete their own analyses
CREATE POLICY "Users can delete their own vulnerability analyses"
  ON vulnerability_analyses
  FOR DELETE
  USING (auth.uid() = user_id);

COMMENT ON TABLE vulnerability_analyses IS 'AI-generated vulnerability analyses for supply chain risk monitoring';
