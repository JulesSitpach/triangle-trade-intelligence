/**
 * AI-POWERED VULNERABILITY ALERTS
 * Analyzes USMCA workflow results to generate personalized trade risk alerts
 * Uses component origins to identify geopolitical and tariff vulnerabilities
 */

import { logInfo, logError } from '../../lib/utils/production-logger.js';
import { createClient } from '@supabase/supabase-js';
import { parse } from 'cookie';
import crypto from 'crypto';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

function verifySession(cookieValue) {
  try {
    if (!cookieValue) return null;

    const decoded = Buffer.from(cookieValue, 'base64').toString('utf-8');
    const { data, sig } = JSON.parse(decoded);

    const secret = process.env.JWT_SECRET || 'fallback-secret-change-in-production';
    const expectedSig = crypto.createHmac('sha256', secret)
      .update(JSON.stringify(data))
      .digest('hex');

    if (sig !== expectedSig) return null;

    const sevenDaysMs = 7 * 24 * 60 * 60 * 1000;
    if (Date.now() - data.timestamp > sevenDaysMs) return null;

    return data;
  } catch (error) {
    return null;
  }
}

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ success: false, error: 'Method not allowed' });
  }

  try {
    const workflowData = req.body;

    console.log('🚨 ========== AI VULNERABILITY ANALYSIS: START ==========');
    console.log('📥 Workflow data received:', {
      company: workflowData.company?.name,
      product: workflowData.product?.description,
      component_count: workflowData.component_origins?.length || workflowData.components?.length,
      usmca_qualified: workflowData.usmca?.qualified
    });

    // Validate required data
    if (!workflowData.component_origins && !workflowData.components) {
      return res.status(400).json({
        success: false,
        error: 'No component origins data found. Complete USMCA workflow first.'
      });
    }

    const components = workflowData.component_origins || workflowData.components || [];

    // Build AI prompt for vulnerability analysis
    const prompt = buildVulnerabilityPrompt(workflowData, components);

    console.log('🎯 Sending to OpenRouter for vulnerability analysis...');

    // Call OpenRouter API
    const aiResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'anthropic/claude-3.5-sonnet',
        messages: [{
          role: 'user',
          content: prompt
        }],
        temperature: 0.2 // Low temperature for consistent, factual analysis
      })
    });

    if (!aiResponse.ok) {
      throw new Error(`OpenRouter API failed: ${aiResponse.status}`);
    }

    const aiResult = await aiResponse.json();
    const aiText = aiResult.choices?.[0]?.message?.content;

    console.log('🔮 Raw AI Response:', aiText);

    // Parse AI response
    let analysis;
    try {
      const jsonMatch = aiText.match(/```json\s*([\s\S]*?)\s*```/) || aiText.match(/```\s*([\s\S]*?)\s*```/);
      const jsonText = jsonMatch ? jsonMatch[1] : aiText;
      analysis = JSON.parse(jsonText.trim());
    } catch (parseError) {
      console.error('❌ Failed to parse AI response:', parseError);
      throw new Error(`AI response parsing failed: ${parseError.message}`);
    }

    console.log('✅ Vulnerability analysis complete:', {
      alert_count: analysis.alerts?.length,
      risk_level: analysis.overall_risk_level
    });

    // Format response
    const result = {
      success: true,
      timestamp: new Date().toISOString(),
      method: 'ai_vulnerability_analysis',

      company_context: {
        name: workflowData.company?.name || workflowData.company?.company_name,
        product: workflowData.product?.description || workflowData.product?.product_description,
        business_type: workflowData.company?.business_type,
        usmca_qualified: workflowData.usmca?.qualified
      },

      vulnerability_analysis: {
        overall_risk_level: analysis.overall_risk_level || 'MODERATE',
        risk_score: analysis.risk_score || 50,
        primary_vulnerabilities: analysis.primary_vulnerabilities || [],
        component_risks: analysis.component_risks || []
      },

      alerts: analysis.alerts || [],

      recommendations: {
        immediate_actions: analysis.recommendations?.immediate_actions || [],
        monitoring_priorities: analysis.recommendations?.monitoring_priorities || [],
        diversification_strategies: analysis.recommendations?.diversification_strategies || []
      },

      alert_subscriptions: analysis.alert_subscriptions || [],

      trust: {
        ai_powered: true,
        model: 'claude-3.5-sonnet',
        confidence_score: analysis.confidence_score || 85,
        analysis_date: new Date().toISOString()
      }
    };

    logInfo('AI vulnerability analysis completed', {
      company: workflowData.company?.name,
      alerts_generated: result.alerts.length,
      risk_level: result.vulnerability_analysis.overall_risk_level
    });

    // Save to database if user is authenticated
    const cookies = parse(req.headers.cookie || '');
    const sessionCookie = cookies.triangle_session;
    const session = verifySession(sessionCookie);

    if (session && session.userId) {
      try {
        const { data: savedAnalysis, error: saveError } = await supabase
          .from('vulnerability_analyses')
          .insert({
            user_id: session.userId,
            company_name: result.company_context.name,
            product_description: result.company_context.product,
            business_type: result.company_context.business_type,
            hs_code: workflowData.product?.hs_code,
            overall_risk_level: result.vulnerability_analysis.overall_risk_level,
            risk_score: result.vulnerability_analysis.risk_score,
            alert_count: result.alerts.length,
            component_origins: components,
            primary_vulnerabilities: result.vulnerability_analysis.primary_vulnerabilities,
            component_risks: result.vulnerability_analysis.component_risks,
            alerts: result.alerts,
            recommendations: result.recommendations,
            ai_model: result.trust.model,
            confidence_score: result.trust.confidence_score
          })
          .select()
          .single();

        if (saveError) {
          console.error('⚠️ Failed to save vulnerability analysis:', saveError);
        } else {
          console.log('✅ Vulnerability analysis saved to database:', savedAnalysis.id);
          result.saved_to_database = true;
          result.analysis_id = savedAnalysis.id;
        }
      } catch (dbError) {
        console.error('⚠️ Database save error:', dbError);
      }
    } else {
      console.log('ℹ️ Analysis not saved - user not authenticated');
    }

    return res.status(200).json(result);

  } catch (error) {
    logError('AI vulnerability analysis failed', {
      error: error.message,
      stack: error.stack
    });

    return res.status(500).json({
      success: false,
      error: 'Vulnerability analysis failed',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
}

/**
 * Build comprehensive vulnerability analysis prompt
 */
function buildVulnerabilityPrompt(workflowData, components) {
  // Format component breakdown with percentages
  const componentBreakdown = components
    .map((c, i) => {
      const country = c.origin_country || c.country;
      const percentage = c.value_percentage || c.percentage || 0;
      const description = c.description || 'Component';
      return `${i + 1}. ${description}: ${percentage}% from ${country}`;
    })
    .join('\n');

  // Get country list for geopolitical analysis
  const countries = [...new Set(components.map(c => c.origin_country || c.country))].join(', ');

  const prompt = `You are a trade policy and geopolitical risk analyst. Analyze this company's supply chain for trade vulnerabilities and generate specific, actionable alerts.

COMPANY PROFILE:
Company: ${workflowData.company?.name || workflowData.company?.company_name || 'Not specified'}
Product: ${workflowData.product?.description || workflowData.product?.product_description || 'Not specified'}
Business Type: ${workflowData.company?.business_type || 'Not specified'}
USMCA Qualified: ${workflowData.usmca?.qualified ? 'YES' : 'NO'}
${workflowData.usmca?.qualified ? '' : `Gap to Qualification: ${workflowData.usmca?.gap || 'Unknown'}%`}

SUPPLY CHAIN COMPONENT ORIGINS:
${componentBreakdown}

Countries in Supply Chain: ${countries}

VULNERABILITY ANALYSIS INSTRUCTIONS:

1. **Identify Geopolitical Risks:**
   - Which countries have trade tensions (US-China, EU-Russia, etc.)
   - Which regions have political instability
   - Which dependencies create single points of failure

2. **Analyze Tariff Exposure:**
   - Current tariff rates for each origin country
   - Recent tariff changes or proposals
   - Industry-specific trade restrictions

3. **Generate Specific Alerts:**
   Each alert must be:
   - Specific to THIS company's actual supply chain
   - Include exact percentage from vulnerability analysis
   - Reference specific components/countries
   - Provide actionable monitoring guidance
   - Include potential financial impact

4. **Risk Prioritization:**
   - HIGH: Immediate threat (tariff increases, sanctions, supply disruptions)
   - MEDIUM: Emerging concern (policy proposals, trade negotiations)
   - LOW: Long-term monitoring (political shifts, economic trends)

5. **Recommend Alert Subscriptions:**
   - What specific topics should this company monitor?
   - What trigger events should generate notifications?
   - What data sources are most relevant?

REQUIRED OUTPUT FORMAT (JSON):

{
  "overall_risk_level": "HIGH" | "MODERATE" | "LOW",
  "risk_score": 0-100,
  "primary_vulnerabilities": [
    {
      "vulnerability_type": "geopolitical" | "tariff" | "supply_chain",
      "description": "Specific vulnerability description",
      "affected_components": ["component names"],
      "risk_level": "HIGH" | "MEDIUM" | "LOW",
      "financial_exposure": "percentage or dollar amount"
    }
  ],
  "component_risks": [
    {
      "component": "component description",
      "origin_country": "country code",
      "percentage": number,
      "risk_factors": ["factor 1", "factor 2"],
      "risk_level": "HIGH" | "MEDIUM" | "LOW"
    }
  ],
  "alerts": [
    {
      "alert_id": "unique_id",
      "title": "Alert title specific to this company",
      "severity": "HIGH" | "MEDIUM" | "LOW",
      "category": "tariff" | "geopolitical" | "regulatory" | "supply_chain",
      "description": "Detailed alert description referencing exact percentages and components",
      "affected_components": ["specific components"],
      "origin_countries": ["country codes"],
      "potential_impact": "Specific dollar amount or percentage impact",
      "recommended_action": "What should company do about this?",
      "monitoring_guidance": "What to watch for?",
      "alert_triggers": ["What events should trigger notifications?"]
    }
  ],
  "recommendations": {
    "immediate_actions": ["Action 1 with specific details", "Action 2..."],
    "monitoring_priorities": ["What to monitor daily/weekly/monthly"],
    "diversification_strategies": ["Specific sourcing alternatives with countries"]
  },
  "alert_subscriptions": [
    {
      "topic": "US-China trade policy",
      "relevance": "Your 45% Taiwan dependency",
      "notification_triggers": ["New tariff announcements", "Policy changes"],
      "recommended_frequency": "daily" | "weekly" | "monthly"
    }
  ],
  "confidence_score": 85
}

CRITICAL RULES:
- Be specific - reference exact component percentages from the data
- Be realistic - use current geopolitical and trade policy context
- Be actionable - each alert must have clear recommended actions
- Be relevant - only create alerts for actual vulnerabilities in their supply chain
- Include dollar amounts where possible (calculate from trade volume if available)

Perform the vulnerability analysis now:`;

  return prompt;
}
