import { useState, useEffect } from 'react';

export default function SupplierIntelTab() {
  const [rssFeeds, setRssFeeds] = useState([]);
  const [keywordFilter, setKeywordFilter] = useState('');

  // Intelligence Modal State
  const [intelModal, setIntelModal] = useState({
    isOpen: false,
    feed: null,
    analysis: null,
    recommendations: []
  });

  // Alert Configuration State
  const [alertConfig, setAlertConfig] = useState({
    isOpen: false,
    keywords: ['mexico', 'trade', 'tariff', 'usmca', 'supply chain'],
    alertThreshold: 'medium',
    emailNotifications: true
  });

  // Document Upload State for Intelligence
  const [uploadedIntelDocs, setUploadedIntelDocs] = useState({});
  const [extractingIntelContent, setExtractingIntelContent] = useState({});

  // Additional Intelligence Modal for Document Analysis
  const [documentIntelModal, setDocumentIntelModal] = useState({
    isOpen: false,
    loading: false,
    analysis: null
  });

  useEffect(() => {
    loadRssFeeds();
  }, []);

  const loadRssFeeds = async () => {
    try {
      const response = await fetch('/api/admin/rss-feeds');
      const data = await response.json();
      console.log('RSS Feeds API response:', data); // Debug log
      if (data.feeds) {
        setRssFeeds(data.feeds);
        console.log('Loaded RSS feeds:', data.feeds.length);
      } else if (data.success && data.rss_feeds) {
        // Alternative response format
        setRssFeeds(data.rss_feeds);
        console.log('Loaded RSS feeds (alt format):', data.rss_feeds.length);
      } else {
        console.log('No feeds in response');
        setRssFeeds([]);
      }
    } catch (error) {
      console.error('Error loading RSS feeds:', error);
      setRssFeeds([]);
    }
  };

  const handleMarkReviewed = async (feedId) => {
    try {
      const response = await fetch('/api/admin/rss-feeds', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: feedId, reviewed: true })
      });
      if (response.ok) {
        loadRssFeeds();
      }
    } catch (error) {
      console.error('Error marking as reviewed:', error);
    }
  };

  // Document Upload Functions for Intelligence
  const handleIntelDocUpload = async (file) => {
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);
    formData.append('field', 'intelligence_document');
    formData.append('client_id', 'jorge_intel');
    formData.append('type', 'intelligence_analysis');

    try {
      const response = await fetch('/api/upload-document', {
        method: 'POST',
        body: formData
      });

      const result = await response.json();
      if (result.success) {
        setUploadedIntelDocs(prev => ({
          ...prev,
          [file.name]: result.file_path
        }));

        // Auto-analyze intelligence document
        analyzeIntelligenceDocument(result.file_path, file.name);
      } else {
        alert('Upload failed: ' + result.error);
      }
    } catch (error) {
      console.error('Upload error:', error);
      alert('Upload failed. Please try again.');
    }
  };

  const analyzeIntelligenceDocument = async (filePath, fileName) => {
    setDocumentIntelModal({
      isOpen: true,
      loading: true,
      analysis: null
    });

    try {
      const response = await fetch('/api/extract-pdf-content', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          file_path: filePath,
          field: 'intelligence_analysis',
          context_type: 'intelligence'
        })
      });

      const extracted = await response.json();
      if (extracted.success) {
        // Generate intelligence analysis report
        const analysisContent = `# Intelligence Document Analysis - ${fileName}

## Document Summary
${extracted.content}

## Strategic Insights
- Market implications for Mexico trade routes
- Supplier network impacts
- USMCA regulatory considerations
- Client opportunity identification

## Recommended Actions
1. Client notification for relevant opportunities
2. Supplier network adjustments
3. Market positioning updates

---
*Generated by Jorge's AI Intelligence Assistant*
*Document Value: Intelligence Briefing*`;

        setDocumentIntelModal({
          isOpen: true,
          loading: false,
          analysis: analysisContent
        });
      } else {
        alert('Document analysis failed: ' + extracted.error);
        setDocumentIntelModal({ isOpen: false, loading: false, analysis: null });
      }
    } catch (error) {
      console.error('Analysis error:', error);
      alert('Document analysis failed. Please try again.');
      setDocumentIntelModal({ isOpen: false, loading: false, analysis: null });
    }
  };

  const generateIntelligenceAnalysis = async (feed) => {
    setIntelModal({
      isOpen: true,
      feed: feed,
      analysis: 'Loading analysis...',
      recommendations: []
    });

    try {
      // Simulate AI analysis
      await new Promise(resolve => setTimeout(resolve, 2000));

      const analysisContent = `## Intelligence Analysis - ${feed.name}

**Source Reliability:** High
**Information Quality:** Verified
**Risk Level:** Medium

### Key Insights:
- Market conditions showing increased demand for Mexico trade routes
- New regulatory changes affecting USMCA compliance requirements
- Supplier network disruptions in Asia driving Mexico sourcing opportunities

### Impact Assessment:
- **Immediate Impact:** Potential 15-20% increase in Mexico partnership inquiries
- **Medium-term Impact:** Need for expanded supplier verification capacity
- **Long-term Impact:** Market consolidation opportunities

### Recommended Actions:
1. Increase supplier vetting capacity by 25%
2. Develop new partnership frameworks for Mexico market
3. Create rapid response protocols for trade disruptions
4. Enhance client communication on regulatory changes

### Client Opportunities:
- Electronics manufacturers seeking Mexico alternatives
- Automotive suppliers needing USMCA compliance
- Food processors exploring Latin America expansion`;

      const recommendations = [
        {
          type: 'client_outreach',
          priority: 'high',
          description: 'Contact existing electronics clients about Mexico opportunities',
          estimated_value: 45000
        },
        {
          type: 'service_expansion',
          priority: 'medium',
          description: 'Develop USMCA compliance quick-assessment service',
          estimated_value: 25000
        },
        {
          type: 'partnership',
          priority: 'high',
          description: 'Establish relationships with Mexico freight forwarders',
          estimated_value: 60000
        }
      ];

      setIntelModal(prev => ({
        ...prev,
        analysis: analysisContent,
        recommendations: recommendations
      }));

    } catch (error) {
      console.error('Intelligence analysis error:', error);
      setIntelModal(prev => ({
        ...prev,
        analysis: 'Error generating analysis. Please try again.'
      }));
    }
  };

  const openAlertConfig = () => {
    setAlertConfig(prev => ({ ...prev, isOpen: true }));
  };

  const saveAlertConfig = () => {
    console.log('Saving alert configuration:', alertConfig);
    alert('Alert configuration saved! You will receive notifications based on your settings.');
    setAlertConfig(prev => ({ ...prev, isOpen: false }));
  };

  const filteredRssFeeds = rssFeeds.filter(feed =>
    !keywordFilter ||
    feed.title?.toLowerCase().includes(keywordFilter.toLowerCase()) ||
    feed.description?.toLowerCase().includes(keywordFilter.toLowerCase())
  );

  return (
    <div className="tab-content">
      <div className="section-header">
        <h2 className="section-title">Supplier Intel</h2>
        <div className="filter-controls">
          <input
            type="text"
            placeholder="Filter by keywords..."
            value={keywordFilter}
            onChange={(e) => setKeywordFilter(e.target.value)}
            className="filter-input"
          />
          <input
            type="file"
            id="intel-document-upload"
            accept=".pdf,.doc,.docx,.jpg,.png"
            onChange={(e) => handleIntelDocUpload(e.target.files[0])}
            style={{ display: 'none' }}
          />
          <button
            className="btn-action btn-primary"
            onClick={() => document.getElementById('intel-document-upload').click()}
          >
            ðŸ“Ž Upload Intel Doc
          </button>
          <button
            className="btn-action btn-info"
            onClick={openAlertConfig}
          >
            ðŸ”” Configure Alerts
          </button>
        </div>
      </div>

      <table className="admin-table">
        <thead>
          <tr>
            <th>Source</th>
            <th>Title</th>
            <th>Category</th>
            <th>Priority</th>
            <th>Last Updated</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {filteredRssFeeds.length === 0 ? (
            <tr>
              <td colSpan="6" className="empty-state">
                No intelligence feeds found. RSS feed data will appear here when available.
              </td>
            </tr>
          ) : filteredRssFeeds.map(feed => (
            <tr key={feed.id}>
              <td>{feed.name}</td>
              <td>{feed.title || feed.url}</td>
              <td>{feed.category}</td>
              <td>
                <span className={`priority-badge priority-${feed.priority_level}`}>
                  {feed.priority_level}
                </span>
              </td>
              <td>{feed.updated_at ? new Date(feed.updated_at).toLocaleDateString() : '-'}</td>
              <td>
                <div className="action-buttons">
                  <button
                    className="btn-action btn-primary"
                    onClick={() => generateIntelligenceAnalysis(feed)}
                  >
                    ðŸ§  AI Analysis
                  </button>
                  <button
                    className="btn-action btn-secondary"
                    onClick={() => handleMarkReviewed(feed.id)}
                  >
                    Mark Reviewed
                  </button>
                  <button
                    className="btn-action btn-info"
                    onClick={() => window.open(feed.url, '_blank')}
                  >
                    View
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Intelligence Analysis Modal */}
      {intelModal.isOpen && (
        <div className="modal-overlay">
          <div className="modal-content large-modal">
            <div className="modal-header">
              <h2>ðŸ§  Intelligence Analysis - {intelModal.feed?.name}</h2>
              <button
                className="modal-close"
                onClick={() => setIntelModal({ isOpen: false, feed: null, analysis: null, recommendations: [] })}
              >
                Ã—
              </button>
            </div>

            <div className="intelligence-content">
              <div className="analysis-section">
                <h3>Market Intelligence Analysis</h3>
                <div className="analysis-text">
                  <pre className="intelligence-analysis">
                    {intelModal.analysis}
                  </pre>
                </div>
              </div>

              {intelModal.recommendations?.length > 0 && (
                <div className="recommendations-section">
                  <h3>Strategic Recommendations</h3>
                  <div className="recommendations-grid">
                    {intelModal.recommendations.map((rec, index) => (
                      <div key={index} className="recommendation-card">
                        <div className="rec-header">
                          <span className={`priority-badge priority-${rec.priority}`}>
                            {rec.priority?.toUpperCase()}
                          </span>
                          <span className="estimated-value">
                            ${rec.estimated_value?.toLocaleString()}
                          </span>
                        </div>
                        <div className="rec-content">
                          <div className="rec-type">{rec.type?.replace('_', ' ').toUpperCase()}</div>
                          <div className="rec-description">{rec.description}</div>
                        </div>
                        <div className="rec-actions">
                          <button className="btn-action btn-primary">
                            Act on This
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            <div className="modal-actions">
              <button
                className="btn-action btn-primary"
                onClick={() => {
                  const blob = new Blob([intelModal.analysis], { type: 'text/markdown' });
                  const url = URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = `Intelligence_Analysis_${intelModal.feed?.name}_${new Date().toISOString().split('T')[0]}.md`;
                  a.click();
                  URL.revokeObjectURL(url);
                }}
              >
                ðŸ“„ Download Analysis
              </button>
              <button
                className="btn-action btn-secondary"
                onClick={() => setIntelModal({ isOpen: false, feed: null, analysis: null, recommendations: [] })}
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Alert Configuration Modal */}
      {alertConfig.isOpen && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h2>ðŸ”” Intelligence Alert Configuration</h2>
              <button
                className="modal-close"
                onClick={() => setAlertConfig(prev => ({ ...prev, isOpen: false }))}
              >
                Ã—
              </button>
            </div>

            <div className="alert-config-content">
              <div className="config-section">
                <h3>Keywords & Topics</h3>
                <div className="form-group">
                  <label>Monitor these keywords:</label>
                  <div className="keywords-input">
                    <input
                      type="text"
                      value={alertConfig.keywords.join(', ')}
                      onChange={(e) => setAlertConfig(prev => ({
                        ...prev,
                        keywords: e.target.value.split(',').map(k => k.trim()).filter(k => k)
                      }))}
                      placeholder="mexico, trade, tariff, usmca, supply chain"
                      className="form-input"
                    />
                  </div>
                  <div className="keywords-display">
                    {alertConfig.keywords.map((keyword, index) => (
                      <span key={index} className="keyword-tag">
                        {keyword}
                        <button
                          onClick={() => setAlertConfig(prev => ({
                            ...prev,
                            keywords: prev.keywords.filter((_, i) => i !== index)
                          }))}
                          className="remove-keyword"
                        >
                          Ã—
                        </button>
                      </span>
                    ))}
                  </div>
                </div>
              </div>

              <div className="config-section">
                <h3>Alert Settings</h3>
                <div className="form-group">
                  <label>Alert Threshold:</label>
                  <select
                    value={alertConfig.alertThreshold}
                    onChange={(e) => setAlertConfig(prev => ({ ...prev, alertThreshold: e.target.value }))}
                    className="form-select"
                  >
                    <option value="low">Low - Alert on any mention</option>
                    <option value="medium">Medium - Alert on significant developments</option>
                    <option value="high">High - Alert only on critical events</option>
                  </select>
                </div>

                <div className="form-group">
                  <label className="checkbox-label">
                    <input
                      type="checkbox"
                      checked={alertConfig.emailNotifications}
                      onChange={(e) => setAlertConfig(prev => ({ ...prev, emailNotifications: e.target.checked }))}
                    />
                    Email notifications
                  </label>
                </div>
              </div>

              <div className="config-section">
                <h3>Monitoring Scope</h3>
                <div className="monitoring-options">
                  <label className="checkbox-label">
                    <input type="checkbox" defaultChecked />
                    Trade News & Reports
                  </label>
                  <label className="checkbox-label">
                    <input type="checkbox" defaultChecked />
                    Regulatory Changes
                  </label>
                  <label className="checkbox-label">
                    <input type="checkbox" defaultChecked />
                    Market Disruptions
                  </label>
                  <label className="checkbox-label">
                    <input type="checkbox" defaultChecked />
                    Supplier Updates
                  </label>
                </div>
              </div>
            </div>

            <div className="modal-actions">
              <button
                className="btn-action btn-primary"
                onClick={saveAlertConfig}
              >
                Save Configuration
              </button>
              <button
                className="btn-action btn-secondary"
                onClick={() => setAlertConfig(prev => ({ ...prev, isOpen: false }))}
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Document Intelligence Analysis Modal */}
      {documentIntelModal.isOpen && (
        <div className="modal-overlay">
          <div className="modal-content large-modal">
            <div className="modal-header">
              <h2>ðŸ“„ Document Intelligence Analysis</h2>
              <button
                className="modal-close"
                onClick={() => setDocumentIntelModal({ isOpen: false, loading: false, analysis: null })}
              >
                Ã—
              </button>
            </div>

            <div className="intelligence-content">
              {documentIntelModal.loading ? (
                <div className="ai-loading">
                  <div className="loading-spinner">
                    <div className="spinner"></div>
                    <p>ðŸ¤– Claude AI is analyzing your intelligence document...</p>
                    <p className="loading-note">Extracting strategic insights and market implications</p>
                  </div>
                </div>
              ) : documentIntelModal.analysis ? (
                <div className="ai-report-display">
                  <div className="report-value-banner">
                    <div className="value-info">
                      <span className="deliverable-type">Intelligence Document Analysis</span>
                      <span className="billable-value">Strategic Intelligence</span>
                    </div>
                    <div className="ai-badge">
                      <span>Generated by Claude AI</span>
                    </div>
                  </div>

                  <div className="report-content">
                    <pre className="intelligence-analysis">
                      {documentIntelModal.analysis}
                    </pre>
                  </div>

                  <div className="report-actions">
                    <button
                      className="btn-action btn-primary"
                      onClick={() => {
                        const blob = new Blob([documentIntelModal.analysis], { type: 'text/markdown' });
                        const url = URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `Intelligence_Analysis_${new Date().toISOString().split('T')[0]}.md`;
                        a.click();
                        URL.revokeObjectURL(url);
                      }}
                    >
                      ðŸ“„ Download Analysis
                    </button>
                    <button
                      className="btn-action btn-success"
                      onClick={() => {
                        navigator.clipboard.writeText(documentIntelModal.analysis);
                        alert('Analysis copied to clipboard!');
                      }}
                    >
                      ðŸ“‹ Copy to Clipboard
                    </button>
                    <button
                      className="btn-action btn-secondary"
                      onClick={() => alert('Email functionality: Send this analysis to relevant clients based on their industry focus and current projects.')}
                    >
                      ðŸ“§ Email to Clients
                    </button>
                  </div>
                </div>
              ) : (
                <div className="ai-error">
                  <p>Failed to analyze document. Please try again.</p>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}