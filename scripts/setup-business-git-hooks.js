#!/usr/bin/env node

/**
 * SETUP BUSINESS CONTEXT GIT HOOKS
 * Install git hooks that enforce business context consideration
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class BusinessGitHooksSetup {
  constructor() {
    this.projectRoot = process.cwd();
    this.gitHooksDir = path.join(this.projectRoot, '.git', 'hooks');
    this.customHooksDir = path.join(this.projectRoot, '.githooks');
    
    this.hooks = {
      'pre-commit': 'pre-commit-business-context',
      'pre-push': 'pre-push-business-validation',
      'commit-msg': 'commit-msg-business-enhancement'
    };
  }

  async setupHooks() {
    console.log('üéØ SETTING UP BUSINESS CONTEXT GIT HOOKS\n');
    
    // Ensure .git/hooks directory exists
    if (!fs.existsSync(this.gitHooksDir)) {
      console.log('‚ùå .git/hooks directory not found - ensure this is a git repository');
      return false;
    }
    
    // Ensure .githooks directory exists
    if (!fs.existsSync(this.customHooksDir)) {
      fs.mkdirSync(this.customHooksDir);
      console.log('‚úÖ Created .githooks directory');
    }
    
    // Install each hook
    for (const [hookName, sourceFile] of Object.entries(this.hooks)) {
      await this.installHook(hookName, sourceFile);
    }
    
    console.log('\nüéâ BUSINESS CONTEXT GIT HOOKS SETUP COMPLETE\n');
    
    // Display usage instructions
    this.displayUsageInstructions();
    
    return true;
  }

  async installHook(hookName, sourceFile) {
    const sourcePath = path.join(this.customHooksDir, sourceFile);
    const targetPath = path.join(this.gitHooksDir, hookName);
    
    console.log(`üìã Installing ${hookName} hook...`);
    
    if (!fs.existsSync(sourcePath)) {
      await this.createHookFile(sourcePath, hookName);
    }
    
    // Copy hook file to .git/hooks
    try {
      fs.copyFileSync(sourcePath, targetPath);
      
      // Make executable (Unix-like systems)
      if (process.platform !== 'win32') {
        execSync(`chmod +x "${targetPath}"`);
      }
      
      console.log(`‚úÖ ${hookName} hook installed successfully`);
      return true;
    } catch (error) {
      console.log(`‚ùå Failed to install ${hookName} hook:`, error.message);
      return false;
    }
  }

  async createHookFile(filePath, hookName) {
    const hookContent = this.getHookContent(hookName);
    fs.writeFileSync(filePath, hookContent);
    console.log(`üìù Created ${path.basename(filePath)}`);
  }

  getHookContent(hookName) {
    switch (hookName) {
      case 'pre-push':
        return this.getPrePushHookContent();
      case 'commit-msg':
        return this.getCommitMsgHookContent();
      default:
        return '#!/bin/bash\necho "Business context hook placeholder"';
    }
  }

  getPrePushHookContent() {
    return `#!/bin/bash

# BUSINESS CONTEXT PRE-PUSH VALIDATION
# Ensure business context is maintained before pushing to remote

echo "üöÄ BUSINESS CONTEXT PRE-PUSH VALIDATION"
echo "======================================"

# Colors
RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
NC='\\033[0m' # No Color

# Business context validation
validate_business_context() {
    echo -e "\\n\${BLUE}BUSINESS CONTEXT VALIDATION\${NC}"
    
    # Check if recent commits have business context consideration
    recent_commits=$(git log --oneline -5 --pretty=format:"%s")
    
    business_context_commits=0
    while IFS= read -r commit; do
        if echo "$commit" | grep -qE "(business|customer|Sarah|Mike|Lisa|scenario|USMCA|qualification|compliance)"; then
            business_context_commits=$((business_context_commits + 1))
        fi
    done <<< "$recent_commits"
    
    echo "Recent commits with business context: $business_context_commits / 5"
    
    if [ "$business_context_commits" -lt 2 ]; then
        echo -e "\${YELLOW}‚ö†Ô∏è  Low business context awareness in recent commits\${NC}"
        echo "Consider adding business impact to commit messages"
    else
        echo -e "\${GREEN}‚úÖ Good business context awareness\${NC}"
    fi
    
    return 0
}

# Business readiness check
business_readiness_check() {
    echo -e "\\n\${BLUE}BUSINESS READINESS CHECK\${NC}"
    
    # Check if critical business files exist
    critical_files=(
        "PROJECT-CONTEXT-DOCUMENT.md"
        "CLAUDE.md"
        "pages/api/integrated-usmca-classification.js"
        "components/workflow/ComponentOriginsStepEnhanced.js"
    )
    
    missing_files=()
    for file in "\${critical_files[@]}"; do
        if [ ! -f "$file" ]; then
            missing_files+=("$file")
        fi
    done
    
    if [ \${#missing_files[@]} -gt 0 ]; then
        echo -e "\${RED}‚ùå CRITICAL: Missing business-critical files:\${NC}"
        for file in "\${missing_files[@]}"; do
            echo "   ‚Ä¢ $file"
        done
        echo -e "\${YELLOW}Customer Impact: Core business functionality may be broken\${NC}"
        return 1
    fi
    
    echo -e "\${GREEN}‚úÖ All critical business files present\${NC}"
    return 0
}

# Customer scenario validation
validate_customer_scenarios() {
    echo -e "\\n\${BLUE}CUSTOMER SCENARIO VALIDATION\${NC}"
    
    # Quick check that customer scenarios are still valid
    if [ -f "PROJECT-CONTEXT-DOCUMENT.md" ]; then
        scenarios_present=0
        
        if grep -q "Electronics Manufacturer" PROJECT-CONTEXT-DOCUMENT.md; then
            scenarios_present=$((scenarios_present + 1))
        fi
        
        if grep -q "Automotive Parts" PROJECT-CONTEXT-DOCUMENT.md; then
            scenarios_present=$((scenarios_present + 1))
        fi
        
        if grep -q "Fashion Retailer" PROJECT-CONTEXT-DOCUMENT.md; then
            scenarios_present=$((scenarios_present + 1))
        fi
        
        echo "Customer scenarios documented: $scenarios_present / 3"
        
        if [ "$scenarios_present" -eq 3 ]; then
            echo -e "\${GREEN}‚úÖ All customer scenarios documented\${NC}"
        else
            echo -e "\${YELLOW}‚ö†Ô∏è  Some customer scenarios may be missing\${NC}"
        fi
    else
        echo -e "\${RED}‚ùå PROJECT-CONTEXT-DOCUMENT.md not found\${NC}"
        return 1
    fi
    
    return 0
}

# Main execution
main() {
    echo -e "\${BLUE}Validating business context before push...\\n\${NC}"
    
    validate_business_context || exit 1
    business_readiness_check || exit 1
    validate_customer_scenarios || exit 1
    
    echo -e "\\n\${GREEN}üéâ BUSINESS CONTEXT VALIDATION PASSED!\${NC}"
    echo -e "\${GREEN}‚úÖ Push approved - business context maintained\${NC}"
    echo -e "\\n\${BLUE}Proceeding with push...\${NC}"
    
    exit 0
}

# Run main function
main "$@"`;
  }

  getCommitMsgHookContent() {
    return `#!/bin/bash

# BUSINESS CONTEXT COMMIT MESSAGE ENHANCEMENT
# Enhance commit messages with business context reminders

commit_message_file="$1"

# Colors
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
NC='\\033[0m' # No Color

# Read the commit message
commit_message=$(cat "$commit_message_file")

# Check if message already has business context
has_business_context=false

business_keywords=("business" "customer" "Sarah" "Mike" "Lisa" "scenario" "USMCA" "qualification" "compliance" "savings")

for keyword in "\${business_keywords[@]}"; do
    if echo "$commit_message" | grep -qi "$keyword"; then
        has_business_context=true
        break
    fi
done

# Add business context reminder if not present
if [ "$has_business_context" = false ]; then
    echo -e "\\n\${YELLOW}üí° BUSINESS CONTEXT REMINDER:\${NC}"
    echo -e "\${BLUE}Consider adding business context to your commit message:\${NC}"
    echo "‚Ä¢ How does this serve Sarah (Compliance), Mike (Procurement), or Lisa (Finance)?"
    echo "‚Ä¢ Which customer scenario does this impact (Electronics, Automotive, Fashion)?"
    echo "‚Ä¢ Does this advance customer business outcomes?"
    echo ""
fi

exit 0`;
  }

  displayUsageInstructions() {
    console.log('üìñ USAGE INSTRUCTIONS:');
    console.log('');
    console.log('üîÑ Automatic Business Context Enforcement:');
    console.log('‚Ä¢ pre-commit: Validates business context before every commit');
    console.log('‚Ä¢ pre-push: Ensures business readiness before pushing');
    console.log('‚Ä¢ commit-msg: Enhances commit messages with business context');
    console.log('');
    console.log('üéØ What Happens Now:');
    console.log('‚Ä¢ Every commit will prompt for business context consideration');
    console.log('‚Ä¢ You\'ll need to specify customer impact and scenario');
    console.log('‚Ä¢ CSS and hardcoding protection is automatically enforced');
    console.log('‚Ä¢ Push operations validate business readiness');
    console.log('');
    console.log('üí° Pro Tips:');
    console.log('‚Ä¢ Include customer names (Sarah, Mike, Lisa) in commit messages');
    console.log('‚Ä¢ Reference scenarios (Electronics, Automotive, Fashion)');
    console.log('‚Ä¢ Describe business impact, not just technical changes');
    console.log('‚Ä¢ Use "Skip hooks" flag (git commit --no-verify) only in emergencies');
    console.log('');
    console.log('üõ†Ô∏è  Management Commands:');
    console.log('‚Ä¢ npm run context:validate - Quick business context check');
    console.log('‚Ä¢ npm run business-impact - Validate specific changes');
    console.log('‚Ä¢ npm run audit:business - Complete business audit');
    console.log('');
  }

  async testHooks() {
    console.log('üß™ TESTING BUSINESS CONTEXT GIT HOOKS\n');
    
    // Test pre-commit hook exists and is executable
    const preCommitPath = path.join(this.gitHooksDir, 'pre-commit');
    if (fs.existsSync(preCommitPath)) {
      console.log('‚úÖ pre-commit hook installed');
      
      // Test if executable
      try {
        const stats = fs.statSync(preCommitPath);
        console.log(`‚úÖ pre-commit hook permissions: ${stats.mode}`);
      } catch (error) {
        console.log('‚ùå Cannot check pre-commit hook permissions');
      }
    } else {
      console.log('‚ùå pre-commit hook not found');
    }
    
    // Test business context document
    if (fs.existsSync(path.join(this.projectRoot, 'PROJECT-CONTEXT-DOCUMENT.md'))) {
      console.log('‚úÖ PROJECT-CONTEXT-DOCUMENT.md found');
    } else {
      console.log('‚ùå PROJECT-CONTEXT-DOCUMENT.md missing');
    }
    
    console.log('\nüéØ Hook testing completed');
  }
}

// Command Line Interface
async function main() {
  const command = process.argv[2] || 'setup';
  const hookSetup = new BusinessGitHooksSetup();
  
  switch (command) {
    case 'setup':
      await hookSetup.setupHooks();
      break;
      
    case 'test':
      await hookSetup.testHooks();
      break;
      
    default:
      console.log('üéØ BUSINESS CONTEXT GIT HOOKS SETUP\n');
      console.log('Available commands:');
      console.log('‚Ä¢ setup  - Install business context git hooks');
      console.log('‚Ä¢ test   - Test that hooks are properly installed\n');
      console.log('Examples:');
      console.log('‚Ä¢ node scripts/setup-business-git-hooks.js setup');
      console.log('‚Ä¢ node scripts/setup-business-git-hooks.js test');
  }
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = BusinessGitHooksSetup;