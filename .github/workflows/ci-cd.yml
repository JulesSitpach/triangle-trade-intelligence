name: Triangle Intelligence CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and validation checks
  security-checks:
    runs-on: ubuntu-latest
    name: Security Audit
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level moderate
      
      - name: Check for hardcoded secrets
        run: |
          # Check for potential API keys or secrets
          if grep -r "sk-[a-zA-Z0-9]" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" lib/ pages/ components/ || \
             grep -r "eyJ[a-zA-Z0-9]" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" lib/ pages/ components/ || \
             grep -r "pk_live_" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" lib/ pages/ components/; then
            echo "‚ùå Potential hardcoded secrets found!"
            exit 1
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi
      
      - name: Validate environment template
        run: |
          if [ ! -f .env.example ]; then
            echo "‚ùå Missing .env.example template"
            exit 1
          fi
          echo "‚úÖ Environment template exists"

  # Code quality and testing
  test:
    runs-on: ubuntu-latest
    name: Tests & Code Quality
    needs: security-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript type checking
        run: npm run type-check
      
      - name: Run tests with coverage
        run: npm run test:ci
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://test-project.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
          ANTHROPIC_API_KEY: test-anthropic-key
          COMTRADE_API_KEY: test-comtrade-key
          SHIPPO_API_KEY: test-shippo-key
          NODE_ENV: test
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: true
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://test-project.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key

  # Build and push Docker image
  build-image:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: test
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: build-image
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging environment
        run: |
          echo "üöÄ Deploying to staging..."
          # Add actual deployment commands here
          # Example: kubectl apply -f k8s/staging/
          # Example: docker-compose up -d
      
      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          # Add smoke test commands
          # curl -f https://staging.triangleintelligence.com/health
      
      - name: Notify deployment
        run: |
          echo "‚úÖ Staging deployment completed"

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production environment
        run: |
          echo "üöÄ Deploying to production..."
          # Add actual production deployment commands
      
      - name: Run production health checks
        run: |
          echo "üè• Running production health checks..."
          # Add production health check commands
      
      - name: Notify production deployment
        run: |
          echo "üéâ Production deployment completed"

  # Performance and security testing
  post-deploy-tests:
    runs-on: ubuntu-latest
    name: Post-Deployment Testing
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Load testing
        run: |
          echo "‚ö° Running load tests..."
          # Add load testing commands
      
      - name: Security scan
        run: |
          echo "üîí Running security scan..."
          # Add security scanning commands
      
      - name: Performance audit
        run: |
          echo "üìä Running performance audit..."
          # Add performance testing commands